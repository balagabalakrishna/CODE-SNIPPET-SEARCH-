[
  {
    "title": "Fetch API GET Request",
    "code": "fetch('https://api.example.com/data')\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error('Error:', error));",
    "language": "javascript",
    "tags": [
      "web",
      "http",
      "fetch"
    ]
  },
  {
    "title": "Axios GET Request with Async/Await",
    "code": "const fetchData = async () => {\n  try {\n    const response = await axios.get('https://api.example.com/data');\n    console.log(response.data);\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};",
    "language": "javascript",
    "tags": [
      "web",
      "http",
      "axios",
      "async"
    ]
  },
  {
    "title": "Debounce Function",
    "code": "const debounce = (func, delay) => {\n  let timeoutId;\n  return (...args) => {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => func.apply(this, args), delay);\n  };\n};",
    "language": "javascript",
    "tags": [
      "web",
      "performance",
      "function"
    ]
  },
  {
    "title": "Throttle Function",
    "code": "const throttle = (func, limit) => {\n  let inThrottle;\n  return (...args) => {\n    if (!inThrottle) {\n      func.apply(this, args);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  };\n};",
    "language": "javascript",
    "tags": [
      "web",
      "performance",
      "function"
    ]
  },
  {
    "title": "React Custom Hook for Fetching Data",
    "code": "import { useState, useEffect } from 'react';\n\nconst useFetch = (url) => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(url);\n        const json = await response.json();\n        setData(json);\n      } catch (error) {\n        console.error('Error:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [url]);\n\n  return { data, loading };\n};",
    "language": "javascript",
    "tags": [
      "react",
      "hooks",
      "fetch"
    ]
  },
  {
    "title": "React Context API Setup",
    "code": "import { createContext, useContext, useState } from 'react';\n\nconst AppContext = createContext();\n\nexport const AppProvider = ({ children }) => {\n  const [state, setState] = useState(initialState);\n\n  return (\n    <AppContext.Provider value={{ state, setState }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport const useAppContext = () => useContext(AppContext);",
    "language": "javascript",
    "tags": [
      "react",
      "context",
      "state"
    ]
  },
  {
    "title": "React Form Handling with Formik",
    "code": "import { Formik, Form, Field, ErrorMessage } from 'formik';\n\n<Formik\n  initialValues={{ email: '', password: '' }}\n  validate={values => {\n    const errors = {};\n    if (!values.email) errors.email = 'Required';\n    if (!values.password) errors.password = 'Required';\n    return errors;\n  }}\n  onSubmit={(values, { setSubmitting }) => {\n    setTimeout(() => {\n      alert(JSON.stringify(values, null, 2));\n      setSubmitting(false);\n    }, 400);\n  }}\n>\n  {({ isSubmitting }) => (\n    <Form>\n      <Field type=\"email\" name=\"email\" />\n      <ErrorMessage name=\"email\" component=\"div\" />\n      <Field type=\"password\" name=\"password\" />\n      <ErrorMessage name=\"password\" component=\"div\" />\n      <button type=\"submit\" disabled={isSubmitting}>\n        Submit\n      </button>\n    </Form>\n  )}\n</Formik>",
    "language": "javascript",
    "tags": [
      "react",
      "form",
      "formik"
    ]
  },
  {
    "title": "React Performance Optimization with React.memo",
    "code": "import { memo } from 'react';\n\nconst MyComponent = memo(function MyComponent({ prop }) {\n  // Component logic\n  return <div>{prop}</div>;\n});",
    "language": "javascript",
    "tags": [
      "react",
      "performance",
      "memoization"
    ]
  },
  {
    "title": "Redux Toolkit Slice",
    "code": "import { createSlice } from '@reduxjs/toolkit';\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: { value: 0 },\n  reducers: {\n    increment(state) {\n      state.value += 1;\n    },\n    decrement(state) {\n      state.value -= 1;\n    },\n  },\n});\n\nexport const { increment, decrement } = counterSlice.actions;\nexport default counterSlice.reducer;",
    "language": "javascript",
    "tags": [
      "redux",
      "state",
      "react"
    ]
  },
  {
    "title": "JWT Authentication Middleware for Express",
    "code": "const jwt = require('jsonwebtoken');\n\nconst authenticateJWT = (req, res, next) => {\n  const authHeader = req.headers.authorization;\n\n  if (authHeader) {\n    const token = authHeader.split(' ')[1];\n\n    jwt.verify(token, process.env.JWT_SECRET, (err, user) => {\n      if (err) {\n        return res.sendStatus(403);\n      }\n\n      req.user = user;\n      next();\n    });\n  } else {\n    res.sendStatus(401);\n  }\n};",
    "language": "javascript",
    "tags": [
      "node",
      "express",
      "jwt",
      "authentication"
    ]
  },
  {
    "title": "Mongoose Model with Schema",
    "code": "const mongoose = require('mongoose');\n\nconst userSchema = new mongoose.Schema({\n  username: { type: String, required: true, unique: true },\n  email: { type: String, required: true, unique: true },\n  password: { type: String, required: true },\n  createdAt: { type: Date, default: Date.now }\n});\n\nconst User = mongoose.model('User', userSchema);\n\nmodule.exports = User;",
    "language": "javascript",
    "tags": [
      "node",
      "mongodb",
      "mongoose"
    ]
  },
  {
    "title": "Express Error Handling Middleware",
    "code": "app.use((err, req, res, next) => {\n  console.error(err.stack);\n  \n  const statusCode = err.statusCode || 500;\n  const message = err.message || 'Internal Server Error';\n  \n  res.status(statusCode).json({\n    status: 'error',\n    statusCode,\n    message\n  });\n});",
    "language": "javascript",
    "tags": [
      "node",
      "express",
      "error"
    ]
  },
  {
    "title": "Dockerfile for Node.js Application",
    "code": "FROM node:16-alpine\n\nWORKDIR /app\n\nCOPY package*.json ./\nRUN npm install\n\nCOPY . .\n\nENV PORT=3000\nEXPOSE 3000\n\nCMD [\"npm\", \"start\"]",
    "language": "dockerfile",
    "tags": [
      "docker",
      "node",
      "devops"
    ]
  },
  {
    "title": "CSS Grid Layout",
    "code": ".container {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 1rem;\n  align-items: start;\n}",
    "language": "css",
    "tags": [
      "css",
      "grid",
      "layout"
    ]
  },
  {
    "title": "CSS Flexbox Centering",
    "code": ".center {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n}",
    "language": "css",
    "tags": [
      "css",
      "flexbox",
      "layout"
    ]
  },
  {
    "title": "Dark Mode Toggle with CSS Variables",
    "code": ":root {\n  --bg-color: #ffffff;\n  --text-color: #333333;\n}\n\n[data-theme=\"dark\"] {\n  --bg-color: #121212;\n  --text-color: #ffffff;\n}\n\nbody {\n  background-color: var(--bg-color);\n  color: var(--text-color);\n  transition: all 0.3s ease;\n}",
    "language": "css",
    "tags": [
      "css",
      "darkmode",
      "variables"
    ]
  },
  {
    "title": "TypeScript Interface for API Response",
    "code": "interface ApiResponse<T> {\n  data: T;\n  status: number;\n  message?: string;\n  success: boolean;\n}\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n}\n\nconst fetchUsers = async (): Promise<ApiResponse<User[]>> => {\n  // Implementation\n};",
    "language": "typescript",
    "tags": [
      "typescript",
      "interface",
      "api"
    ]
  },
  {
    "title": "Next.js API Route",
    "code": "export default function handler(req, res) {\n  if (req.method === 'GET') {\n    res.status(200).json({ message: 'Hello from Next.js API' });\n  } else {\n    res.setHeader('Allow', ['GET']);\n    res.status(405).end(`Method ${req.method} Not Allowed`);\n  }\n}",
    "language": "javascript",
    "tags": [
      "nextjs",
      "api",
      "serverless"
    ]
  },
  {
    "title": "GraphQL Query with Apollo Client",
    "code": "import { gql, useQuery } from '@apollo/client';\n\nconst GET_USERS = gql`\n  query GetUsers {\n    users {\n      id\n      name\n      email\n    }\n  }\n`;\n\nfunction Users() {\n  const { loading, error, data } = useQuery(GET_USERS);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\n\n  return (\n    <ul>\n      {data.users.map(user => (\n        <li key={user.id}>{user.name}</li>\n      ))}\n    </ul>\n  );\n}",
    "language": "javascript",
    "tags": [
      "graphql",
      "apollo",
      "react"
    ]
  },
  {
    "title": "WebSocket Server with Node.js",
    "code": "const WebSocket = require('ws');\n\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', (ws) => {\n  console.log('New client connected');\n  \n  ws.on('message', (message) => {\n    console.log(`Received: ${message}`);\n    \n    // Broadcast to all clients\n    wss.clients.forEach(client => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(message);\n      }\n    });\n  });\n  \n  ws.on('close', () => {\n    console.log('Client disconnected');\n  });\n});",
    "language": "javascript",
    "tags": [
      "websocket",
      "node",
      "realtime"
    ]
  },
  {
    "title": "React Infinite Scroll",
    "code": "import { useState, useEffect, useCallback } from 'react';\n\nconst InfiniteScroll = ({ fetchMore }) => {\n  const [isFetching, setIsFetching] = useState(false);\n\n  const handleScroll = useCallback(() => {\n    if (\n      window.innerHeight + document.documentElement.scrollTop !==\n        document.documentElement.offsetHeight ||\n      isFetching\n    )\n      return;\n    setIsFetching(true);\n  }, [isFetching]);\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [handleScroll]);\n\n  useEffect(() => {\n    if (!isFetching) return;\n    fetchMore().finally(() => setIsFetching(false));\n  }, [isFetching, fetchMore]);\n\n  return null;\n};",
    "language": "javascript",
    "tags": [
      "react",
      "scroll",
      "performance"
    ]
  },
  {
    "title": "React Drag and Drop with react-dnd",
    "code": "import { useDrag, useDrop } from 'react-dnd';\n\nconst DraggableItem = ({ id, text, moveItem }) => {\n  const [{ isDragging }, drag] = useDrag(() => ({\n    type: 'ITEM',\n    item: { id },\n    collect: (monitor) => ({\n      isDragging: !!monitor.isDragging(),\n    }),\n  }));\n\n  const [, drop] = useDrop(() => ({\n    accept: 'ITEM',\n    hover: (draggedItem) => {\n      if (draggedItem.id !== id) {\n        moveItem(draggedItem.id, id);\n      }\n    },\n  }));\n\n  return (\n    <div\n      ref={(node) => drag(drop(node))}\n      style={{\n        opacity: isDragging ? 0.5 : 1,\n        cursor: 'move',\n      }}\n    >\n      {text}\n    </div>\n  );\n};",
    "language": "javascript",
    "tags": [
      "react",
      "dragdrop",
      "ui"
    ]
  },
  {
    "title": "React Portal for Modals",
    "code": "import { useEffect, useRef } from 'react';\nimport { createPortal } from 'react-dom';\n\nconst Modal = ({ children }) => {\n  const elRef = useRef(null);\n  \n  if (!elRef.current) {\n    elRef.current = document.createElement('div');\n  }\n\n  useEffect(() => {\n    const modalRoot = document.getElementById('modal');\n    modalRoot.appendChild(elRef.current);\n    \n    return () => {\n      modalRoot.removeChild(elRef.current);\n    };\n  }, []);\n\n  return createPortal(children, elRef.current);\n};",
    "language": "javascript",
    "tags": [
      "react",
      "modal",
      "portal"
    ]
  },
  {
    "title": "React Performance Profiler",
    "code": "import { Profiler } from 'react';\n\nconst onRender = (id, phase, actualDuration, baseDuration, startTime, commitTime) => {\n  console.log({\n    id,\n    phase,\n    actualDuration,\n    baseDuration,\n    startTime,\n    commitTime,\n  });\n};\n\n<Profiler id=\"MyComponent\" onRender={onRender}>\n  <MyComponent />\n</Profiler>",
    "language": "javascript",
    "tags": [
      "react",
      "performance",
      "profiler"
    ]
  },
  {
    "title": "React Suspense with Error Boundary",
    "code": "import { Suspense } from 'react';\nimport ErrorBoundary from './ErrorBoundary';\n\n<ErrorBoundary fallback={<div>Error loading component</div>}>\n  <Suspense fallback={<div>Loading...</div>}>\n    <LazyComponent />\n  </Suspense>\n</ErrorBoundary>",
    "language": "javascript",
    "tags": [
      "react",
      "suspense",
      "error"
    ]
  },
  {
    "title": "Custom ESLint Rule",
    "code": "module.exports = {\n  meta: {\n    type: 'problem',\n    docs: {\n      description: 'Disallow console.log statements',\n    },\n  },\n  create(context) {\n    return {\n      CallExpression(node) {\n        if (\n          node.callee.object &&\n          node.callee.object.name === 'console' &&\n          node.callee.property.name === 'log'\n        ) {\n          context.report({\n            node,\n            message: 'Avoid console.log statements',\n          });\n        }\n      },\n    };\n  },\n};",
    "language": "javascript",
    "tags": [
      "eslint",
      "tooling",
      "quality"
    ]
  },
  {
    "title": "Jest Mock for Axios",
    "code": "import axios from 'axios';\nimport { fetchData } from './api';\n\njest.mock('axios');\n\ndescribe('fetchData', () => {\n  it('fetches successfully data from an API', async () => {\n    const data = { data: { id: 1, name: 'John' } };\n    axios.get.mockResolvedValue(data);\n\n    await expect(fetchData(1)).resolves.toEqual(data);\n  });\n\n  it('fetches erroneously data from an API', async () => {\n    const errorMessage = 'Network Error';\n    axios.get.mockRejectedValue(new Error(errorMessage));\n\n    await expect(fetchData(1)).rejects.toThrow(errorMessage);\n  });\n});",
    "language": "javascript",
    "tags": [
      "jest",
      "testing",
      "axios"
    ]
  },
  {
    "title": "React Testing Library Example",
    "code": "import { render, screen, fireEvent } from '@testing-library/react';\nimport Button from './Button';\n\ndescribe('Button', () => {\n  it('renders with text and handles click', () => {\n    const handleClick = jest.fn();\n    render(<Button onClick={handleClick}>Click me</Button>);\n    \n    const button = screen.getByText(/click me/i);\n    expect(button).toBeInTheDocument();\n    \n    fireEvent.click(button);\n    expect(handleClick).toHaveBeenCalledTimes(1);\n  });\n});",
    "language": "javascript",
    "tags": [
      "testing",
      "react",
      "rtl"
    ]
  },
  {
    "title": "Cypress E2E Test Example",
    "code": "describe('Login Page', () => {\n  it('successfully logs in', () => {\n    cy.visit('/login');\n    cy.get('#email').type('user@example.com');\n    cy.get('#password').type('password');\n    cy.get('form').submit();\n    cy.url().should('include', '/dashboard');\n    cy.contains('Welcome back').should('be.visible');\n  });\n});",
    "language": "javascript",
    "tags": [
      "cypress",
      "e2e",
      "testing"
    ]
  },
  {
    "title": "GitHub Actions CI Workflow",
    "code": "name: Node.js CI\n\non: [push, pull_request]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [14.x, 16.x]\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v2\n        with:\n          node-version: ${{ matrix.node-version }}\n      - run: npm ci\n      - run: npm run build\n      - run: npm test",
    "language": "yaml",
    "tags": [
      "github",
      "ci",
      "devops"
    ]
  },
  {
    "title": "AWS Lambda Function",
    "code": "exports.handler = async (event) => {\n  try {\n    const { name } = JSON.parse(event.body);\n    \n    const response = {\n      statusCode: 200,\n      body: JSON.stringify({\n        message: `Hello, ${name || 'World'}`,\n      }),\n    };\n    \n    return response;\n  } catch (error) {\n    return {\n      statusCode: 500,\n      body: JSON.stringify({ error: error.message }),\n    };\n  }\n};",
    "language": "javascript",
    "tags": [
      "aws",
      "lambda",
      "serverless"
    ]
  },
  {
    "title": "Serverless Framework Config",
    "code": "service: my-service\n\nprovider:\n  name: aws\n  runtime: nodejs14.x\n  region: us-east-1\n  environment:\n    NODE_ENV: production\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n          cors: true",
    "language": "yaml",
    "tags": [
      "serverless",
      "aws",
      "lambda"
    ]
  },
  {
    "title": "Webpack Config for React",
    "code": "const path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    path: path.join(__dirname, '/dist'),\n    filename: 'bundle.js',\n    publicPath: '/',\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        use: ['babel-loader'],\n      },\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader'],\n      },\n    ],\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './public/index.html',\n    }),\n  ],\n  devServer: {\n    historyApiFallback: true,\n  },\n};",
    "language": "javascript",
    "tags": [
      "webpack",
      "react",
      "bundler"
    ]
  },
  {
    "title": "Babel Config for React",
    "code": "{\n  \"presets\": [\n    \"@babel/preset-env\",\n    \"@babel/preset-react\"\n  ],\n  \"plugins\": [\n    \"@babel/plugin-transform-runtime\",\n    \"@babel/plugin-proposal-class-properties\",\n    [\"@babel/plugin-transform-react-jsx\", { \"runtime\": \"automatic\" }]\n  ]\n}",
    "language": "json",
    "tags": [
      "babel",
      "react",
      "tooling"
    ]
  },
  {
    "title": "React Router v6 Protected Route",
    "code": "import { Navigate, Outlet } from 'react-router-dom';\n\nconst ProtectedRoute = ({ isAllowed, redirectPath = '/login', children }) => {\n  if (!isAllowed) {\n    return <Navigate to={redirectPath} replace />;\n  }\n\n  return children ? children : <Outlet />;\n};\n\n// Usage:\n// <Route element={<ProtectedRoute isAllowed={user} />}>\n//   <Route path=\"dashboard\" element={<Dashboard />} />\n// </Route>",
    "language": "javascript",
    "tags": [
      "react",
      "router",
      "authentication"
    ]
  },
  {
    "title": "React Query Data Fetching",
    "code": "import { useQuery } from 'react-query';\n\nconst fetchUsers = async () => {\n  const res = await fetch('/api/users');\n  if (!res.ok) {\n    throw new Error('Network response was not ok');\n  }\n  return res.json();\n};\n\nfunction Users() {\n  const { data, error, isLoading } = useQuery('users', fetchUsers);\n\n  if (isLoading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error.message}</div>;\n\n  return (\n    <ul>\n      {data.map(user => (\n        <li key={user.id}>{user.name}</li>\n      ))}\n    </ul>\n  );\n}",
    "language": "javascript",
    "tags": [
      "react",
      "react-query",
      "data"
    ]
  },
  {
    "title": "React i18n Implementation",
    "code": "import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\ni18n\n  .use(initReactI18next)\n  .init({\n    resources: {\n      en: {\n        translation: {\n          welcome: 'Welcome',\n        },\n      },\n      fr: {\n        translation: {\n          welcome: 'Bienvenue',\n        },\n      },\n    },\n    lng: 'en',\n    fallbackLng: 'en',\n    interpolation: {\n      escapeValue: false,\n    },\n  });\n\nexport default i18n;",
    "language": "javascript",
    "tags": [
      "react",
      "i18n",
      "localization"
    ]
  },
  {
    "title": "React Virtualized List",
    "code": "import { List } from 'react-virtualized';\n\nfunction MyList({ items }) {\n  const rowRenderer = ({ key, index, style }) => (\n    <div key={key} style={style}>\n      {items[index]}\n    </div>\n  );\n\n  return (\n    <List\n      width={300}\n      height={300}\n      rowCount={items.length}\n      rowHeight={20}\n      rowRenderer={rowRenderer}\n    />\n  );\n}",
    "language": "javascript",
    "tags": [
      "react",
      "performance",
      "virtualization"
    ]
  },
  {
    "title": "CSS-in-JS with Styled Components",
    "code": "import styled from 'styled-components';\n\nconst Button = styled.button`\n  background: ${props => props.primary ? '#4CAF50' : 'white'};\n  color: ${props => props.primary ? 'white' : '#4CAF50'};\n  padding: 0.5rem 1rem;\n  border: 2px solid #4CAF50;\n  border-radius: 3px;\n  cursor: pointer;\n  font-size: 1rem;\n  transition: all 0.2s;\n\n  &:hover {\n    background: ${props => props.primary ? '#45a049' : '#f8f8f8'};\n  }\n`;",
    "language": "javascript",
    "tags": [
      "css",
      "styled-components",
      "react"
    ]
  },
  {
    "title": "Tailwind CSS Button",
    "code": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">\n  Button\n</button>",
    "language": "html",
    "tags": [
      "tailwind",
      "css",
      "ui"
    ]
  },
  {
    "title": "Storybook Component Story",
    "code": "import React from 'react';\nimport { Button } from './Button';\n\nexport default {\n  title: 'Components/Button',\n  component: Button,\n  argTypes: {\n    backgroundColor: { control: 'color' },\n  },\n};\n\nconst Template = (args) => <Button {...args} />;\n\nexport const Primary = Template.bind({});\nPrimary.args = {\n  primary: true,\n  label: 'Button',\n};\n\nexport const Secondary = Template.bind({});\nSecondary.args = {\n  label: 'Button',\n};",
    "language": "javascript",
    "tags": [
      "storybook",
      "testing",
      "ui"
    ]
  },
  {
    "title": "React Native FlatList",
    "code": "import { FlatList } from 'react-native';\n\n<FlatList\n  data={[\n    { id: '1', title: 'First Item' },\n    { id: '2', title: 'Second Item' },\n  ]}\n  keyExtractor={item => item.id}\n  renderItem={({ item }) => <Text>{item.title}</Text>}\n/>",
    "language": "javascript",
    "tags": [
      "react-native",
      "mobile",
      "list"
    ]
  },
  {
    "title": "Express Rate Limiter",
    "code": "const rateLimit = require('express-rate-limit');\n\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // limit each IP to 100 requests per windowMs\n  message: 'Too many requests from this IP, please try again later',\n});\n\napp.use('/api/', limiter);",
    "language": "javascript",
    "tags": [
      "node",
      "express",
      "security"
    ]
  },
  {
    "title": "Helmet Security for Express",
    "code": "const helmet = require('helmet');\n\napp.use(helmet());\napp.use(helmet.contentSecurityPolicy({\n  directives: {\n    defaultSrc: [\"'self'\"],\n    scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\n    styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n    imgSrc: [\"'self'\", 'data:'],\n  },\n}));",
    "language": "javascript",
    "tags": [
      "node",
      "express",
      "security"
    ]
  },
  {
    "title": "MongoDB Aggregation Pipeline",
    "code": "const result = await Order.aggregate([\n  {\n    $match: {\n      status: 'completed',\n      createdAt: { $gte: new Date('2023-01-01') },\n    },\n  },\n  {\n    $group: {\n      _id: '$customerId',\n      totalAmount: { $sum: '$amount' },\n      count: { $sum: 1 },\n    },\n  },\n  {\n    $sort: { totalAmount: -1 },\n  },\n  {\n    $limit: 10,\n  },\n]);",
    "language": "javascript",
    "tags": [
      "mongodb",
      "database",
      "aggregation"
    ]
  },
  {
    "title": "Redis Caching in Node.js",
    "code": "const redis = require('redis');\nconst { promisify } = require('util');\n\nconst client = redis.createClient({\n  host: 'localhost',\n  port: 6379,\n});\n\nconst getAsync = promisify(client.get).bind(client);\nconst setAsync = promisify(client.set).bind(client);\n\nasync function getWithCache(key, fetchFn, ttl = 3600) {\n  const cached = await getAsync(key);\n  if (cached) return JSON.parse(cached);\n\n  const data = await fetchFn();\n  await setAsync(key, JSON.stringify(data), 'EX', ttl);\n  return data;\n}",
    "language": "javascript",
    "tags": [
      "redis",
      "node",
      "caching"
    ]
  },
  {
    "title": "Web Worker in React",
    "code": "// worker.js\nself.onmessage = function(e) {\n  const result = heavyCalculation(e.data);\n  self.postMessage(result);\n};\n\n// In component\nconst worker = new Worker('worker.js');\n\nworker.onmessage = (e) => {\n  setResult(e.data);\n};\n\nconst handleCalculate = () => {\n  worker.postMessage(inputData);\n};\n\n// Cleanup\nuseEffect(() => {\n  return () => worker.terminate();\n}, []);",
    "language": "javascript",
    "tags": [
      "react",
      "webworker",
      "performance"
    ]
  },
  {
    "title": "PWA Service Worker Registration",
    "code": "if ('serviceWorker' in navigator) {\n  window.addEventListener('load', () => {\n    navigator.serviceWorker.register('/service-worker.js')\n      .then(registration => {\n        console.log('SW registered: ', registration);\n      })\n      .catch(registrationError => {\n        console.log('SW registration failed: ', registrationError);\n      });\n  });\n}",
    "language": "javascript",
    "tags": [
      "pwa",
      "serviceworker",
      "offline"
    ]
  },
  {
    "title": "Web Components Custom Element",
    "code": "class MyElement extends HTMLElement {\n  constructor() {\n    super();\n    this.attachShadow({ mode: 'open' });\n  }\n\n  connectedCallback() {\n    this.shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: block;\n        }\n      </style>\n      <div>Hello, <slot></slot></div>\n    `;\n  }\n}\n\ncustomElements.define('my-element', MyElement);",
    "language": "javascript",
    "tags": [
      "webcomponents",
      "vanilla",
      "custom-elements"
    ]
  },
  {
    "title": "Python FastAPI Endpoint",
    "code": "from fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int, q: str = None):\n    return {\"item_id\": item_id, \"q\": q}",
    "language": "python",
    "tags": [
      "api",
      "web",
      "async"
    ]
  },
  {
    "title": "Python Data Class",
    "code": "from dataclasses import dataclass\n\n@dataclass\nclass Point:\n    x: float\n    y: float\n    z: float = 0.0  # Default value\n\np = Point(1.5, 2.5)",
    "language": "python",
    "tags": [
      "oop",
      "data"
    ]
  },
  {
    "title": "Python Type Hints",
    "code": "from typing import List, Optional\n\ndef greet_all(names: List[str]) -> Optional[str]:\n    if not names:\n        return None\n    return \", \".join([f\"Hello {name}!\" for name in names])",
    "language": "python",
    "tags": [
      "typing",
      "modern"
    ]
  },
  {
    "title": "Python Context Manager",
    "code": "class DatabaseConnection:\n    def __enter__(self):\n        self.conn = connect_to_db()\n        return self.conn\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.conn.close()\n\n# Usage:\n# with DatabaseConnection() as db:\n#     db.query(...)",
    "language": "python",
    "tags": [
      "resource",
      "management"
    ]
  },
  {
    "title": "Python Async/Await",
    "code": "import asyncio\n\nasync def fetch_data(url):\n    async with aiohttp.ClientSession() as session:\n        async with session.get(url) as response:\n            return await response.json()\n\nasync def main():\n    data = await fetch_data('https://api.example.com')\n    print(data)\n\nasyncio.run(main())",
    "language": "python",
    "tags": [
      "async",
      "web"
    ]
  },
  {
    "title": "JavaScript Optional Chaining",
    "code": "const street = user?.address?.street; // No error if null/undefined",
    "language": "javascript",
    "tags": [
      "modern",
      "safety"
    ]
  },
  {
    "title": "JavaScript Nullish Coalescing",
    "code": "const timeout = settings.timeout ?? 3000; // Default only if null/undefined",
    "language": "javascript",
    "tags": [
      "modern",
      "logic"
    ]
  },
  {
    "title": "TypeScript Generic Function",
    "code": "function identity<T>(arg: T): T {\n    return arg;\n}\n\n// Usage:\n// const output = identity<string>(\"hello\");",
    "language": "typescript",
    "tags": [
      "generics",
      "typing"
    ]
  },
  {
    "title": "TypeScript Interface vs Type",
    "code": "interface User {\n    id: string;\n    name: string;\n}\n\ntype Admin = User & { role: 'admin' }; // Intersection type",
    "language": "typescript",
    "tags": [
      "typing",
      "advanced"
    ]
  },
  {
    "title": "Java Stream API",
    "code": "List<String> filtered = items.stream()\n    .filter(item -> item.startsWith(\"A\"))\n    .map(String::toUpperCase)\n    .collect(Collectors.toList());",
    "language": "java",
    "tags": [
      "functional",
      "modern"
    ]
  },
  {
    "title": "Java Records (Java 14+)",
    "code": "public record Point(int x, int y) {}\n\n// Usage:\n// Point p = new Point(10, 20);\n// System.out.println(p.x());",
    "language": "java",
    "tags": [
      "data",
      "modern"
    ]
  },
  {
    "title": "C++ Smart Pointers",
    "code": "#include <memory>\n\nstd::unique_ptr<int> ptr = std::make_unique<int>(42);\nstd::shared_ptr<int> shared = std::make_shared<int>(100);",
    "language": "c++",
    "tags": [
      "memory",
      "modern"
    ]
  },
  {
    "title": "C++ Lambda",
    "code": "auto sum = [](int a, int b) -> int { return a + b; };\nstd::vector<int> nums = {1, 2, 3};\nstd::sort(nums.begin(), nums.end(), [](int a, int b) { return a > b; });",
    "language": "c++",
    "tags": [
      "functional",
      "modern"
    ]
  },
  {
    "title": "C# LINQ Query",
    "code": "var results = from p in products\n              where p.Price > 100\n              orderby p.Name\n              select new { p.Name, p.Price };",
    "language": "c#",
    "tags": [
      "query",
      "data"
    ]
  },
  {
    "title": "C# Async/Await",
    "code": "public async Task<string> FetchDataAsync() {\n    using HttpClient client = new();\n    return await client.GetStringAsync(\"https://api.example.com\");\n}",
    "language": "c#",
    "tags": [
      "async",
      "web"
    ]
  },
  {
    "title": "Go HTTP Server",
    "code": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintf(w, \"Hello, %s!\", r.URL.Path[1:])\n}\n\nfunc main() {\n    http.HandleFunc(\"/\", handler)\n    http.ListenAndServe(\":8080\", nil)\n}",
    "language": "go",
    "tags": [
      "web",
      "server"
    ]
  },
  {
    "title": "Go Goroutine",
    "code": "func worker(id int, jobs <-chan int, results chan<- int) {\n    for j := range jobs {\n        results <- j * 2\n    }\n}\n\n// Usage:\n// jobs := make(chan int, 100)\n// results := make(chan int, 100)\n// go worker(1, jobs, results)",
    "language": "go",
    "tags": [
      "concurrency",
      "advanced"
    ]
  },
  {
    "title": "Rust Ownership Example",
    "code": "fn main() {\n    let s1 = String::from(\"hello\");\n    let s2 = s1; // s1 is no longer valid here (move semantics)\n    println!(\"{}\", s2);\n}",
    "language": "rust",
    "tags": [
      "memory",
      "core"
    ]
  },
  {
    "title": "Rust Error Handling",
    "code": "fn divide(a: i32, b: i32) -> Result<i32, String> {\n    if b == 0 {\n        Err(String::from(\"Cannot divide by zero\"))\n    } else {\n        Ok(a / b)\n    }\n}\n\n// Usage:\n// match divide(10, 2) {\n//     Ok(result) => println!(\"{}\", result),\n//     Err(e) => println!(\"Error: {}\", e),\n// }",
    "language": "rust",
    "tags": [
      "error",
      "modern"
    ]
  },
  {
    "title": "Ruby Block with Yield",
    "code": "def wrap_in_transaction\n  puts \"Starting transaction\"\n  yield\n  puts \"Committing transaction\"\nrescue => e\n  puts \"Rolling back: #{e}\"\nend\n\n# Usage:\n# wrap_in_transaction { puts \"Doing work\" }",
    "language": "ruby",
    "tags": [
      "block",
      "dsl"
    ]
  },
  {
    "title": "Ruby Metaprogramming",
    "code": "class MyClass\n  [:method1, :method2].each do |method|\n    define_method(method) do\n      puts \"Dynamic #{method}\"\n    end\n  end\nend",
    "language": "ruby",
    "tags": [
      "meta",
      "advanced"
    ]
  },
  {
    "title": "PHP PDO Database",
    "code": "$pdo = new PDO('mysql:host=localhost;dbname=test', 'user', 'pass');\n$stmt = $pdo->prepare('SELECT * FROM users WHERE id = :id');\n$stmt->execute(['id' => 42]);\n$user = $stmt->fetch();",
    "language": "php",
    "tags": [
      "database",
      "secure"
    ]
  },
  {
    "title": "PHP Composer Autoload",
    "code": "// composer.json\n{\n    \"autoload\": {\n        \"psr-4\": {\n            \"MyApp\\\\\": \"src/\"\n        }\n    }\n}\n\n// Usage:\n// require __DIR__ . '/vendor/autoload.php';\n// $obj = new MyApp\\MyClass();",
    "language": "php",
    "tags": [
      "package",
      "modern"
    ]
  },
  {
    "title": "Swift Optionals",
    "code": "var optionalString: String? = \"Hello\"\n\nif let unwrapped = optionalString {\n    print(unwrapped.uppercased())\n}\n\n// Force unwrap (dangerous):\n// print(optionalString!.uppercased())",
    "language": "swift",
    "tags": [
      "safety",
      "core"
    ]
  },
  {
    "title": "Swift Protocol Extension",
    "code": "protocol Greetable {\n    var name: String { get }\n}\n\nextension Greetable {\n    func greet() -> String {\n        return \"Hello, \\(name)\"\n    }\n}",
    "language": "swift",
    "tags": [
      "protocol",
      "oop"
    ]
  },
  {
    "title": "Kotlin Data Class",
    "code": "data class User(val name: String, val age: Int)\n\n// Auto-generated:\n// equals(), hashCode(), toString(), copy(), componentN()",
    "language": "kotlin",
    "tags": [
      "data",
      "modern"
    ]
  },
  {
    "title": "Kotlin Coroutine",
    "code": "suspend fun fetchData(): String {\n    return withContext(Dispatchers.IO) {\n        // Simulate network call\n        delay(1000)\n        \"Data loaded\"\n    }\n}\n\n// Usage in ViewModel:\n// viewModelScope.launch { val data = fetchData() }",
    "language": "kotlin",
    "tags": [
      "async",
      "android"
    ]
  },
  {
    "title": "Scala Case Class",
    "code": "case class Person(name: String, age: Int)\n\n// Usage:\n// val p = Person(\"Alice\", 25)\n// println(p.copy(age = 26))",
    "language": "scala",
    "tags": [
      "fp",
      "data"
    ]
  },
  {
    "title": "Scala Pattern Matching",
    "code": "def matchTest(x: Int): String = x match {\n    case 1 => \"one\"\n    case 2 => \"two\"\n    case _ => \"many\"\n}",
    "language": "scala",
    "tags": [
      "fp",
      "logic"
    ]
  },
  {
    "title": "Dart Future",
    "code": "Future<String> fetchUserOrder() async {\n  await Future.delayed(Duration(seconds: 2));\n  return 'Large Latte';\n}\n\n// Usage:\n// fetchUserOrder().then((order) => print(order));",
    "language": "dart",
    "tags": [
      "async",
      "flutter"
    ]
  },
  {
    "title": "Dart Stream",
    "code": "Stream<int> countStream(int to) async* {\n  for (int i = 1; i <= to; i++) {\n    await Future.delayed(Duration(seconds: 1));\n    yield i;\n  }\n}\n\n// Usage:\n// await for (final value in countStream(5)) {\n//   print(value);\n// }",
    "language": "dart",
    "tags": [
      "stream",
      "reactive"
    ]
  },
  {
    "title": "Haskell Pure Function",
    "code": "-- Type signature\nadd :: Int -> Int -> Int\nadd x y = x + y\n\n-- Usage:\n-- add 3 5  -- Returns 8",
    "language": "haskell",
    "tags": [
      "fp",
      "pure"
    ]
  },
  {
    "title": "Haskell Pattern Matching",
    "code": "factorial :: Integer -> Integer\nfactorial 0 = 1\nfactorial n = n * factorial (n - 1)",
    "language": "haskell",
    "tags": [
      "recursion",
      "fp"
    ]
  },
  {
    "title": "R Data Frame Manipulation",
    "code": "# Using dplyr\nlibrary(dplyr)\n\nresult <- mtcars %>%\n  filter(mpg > 20) %>%\n  group_by(cyl) %>%\n  summarise(avg_hp = mean(hp))",
    "language": "r",
    "tags": [
      "data",
      "tidyverse"
    ]
  },
  {
    "title": "R ggplot2 Visualization",
    "code": "library(ggplot2)\n\nggplot(mtcars, aes(x=wt, y=mpg)) +\n  geom_point() +\n  geom_smooth(method=lm) +\n  labs(title=\"MPG vs Weight\")",
    "language": "r",
    "tags": [
      "viz",
      "data"
    ]
  },
  {
    "title": "Python Pandas Data Analysis",
    "code": "import pandas as pd\n\ndf = pd.read_csv('data.csv')\nresult = df.query('age > 30')\n    .groupby('department')\n    .agg({'salary': ['mean', 'count']})",
    "language": "python",
    "tags": [
      "data",
      "analysis"
    ]
  },
  {
    "title": "Python NumPy Array Ops",
    "code": "import numpy as np\n\na = np.array([1, 2, 3])\nb = np.array([4, 5, 6])\n\n# Vectorized operations\nresult = a * b  # [4, 10, 18]\nmatrix = np.dot(a.reshape(3,1), b.reshape(1,3)))",
    "language": "python",
    "tags": [
      "numeric",
      "scientific"
    ]
  },
  {
    "title": "JavaScript Array Methods",
    "code": "const users = [\n  { id: 1, name: 'Alice', active: true },\n  { id: 2, name: 'Bob', active: false }\n];\n\nconst activeNames = users\n  .filter(user => user.active)\n  .map(user => user.name);",
    "language": "javascript",
    "tags": [
      "array",
      "modern"
    ]
  },
  {
    "title": "TypeScript Utility Types",
    "code": "interface User {\n  id: string;\n  name: string;\n  email?: string;\n}\n\ntype PartialUser = Partial<User>;  // All props optional\ntype ReadonlyUser = Readonly<User>;  // Immutable\ntype UserNames = Pick<User, 'name'>;  // Only 'name'",
    "language": "typescript",
    "tags": [
      "typing",
      "advanced"
    ]
  },
  {
    "title": "Java Spring Boot Controller",
    "code": "@RestController\n@RequestMapping(\"/api/users\")\npublic class UserController {\n\n    @GetMapping\n    public ResponseEntity<List<User>> getAll() {\n        return ResponseEntity.ok(userService.findAll());\n    }\n}",
    "language": "java",
    "tags": [
      "web",
      "spring"
    ]
  },
  {
    "title": "C++ RAII Example",
    "code": "class FileHandle {\npublic:\n    FileHandle(const char* filename) : handle(fopen(filename, \"r\")) {}\n    ~FileHandle() { if (handle) fclose(handle); }\n    FILE* get() const { return handle; }\nprivate:\n    FILE* handle;\n};\n\n// Usage:\n// FileHandle fh(\"data.txt\"); // Automatically closed when out of scope",
    "language": "c++",
    "tags": [
      "memory",
      "resource"
    ]
  },
  {
    "title": "C# Entity Framework",
    "code": "public class BloggingContext : DbContext {\n    public DbSet<Blog> Blogs { get; set; }\n}\n\n// Query:\n// using var db = new BloggingContext();\n// var blogs = db.Blogs.Where(b => b.Url.Contains(\"dotnet\")).ToList();",
    "language": "c#",
    "tags": [
      "orm",
      "database"
    ]
  },
  {
    "title": "Go Error Wrapping",
    "code": "if err != nil {\n    return fmt.Errorf(\"failed to process: %w\", err)\n}\n\n// Unwrap later:\n// if errors.Is(err, ErrNotFound) { ... }",
    "language": "go",
    "tags": [
      "error",
      "modern"
    ]
  },
  {
    "title": "Rust Concurrent HashMap",
    "code": "use std::sync::{Arc, RwLock};\nuse std::collections::HashMap;\n\nlet map = Arc::new(RwLock::new(HashMap::new()));\n\n// Writer:\nmap.write().unwrap().insert(\"key\", \"value\");\n\n// Reader:\nlet value = map.read().unwrap().get(\"key\");",
    "language": "rust",
    "tags": [
      "concurrency",
      "safe"
    ]
  },
  {
    "title": "Ruby RSpec Test",
    "code": "describe Calculator do\n  describe '#add' do\n    it 'returns sum of two numbers' do\n      expect(Calculator.new.add(2, 3)).to eq(5)\n    end\n  end\nend",
    "language": "ruby",
    "tags": [
      "test",
      "tdd"
    ]
  },
  {
    "title": "PHP Laravel Route",
    "code": "Route::middleware('auth:api')->group(function () {\n    Route::get('/user', 'UserController@show');\n    Route::post('/logout', 'AuthController@logout');\n});",
    "language": "php",
    "tags": [
      "web",
      "laravel"
    ]
  },
  {
    "title": "SwiftUI View",
    "code": "struct ContentView: View {\n    @State private var count = 0\n\n    var body: some View {\n        VStack {\n            Text(\"Count: \\(count)\")\n            Button(\"Increment\") { count += 1 }\n        }\n    }\n}",
    "language": "swift",
    "tags": [
      "ui",
      "declarative"
    ]
  },
  {
    "title": "Kotlin Android ViewModel",
    "code": "class MyViewModel : ViewModel() {\n    private val _data = MutableLiveData<String>()\n    val data: LiveData<String> = _data\n\n    fun loadData() {\n        viewModelScope.launch {\n            _data.value = repository.fetchData()\n        }\n    }\n}",
    "language": "kotlin",
    "tags": [
      "android",
      "architecture"
    ]
  },
  {
    "title": "Scala Akka Actor",
    "code": "class Greeter extends Actor {\n  def receive = {\n    case \"hello\" => println(\"Hello back!\")\n    case _       => println(\"Huh?\")\n  }\n}\n\n// Usage:\n// val system = ActorSystem(\"MySystem\")\n// val greeter = system.actorOf(Props[Greeter](), \"greeter\")\n// greeter ! \"hello\"",
    "language": "scala",
    "tags": [
      "actor",
      "concurrency"
    ]
  },
  {
    "title": "Dart Flutter Widget",
    "code": "class MyWidget extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('Home')),\n      body: Center(child: Text('Hello Flutter')),\n    );\n  }\n}",
    "language": "dart",
    "tags": [
      "flutter",
      "ui"
    ]
  },
  {
    "title": "Haskell Monad Example",
    "code": "main = do\n  putStrLn \"Enter your name:\"\n  name <- getLine\n  putStrLn (\"Hello \" ++ name)",
    "language": "haskell",
    "tags": [
      "io",
      "monad"
    ]
  },
  {
    "title": "R Shiny App",
    "code": "library(shiny)\n\nui <- fluidPage(\n  sliderInput(\"n\", \"Number of points\", 1, 100, 50),\n  plotOutput(\"plot\")\n)\n\nserver <- function(input, output) {\n  output$plot <- renderPlot({\n    plot(rnorm(input$n))\n  })\n}\n\nshinyApp(ui, server)",
    "language": "r",
    "tags": [
      "web",
      "interactive"
    ]
  },
  {
    "title": "SQL Table Creation (PostgreSQL)",
    "code": "CREATE TABLE users (\n  id SERIAL PRIMARY KEY,\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n  is_active BOOLEAN DEFAULT TRUE\n);\n\nCREATE INDEX idx_users_email ON users(email);",
    "language": "sql",
    "tags": [
      "postgresql",
      "schema"
    ]
  },
  {
    "title": "SQL Transaction (MySQL)",
    "code": "START TRANSACTION;\n\nINSERT INTO orders (user_id, total) VALUES (1, 100.00);\nUPDATE inventory SET quantity = quantity - 1 WHERE product_id = 123;\n\nCOMMIT; -- or ROLLBACK on error",
    "language": "sql",
    "tags": [
      "mysql",
      "transaction"
    ]
  },
  {
    "title": "SQL Window Function (PostgreSQL)",
    "code": "SELECT \n  user_id,\n  order_date,\n  amount,\n  SUM(amount) OVER (PARTITION BY user_id ORDER BY order_date) AS running_total\nFROM orders;",
    "language": "sql",
    "tags": [
      "postgresql",
      "analytics"
    ]
  },
  {
    "title": "MongoDB CRUD Operations",
    "code": "// Create\ndb.users.insertOne({ name: \"Alice\", age: 30, roles: [\"admin\"] });\n\n// Read\nconst user = db.users.findOne({ age: { $gt: 25 } });\n\n// Update\ndb.users.updateOne(\n  { name: \"Alice\" },\n  { $set: { age: 31 }, $push: { roles: \"editor\" } }\n);\n\n// Delete\ndb.users.deleteOne({ name: \"Alice\" });",
    "language": "javascript",
    "tags": [
      "mongodb",
      "crud"
    ]
  },
  {
    "title": "MongoDB Aggregation Pipeline",
    "code": "db.orders.aggregate([\n  { $match: { status: \"completed\" } },\n  { $group: { \n      _id: \"$customer_id\", \n      total: { $sum: \"$amount\" },\n      count: { $sum: 1 }\n  }},\n  { $sort: { total: -1 } },\n  { $limit: 10 }\n]);",
    "language": "javascript",
    "tags": [
      "mongodb",
      "aggregation"
    ]
  },
  {
    "title": "Redis Caching Example",
    "code": "// Node.js with ioredis\nconst Redis = require('ioredis');\nconst redis = new Redis();\n\n// Set with TTL (1 hour)\nawait redis.set('user:123', JSON.stringify(userData), 'EX', 3600);\n\n// Get\nconst cachedUser = await redis.get('user:123');\nconst user = JSON.parse(cachedUser);",
    "language": "javascript",
    "tags": [
      "redis",
      "cache"
    ]
  },
  {
    "title": "Redis Pub/Sub",
    "code": "// Publisher\nredis.publish('notifications', JSON.stringify({ event: 'update', data: { id: 1 } }));\n\n// Subscriber\nredis.subscribe('notifications', (err, count) => {\n  redis.on('message', (channel, message) => {\n    console.log(`Received ${message} from ${channel}`);\n  });\n});",
    "language": "javascript",
    "tags": [
      "redis",
      "pubsub"
    ]
  },
  {
    "title": "Spring Data JPA Repository",
    "code": "@Repository\npublic interface UserRepository extends JpaRepository<User, Long> {\n  List<User> findByLastName(String lastName);\n  \n  @Query(\"SELECT u FROM User u WHERE u.active = true\")\n  List<User> findAllActiveUsers();\n}",
    "language": "java",
    "tags": [
      "spring",
      "jpa"
    ]
  },
  {
    "title": "Spring Transactional",
    "code": "@Service\npublic class OrderService {\n  \n  @Transactional\n  public void placeOrder(Order order) {\n    orderRepository.save(order);\n    inventoryService.reduceStock(order.getProductId(), order.getQuantity());\n  }\n}",
    "language": "java",
    "tags": [
      "spring",
      "transaction"
    ]
  },
  {
    "title": "Laravel Eloquent Model",
    "code": "<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    protected $fillable = ['name', 'email'];\n    \n    public function posts()\n    {\n        return $this->hasMany(Post::class);\n    }\n}",
    "language": "php",
    "tags": [
      "laravel",
      "eloquent"
    ]
  },
  {
    "title": "Laravel Query Builder",
    "code": "$users = DB::table('users')\n            ->select('name', 'email')\n            ->where('active', 1)\n            ->orderBy('name')\n            ->paginate(15);",
    "language": "php",
    "tags": [
      "laravel",
      "query"
    ]
  },
  {
    "title": "Rails Active Record",
    "code": "# Find\nuser = User.find_by(email: 'test@example.com')\n\n# Create\nnew_user = User.create(name: 'Alice', email: 'alice@example.com')\n\n# Update\nuser.update(name: 'Updated Name')\n\n# Query\nactive_users = User.where(active: true).order(created_at: :desc).limit(10)",
    "language": "ruby",
    "tags": [
      "rails",
      "activerecord"
    ]
  },
  {
    "title": "Rails Migration",
    "code": "class CreateProducts < ActiveRecord::Migration[6.1]\n  def change\n    create_table :products do |t|\n      t.string :name\n      t.decimal :price, precision: 8, scale: 2\n      t.references :category, foreign_key: true\n\n      t.timestamps\n    end\n  end\nend",
    "language": "ruby",
    "tags": [
      "rails",
      "migration"
    ]
  },
  {
    "title": "Vue.js with Axios",
    "code": "<template>\n  <div>\n    <button @click=\"fetchData\">Load Data</button>\n    <div v-if=\"loading\">Loading...</div>\n    <div v-else>{{ data }}</div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      data: null,\n      loading: false\n    };\n  },\n  methods: {\n    async fetchData() {\n      this.loading = true;\n      try {\n        const response = await axios.get('/api/data');\n        this.data = response.data;\n      } catch (error) {\n        console.error(error);\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};\n</script>",
    "language": "javascript",
    "tags": [
      "vue",
      "axios"
    ]
  },
  {
    "title": "Vuex State Management",
    "code": "// store.js\nimport { createStore } from 'vuex';\n\nexport default createStore({\n  state: {\n    count: 0\n  },\n  mutations: {\n    increment(state) {\n      state.count++;\n    }\n  },\n  actions: {\n    async fetchCount({ commit }) {\n      const res = await api.getCount();\n      commit('increment', res.data.count);\n    }\n  },\n  getters: {\n    doubleCount: state => state.count * 2\n  }\n});",
    "language": "javascript",
    "tags": [
      "vue",
      "state"
    ]
  },
  {
    "title": "Angular HTTP Client",
    "code": "import { HttpClient } from '@angular/common/http';\n\n@Injectable()\nexport class DataService {\n  constructor(private http: HttpClient) {}\n\n  getData() {\n    return this.http.get<Item[]>('/api/items');\n  }\n\n  postData(data: Item) {\n    return this.http.post('/api/items', data);\n  }\n}",
    "language": "typescript",
    "tags": [
      "angular",
      "http"
    ]
  },
  {
    "title": "Angular Reactive Forms",
    "code": "import { FormBuilder, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html'\n})\nexport class ProfileComponent {\n  profileForm = this.fb.group({\n    name: ['', Validators.required],\n    email: ['', [Validators.required, Validators.email]]\n  });\n\n  constructor(private fb: FormBuilder) {}\n\n  onSubmit() {\n    console.log(this.profileForm.value);\n  }\n}",
    "language": "typescript",
    "tags": [
      "angular",
      "forms"
    ]
  },
  {
    "title": "Gatsby GraphQL Query",
    "code": "import { graphql } from 'gatsby';\n\nexport const query = graphql`\n  query BlogPostQuery($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n      }\n    }\n  }\n`;\n\n// Usage in component:\n// const { markdownRemark } = data;",
    "language": "javascript",
    "tags": [
      "gatsby",
      "graphql"
    ]
  },
  {
    "title": "Gatsby Static Query",
    "code": "import { useStaticQuery, graphql } from 'gatsby';\n\nconst Header = () => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n\n  return <h1>{data.site.siteMetadata.title}</h1>;\n};",
    "language": "javascript",
    "tags": [
      "gatsby",
      "staticquery"
    ]
  },
  {
    "title": "Pandas DataFrame Basics",
    "code": "import pandas as pd\n\n# Create DataFrame\ndf = pd.DataFrame({\n  'name': ['Alice', 'Bob'],\n  'age': [25, 30],\n  'city': ['NYC', 'London']\n})\n\n# Filter\nadults = df[df['age'] >= 18]\n\n# GroupBy\ncity_counts = df.groupby('city').size()\n\n# Merge\ndf2 = pd.DataFrame({'name': ['Alice'], 'salary': [70000]})\nmerged = pd.merge(df, df2, on='name')",
    "language": "python",
    "tags": [
      "pandas",
      "dataframe"
    ]
  },
  {
    "title": "Pandas Read/Write Data",
    "code": "# Read CSV\nimport pandas as pd\ndf = pd.read_csv('data.csv', parse_dates=['timestamp'])\n\n# Read SQL\nfrom sqlalchemy import create_engine\nengine = create_engine('postgresql://user:pass@localhost/db')\ndf = pd.read_sql('SELECT * FROM users', engine)\n\n# Write to Parquet\ndf.to_parquet('data.parquet')\n\n# Write to SQL\ndf.to_sql('users', engine, if_exists='append')",
    "language": "python",
    "tags": [
      "pandas",
      "io"
    ]
  },
  {
    "title": "NumPy Array Operations",
    "code": "import numpy as np\n\n# Create arrays\na = np.array([1, 2, 3])\nb = np.arange(0, 10, 2)  # [0, 2, 4, 6, 8]\n\n# Math operations\nc = a + b[:3]  # [1, 4, 7]\n\n# Matrix multiplication\nmat_a = np.array([[1, 2], [3, 4]])\nmat_b = np.array([[5, 6], [7, 8]])\nmat_product = np.dot(mat_a, mat_b)\n\n# Broadcasting\nscaled = a * 2.5  # [2.5, 5.0, 7.5]",
    "language": "python",
    "tags": [
      "numpy",
      "array"
    ]
  },
  {
    "title": "SQLAlchemy ORM (Python)",
    "code": "from sqlalchemy import create_engine, Column, Integer, String\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = 'users'\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    email = Column(String, unique=True)\n\n# Usage\nengine = create_engine('sqlite:///database.db')\nSession = sessionmaker(bind=engine)\nsession = Session()\n\n# Query\nusers = session.query(User).filter(User.name.like('%A%')).all()",
    "language": "python",
    "tags": [
      "sqlalchemy",
      "orm"
    ]
  },
  {
    "title": "Django ORM Queries",
    "code": "from django.db import models\n\nclass Blog(models.Model):\n    title = models.CharField(max_length=100)\n    content = models.TextField()\n    published_date = models.DateTimeField(auto_now_add=True)\n\n# Query examples\nrecent_blogs = Blog.objects.filter(\n    published_date__year=2023\n).order_by('-published_date')[:5]\n\nfrom django.db.models import Count\nblog_counts = Blog.objects.values('author').annotate(\n    total=Count('id')\n).order_by('-total')",
    "language": "python",
    "tags": [
      "django",
      "orm"
    ]
  },
  {
    "title": "Sequelize (Node.js ORM)",
    "code": "const { Sequelize, Model, DataTypes } = require('sequelize');\nconst sequelize = new Sequelize('sqlite::memory:');\n\nclass User extends Model {}\nUser.init({\n  username: DataTypes.STRING,\n  birthday: DataTypes.DATE\n}, { sequelize, modelName: 'user' });\n\n(async () => {\n  await sequelize.sync();\n  const user = await User.create({\n    username: 'janedoe',\n    birthday: new Date(1980, 6, 20)\n  });\n  console.log(user.toJSON());\n})();",
    "language": "javascript",
    "tags": [
      "sequelize",
      "orm"
    ]
  },
  {
    "title": "TypeORM (TypeScript)",
    "code": "import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  firstName: string;\n\n  @Column()\n  lastName: string;\n\n  @Column({ default: true })\n  isActive: boolean;\n}\n\n// Query\nconst userRepository = connection.getRepository(User);\nconst activeUsers = await userRepository.find({ where: { isActive: true } });",
    "language": "typescript",
    "tags": [
      "typeorm",
      "typescript"
    ]
  },
  {
    "title": "Prisma Client (Node.js)",
    "code": "// schema.prisma\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n\n// Usage\nconst users = await prisma.user.findMany({\n  where: { email: { contains: 'example.com' } },\n  include: { posts: true }\n});",
    "language": "javascript",
    "tags": [
      "prisma",
      "orm"
    ]
  },
  {
    "title": "Entity Framework Core (C#)",
    "code": "public class Blog\n{\n    public int BlogId { get; set; }\n    public string Url { get; set; }\n    public List<Post> Posts { get; set; }\n}\n\n// Query\nusing (var db = new BloggingContext())\n{\n    var blogs = db.Blogs\n        .Where(b => b.Url.Contains(\"dotnet\"))\n        .Include(b => b.Posts)\n        .ToList();\n}",
    "language": "c#",
    "tags": [
      "efcore",
      "orm"
    ]
  },
  {
    "title": "Hibernate (Java)",
    "code": "@Entity\n@Table(name = \"users\")\npublic class User {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    \n    @Column(nullable = false, unique = true)\n    private String email;\n    \n    // Getters and setters\n}\n\n// Query\nSession session = sessionFactory.openSession();\nList<User> users = session.createQuery(\"FROM User WHERE active = true\", User.class)\n                         .list();",
    "language": "java",
    "tags": [
      "hibernate",
      "jpa"
    ]
  },
  {
    "title": "Mongoose (Node.js MongoDB)",
    "code": "const mongoose = require('mongoose');\nconst userSchema = new mongoose.Schema({\n  name: String,\n  email: { type: String, unique: true },\n  createdAt: { type: Date, default: Date.now }\n});\n\nconst User = mongoose.model('User', userSchema);\n\n// Query\nconst users = await User.find({ name: /john/i })\n                      .sort('-createdAt')\n                      .limit(10);",
    "language": "javascript",
    "tags": [
      "mongoose",
      "mongodb"
    ]
  },
  {
    "title": "Firestore (Firebase)",
    "code": "// Initialize\nconst { initializeApp } = require('firebase/app');\nconst { getFirestore, collection, query, where } = require('firebase/firestore');\n\n// Query\nconst db = getFirestore();\nconst q = query(collection(db, 'users'), where('age', '>', 18));\nconst snapshot = await getDocs(q);\nsnapshot.forEach(doc => {\n  console.log(doc.id, '=>', doc.data());\n});",
    "language": "javascript",
    "tags": [
      "firebase",
      "firestore"
    ]
  },
  {
    "title": "DynamoDB (AWS SDK)",
    "code": "const { DynamoDBClient, PutItemCommand } = require('@aws-sdk/client-dynamodb');\n\nconst client = new DynamoDBClient({ region: 'us-east-1' });\n\nconst params = {\n  TableName: 'Users',\n  Item: {\n    'UserId': { S: '123' },\n    'Name': { S: 'Alice' }\n  }\n};\n\nconst command = new PutItemCommand(params);\nconst response = await client.send(command);",
    "language": "javascript",
    "tags": [
      "dynamodb",
      "aws"
    ]
  },
  {
    "title": "Cassandra CQL",
    "code": "CREATE KEYSPACE ecommerce \nWITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};\n\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  name TEXT,\n  email TEXT,\n  orders LIST<TEXT>\n);\n\n-- Query\nSELECT * FROM users WHERE user_id = uuid();",
    "language": "sql",
    "tags": [
      "cassandra",
      "nosql"
    ]
  },
  {
    "title": "Neo4j Cypher Query",
    "code": "// Create nodes and relationships\nCREATE (alice:Person {name: 'Alice', age: 30})\nCREATE (bob:Person {name: 'Bob', age: 25})\nCREATE (alice)-[:KNOWS]->(bob);\n\n// Query\nMATCH (p:Person)-[:KNOWS]->(friend)\nWHERE p.name = 'Alice'\nRETURN friend.name;",
    "language": "cypher",
    "tags": [
      "neo4j",
      "graph"
    ]
  },
  {
    "title": "Elasticsearch Query",
    "code": "GET /products/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        { \"match\": { \"name\": \"laptop\" } },\n        { \"range\": { \"price\": { \"gte\": 500, \"lte\": 1000 } } }\n      ]\n    }\n  },\n  \"sort\": [ { \"price\": \"asc\" } ]\n}",
    "language": "json",
    "tags": [
      "elasticsearch",
      "search"
    ]
  },
  {
    "title": "Knex.js Query Builder",
    "code": "const knex = require('knex')({\n  client: 'pg',\n  connection: process.env.DATABASE_URL\n});\n\n// Query\nconst users = await knex('users')\n  .select('name', 'email')\n  .where('age', '>', 18)\n  .orderBy('name', 'desc')\n  .limit(10);",
    "language": "javascript",
    "tags": [
      "knex",
      "query"
    ]
  },
  {
    "title": "Pandas MultiIndex",
    "code": "import pandas as pd\nimport numpy as np\n\n# Create MultiIndex DataFrame\ndata = {\n    ('California', 2000): 33871648,\n    ('California', 2010): 37253956,\n    ('Texas', 2000): 20851820,\n    ('Texas', 2010): 25145561\n}\n\npop = pd.Series(data)\npop.index.names = ['state', 'year']\n\n# Query\npop.loc['California']\npop.xs(2010, level='year')",
    "language": "python",
    "tags": [
      "pandas",
      "multiindex"
    ]
  },
  {
    "title": "Pandas Time Series",
    "code": "import pandas as pd\n\n# Create time series\nrng = pd.date_range('1/1/2023', periods=5, freq='M')\nts = pd.Series([1, 2, 3, 4, 5], index=rng)\n\n# Resample\ndaily_ts = ts.resample('D').asfreq()\n\n# Rolling window\nrolling_mean = ts.rolling(window=2).mean()",
    "language": "python",
    "tags": [
      "pandas",
      "timeseries"
    ]
  },
  {
    "title": "NumPy Linear Algebra",
    "code": "import numpy as np\n\n# Matrix operations\nA = np.array([[1, 2], [3, 4]])\nB = np.array([[5, 6], [7, 8]])\n\n# Matrix multiplication\nC = np.dot(A, B)\n\n# Eigenvalues\neigenvalues = np.linalg.eigvals(A)\n\n# Solve linear equations\n# Ax = b\nb = np.array([1, 2])\nx = np.linalg.solve(A, b)",
    "language": "python",
    "tags": [
      "numpy",
      "linearalgebra"
    ]
  },
  {
    "title": "Dask Parallel Processing",
    "code": "import dask.dataframe as dd\n\n# Read large CSV in chunks\ndf = dd.read_csv('large_dataset.csv')\n\n# Parallel operations\nresult = df.groupby('category').price.mean().compute()",
    "language": "python",
    "tags": [
      "dask",
      "parallel"
    ]
  },
  {
    "title": "PySpark DataFrame",
    "code": "from pyspark.sql import SparkSession\n\nspark = SparkSession.builder.appName('example').getOrCreate()\n\n# Create DataFrame\ndf = spark.createDataFrame([\n    (1, \"Alice\"),\n    (2, \"Bob\")\n], [\"id\", \"name\"])\n\n# Query\nresult = df.filter(df.id > 1).groupBy().count()\nresult.show()",
    "language": "python",
    "tags": [
      "pyspark",
      "bigdata"
    ]
  },
  {
    "title": "SQLite with Python",
    "code": "import sqlite3\n\n# Connect to database\nconn = sqlite3.connect('example.db')\ncursor = conn.cursor()\n\n# Create table\ncursor.execute('''CREATE TABLE stocks\n             (date text, trans text, symbol text, qty real, price real)''')\n\n# Insert data\ncursor.execute(\"INSERT INTO stocks VALUES ('2023-01-01','BUY','RHAT',100,35.14)\")\n\n# Commit changes\nconn.commit()\nconn.close()",
    "language": "python",
    "tags": [
      "sqlite",
      "embedded"
    ]
  },
  {
    "title": "GraphQL Resolver",
    "code": "const resolvers = {\n  Query: {\n    user: async (_, { id }, { dataSources }) => {\n      return dataSources.users.getUser(id);\n    },\n  },\n  User: {\n    friends: (user, _, { dataSources }) => {\n      return dataSources.users.getFriends(user.id);\n    },\n  },\n  Mutation: {\n    createUser: (_, { input }, { dataSources }) => {\n      return dataSources.users.createUser(input);\n    },\n  },\n};",
    "language": "javascript",
    "tags": [
      "graphql",
      "api"
    ]
  },
  {
    "title": "Apache Kafka Producer",
    "code": "const { Kafka } = require('kafkajs');\n\nconst kafka = new Kafka({\n  clientId: 'my-app',\n  brokers: ['kafka1:9092', 'kafka2:9092'],\n});\n\nconst producer = kafka.producer();\n\nawait producer.connect();\nawait producer.send({\n  topic: 'test-topic',\n  messages: [\n    { value: 'Hello Kafka!' },\n  ],\n});",
    "language": "javascript",
    "tags": [
      "kafka",
      "streaming"
    ]
  },
  {
    "title": "RabbitMQ Consumer",
    "code": "const amqp = require('amqplib');\n\nasync function consume() {\n  const conn = await amqp.connect('amqp://localhost');\n  const channel = await conn.createChannel();\n  \n  const queue = 'tasks';\n  await channel.assertQueue(queue, { durable: true });\n  \n  channel.consume(queue, (msg) => {\n    if (msg !== null) {\n      console.log(msg.content.toString());\n      channel.ack(msg);\n    }\n  });\n}",
    "language": "javascript",
    "tags": [
      "rabbitmq",
      "queue"
    ]
  },
  {
    "title": "OAuth2 with Passport.js",
    "code": "const passport = require('passport');\nconst GoogleStrategy = require('passport-google-oauth20').Strategy;\n\npassport.use(new GoogleStrategy({\n    clientID: process.env.GOOGLE_CLIENT_ID,\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n    callbackURL: '/auth/google/callback'\n  },\n  (accessToken, refreshToken, profile, done) => {\n    User.findOrCreate({ googleId: profile.id }, (err, user) => {\n      return done(err, user);\n    });\n  }\n));\n\n// Routes\napp.get('/auth/google', passport.authenticate('google', { scope: ['profile'] }));\napp.get('/auth/google/callback', \n  passport.authenticate('google', { failureRedirect: '/login' }),\n  (req, res) => res.redirect('/'));",
    "language": "javascript",
    "tags": [
      "oauth",
      "authentication"
    ]
  },
  {
    "title": "JWT Authentication",
    "code": "const jwt = require('jsonwebtoken');\n\n// Generate token\nfunction generateToken(user) {\n  return jwt.sign(\n    { userId: user.id, role: user.role },\n    process.env.JWT_SECRET,\n    { expiresIn: '1h' }\n  );\n}\n\n// Verify middleware\nfunction authenticateToken(req, res, next) {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n  \n  if (!token) return res.sendStatus(401);\n\n  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {\n    if (err) return res.sendStatus(403);\n    req.user = user;\n    next();\n  });\n}",
    "language": "javascript",
    "tags": [
      "jwt",
      "security"
    ]
  },
  {
    "title": "AWS Lambda Function with API Gateway Trigger",
    "code": "exports.handler = async (event) => {\n  const response = {\n    statusCode: 200,\n    body: JSON.stringify('Hello from Lambda!'),\n  };\n  return response;\n};",
    "language": "javascript",
    "tags": [
      "aws",
      "lambda",
      "serverless"
    ]
  },
  {
    "title": "Terraform AWS EC2 Instance",
    "code": "resource \"aws_instance\" \"example\" {\n  ami           = \"ami-0c55b159cbfafe1f0\"\n  instance_type = \"t2.micro\"\n  tags = {\n    Name = \"example-instance\"\n  }\n}",
    "language": "hcl",
    "tags": [
      "aws",
      "terraform",
      "iac"
    ]
  },
  {
    "title": "AWS S3 File Upload with Python",
    "code": "import boto3\n\ns3 = boto3.client('s3')\ns3.upload_file('local_file.txt', 'my-bucket', 'remote_file.txt')",
    "language": "python",
    "tags": [
      "aws",
      "s3",
      "storage"
    ]
  },
  {
    "title": "Dockerfile for Node.js Application",
    "code": "FROM node:14-alpine\nWORKDIR /app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nEXPOSE 3000\nCMD [\"node\", \"server.js\"]",
    "language": "dockerfile",
    "tags": [
      "docker",
      "containers",
      "devops"
    ]
  },
  {
    "title": "Kubernetes Deployment YAML",
    "code": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80",
    "language": "yaml",
    "tags": [
      "kubernetes",
      "k8s",
      "devops"
    ]
  },
  {
    "title": "GitHub Actions CI/CD Pipeline",
    "code": "name: Node.js CI\n\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Use Node.js\n      uses: actions/setup-node@v1\n      with:\n        node-version: '14.x'\n    - run: npm install\n    - run: npm test",
    "language": "yaml",
    "tags": [
      "github-actions",
      "ci-cd",
      "devops"
    ]
  },
  {
    "title": "AWS CloudFormation Template for VPC",
    "code": "AWSTemplateFormatVersion: '2010-09-09'\nResources:\n  MyVPC:\n    Type: AWS::EC2::VPC\n    Properties:\n      CidrBlock: 10.0.0.0/16\n      Tags:\n        - Key: Name\n          Value: MyVPC",
    "language": "yaml",
    "tags": [
      "aws",
      "cloudformation",
      "vpc"
    ]
  },
  {
    "title": "Google Cloud Function HTTP Trigger",
    "code": "exports.helloWorld = (req, res) => {\n  res.send('Hello from Google Cloud Functions!');\n};",
    "language": "javascript",
    "tags": [
      "gcp",
      "cloud-functions",
      "serverless"
    ]
  },
  {
    "title": "Azure Blob Storage Upload with Python",
    "code": "from azure.storage.blob import BlobServiceClient\n\nblob_service_client = BlobServiceClient.from_connection_string(\"my_connection_string\")\nblob_client = blob_service_client.get_blob_client(container=\"mycontainer\", blob=\"myfile.txt\")\n\nwith open(\"local_file.txt\", \"rb\") as data:\n    blob_client.upload_blob(data)",
    "language": "python",
    "tags": [
      "azure",
      "storage",
      "python"
    ]
  },
  {
    "title": "Docker Compose for Multi-Container App",
    "code": "version: '3'\nservices:\n  web:\n    build: .\n    ports:\n      - \"5000:5000\"\n  redis:\n    image: \"redis:alpine\"",
    "language": "yaml",
    "tags": [
      "docker",
      "docker-compose",
      "devops"
    ]
  },
  {
    "title": "AWS CLI S3 Bucket Operations",
    "code": "# Create bucket\naws s3 mb s3://my-bucket\n\n# List buckets\naws s3 ls\n\n# Sync local directory to S3\naws s3 sync ./local-folder s3://my-bucket/remote-folder",
    "language": "bash",
    "tags": [
      "aws",
      "cli",
      "s3"
    ]
  },
  {
    "title": "Kubernetes Service YAML",
    "code": "apiVersion: v1\nkind: Service\nmetadata:\n  name: my-service\nspec:\n  selector:\n    app: MyApp\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 9376\n  type: LoadBalancer",
    "language": "yaml",
    "tags": [
      "kubernetes",
      "k8s",
      "devops"
    ]
  },
  {
    "title": "Terraform Google Cloud Storage Bucket",
    "code": "resource \"google_storage_bucket\" \"static-site\" {\n  name     = \"my-static-site\"\n  location = \"US\"\n}",
    "language": "hcl",
    "tags": [
      "gcp",
      "terraform",
      "storage"
    ]
  },
  {
    "title": "Jenkins Pipeline Script",
    "code": "pipeline {\n  agent any\n  stages {\n    stage('Build') {\n      steps {\n        sh 'npm install'\n      }\n    }\n    stage('Test') {\n      steps {\n        sh 'npm test'\n      }\n    }\n    stage('Deploy') {\n      steps {\n        sh 'npm run deploy'\n      }\n    }\n  }\n}",
    "language": "groovy",
    "tags": [
      "jenkins",
      "ci-cd",
      "devops"
    ]
  },
  {
    "title": "AWS RDS PostgreSQL Connection",
    "code": "const { Pool } = require('pg');\n\nconst pool = new Pool({\n  user: 'dbuser',\n  host: 'my-rds-instance.123456789012.us-east-1.rds.amazonaws.com',\n  database: 'mydb',\n  password: 'secretpassword',\n  port: 5432,\n});",
    "language": "javascript",
    "tags": [
      "aws",
      "rds",
      "postgresql"
    ]
  },
  {
    "title": "Azure Function with HTTP Trigger",
    "code": "module.exports = async function (context, req) {\n  context.log('HTTP trigger function processed a request.');\n  context.res = {\n    body: \"Hello from Azure Function!\"\n  };\n};",
    "language": "javascript",
    "tags": [
      "azure",
      "functions",
      "serverless"
    ]
  },
  {
    "title": "Google Cloud Pub/Sub Publisher",
    "code": "const {PubSub} = require('@google-cloud/pubsub');\n\nconst pubsub = new PubSub();\nconst topicName = 'my-topic';\n\nasync function publishMessage() {\n  const data = JSON.stringify({foo: 'bar'});\n  const dataBuffer = Buffer.from(data);\n  const messageId = await pubsub.topic(topicName).publish(dataBuffer);\n  console.log(`Message ${messageId} published.`);\n}",
    "language": "javascript",
    "tags": [
      "gcp",
      "pubsub",
      "messaging"
    ]
  },
  {
    "title": "AWS CloudWatch Logs Query",
    "code": "aws logs filter-log-events \\\n  --log-group-name \"/aws/lambda/my-function\" \\\n  --start-time $(date -d \"1 day ago\" +%s000) \\\n  --filter-pattern \"ERROR\"",
    "language": "bash",
    "tags": [
      "aws",
      "cloudwatch",
      "monitoring"
    ]
  },
  {
    "title": "Kubernetes Ingress YAML",
    "code": "apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: minimal-ingress\n  annotations:\n    nginx.ingress.kubernetes.io/rewrite-target: /\nspec:\n  rules:\n  - http:\n      paths:\n      - path: /testpath\n        pathType: Prefix\n        backend:\n          service:\n            name: test\n            port:\n              number: 80",
    "language": "yaml",
    "tags": [
      "kubernetes",
      "ingress",
      "devops"
    ]
  },
  {
    "title": "Terraform Azure Virtual Machine",
    "code": "resource \"azurerm_linux_virtual_machine\" \"example\" {\n  name                = \"example-machine\"\n  resource_group_name = azurerm_resource_group.example.name\n  location            = azurerm_resource_group.example.location\n  size                = \"Standard_F2\"\n  admin_username      = \"adminuser\"\n  network_interface_ids = [azurerm_network_interface.example.id]\n\n  admin_ssh_key {\n    username   = \"adminuser\"\n    public_key = file(\"~/.ssh/id_rsa.pub\")\n  }\n\n  os_disk {\n    caching              = \"ReadWrite\"\n    storage_account_type = \"Standard_LRS\"\n  }\n\n  source_image_reference {\n    publisher = \"Canonical\"\n    offer     = \"UbuntuServer\"\n    sku       = \"16.04-LTS\"\n    version   = \"latest\"\n  }\n}",
    "language": "hcl",
    "tags": [
      "azure",
      "terraform",
      "vm"
    ]
  },
  {
    "title": "Docker Health Check",
    "code": "FROM nginx:alpine\n\nHEALTHCHECK --interval=30s --timeout=3s \\\n  CMD curl -f http://localhost/ || exit 1",
    "language": "dockerfile",
    "tags": [
      "docker",
      "healthcheck",
      "devops"
    ]
  },
  {
    "title": "AWS DynamoDB CRUD Operations",
    "code": "const AWS = require('aws-sdk');\nconst dynamoDB = new AWS.DynamoDB.DocumentClient();\n\n// Put item\nawait dynamoDB.put({\n  TableName: 'MyTable',\n  Item: { id: '1', name: 'John' }\n}).promise();\n\n// Get item\nconst result = await dynamoDB.get({\n  TableName: 'MyTable',\n  Key: { id: '1' }\n}).promise();",
    "language": "javascript",
    "tags": [
      "aws",
      "dynamodb",
      "database"
    ]
  },
  {
    "title": "Google Cloud BigQuery Query",
    "code": "from google.cloud import bigquery\n\nclient = bigquery.Client()\nquery = \"\"\"\n  SELECT name, COUNT(*) as count\n  FROM `bigquery-public-data.usa_names.usa_1910_current`\n  GROUP BY name\n  ORDER BY count DESC\n  LIMIT 10\n\"\"\"\nquery_job = client.query(query)\n\nfor row in query_job:\n  print(f\"{row.name}: {row.count}\")",
    "language": "python",
    "tags": [
      "gcp",
      "bigquery",
      "data"
    ]
  },
  {
    "title": "AWS ECS Task Definition",
    "code": "{\n  \"family\": \"my-task\",\n  \"networkMode\": \"awsvpc\",\n  \"executionRoleArn\": \"arn:aws:iam::123456789012:role/ecsTaskExecutionRole\",\n  \"containerDefinitions\": [\n    {\n      \"name\": \"my-container\",\n      \"image\": \"nginx:latest\",\n      \"portMappings\": [\n        {\n          \"containerPort\": 80,\n          \"protocol\": \"tcp\"\n        }\n      ],\n      \"essential\": true\n    }\n  ],\n  \"requiresCompatibilities\": [\"FARGATE\"],\n  \"cpu\": \"256\",\n  \"memory\": \"512\"\n}",
    "language": "json",
    "tags": [
      "aws",
      "ecs",
      "containers"
    ]
  },
  {
    "title": "Azure Kubernetes Service (AKS) Deployment",
    "code": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: azure-vote-front\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: azure-vote-front\n  template:\n    metadata:\n      labels:\n        app: azure-vote-front\n    spec:\n      nodeSelector:\n        \"beta.kubernetes.io/os\": linux\n      containers:\n      - name: azure-vote-front\n        image: mcr.microsoft.com/azuredocs/azure-vote-front:v1\n        ports:\n        - containerPort: 80\n        env:\n        - name: REDIS\n          value: \"azure-vote-back\"",
    "language": "yaml",
    "tags": [
      "azure",
      "aks",
      "kubernetes"
    ]
  },
  {
    "title": "AWS IAM Policy for S3 Access",
    "code": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:GetObject\",\n        \"s3:PutObject\",\n        \"s3:DeleteObject\"\n      ],\n      \"Resource\": \"arn:aws:s3:::my-bucket/*\"\n    }\n  ]\n}",
    "language": "json",
    "tags": [
      "aws",
      "iam",
      "security"
    ]
  },
  {
    "title": "Google Cloud Run Deployment",
    "code": "gcloud run deploy my-service \\\n  --image gcr.io/my-project/my-image \\\n  --platform managed \\\n  --region us-central1 \\\n  --allow-unauthenticated",
    "language": "bash",
    "tags": [
      "gcp",
      "cloud-run",
      "serverless"
    ]
  },
  {
    "title": "Terraform Kubernetes Provider",
    "code": "provider \"kubernetes\" {\n  config_path = \"~/.kube/config\"\n}\n\nresource \"kubernetes_deployment\" \"example\" {\n  metadata {\n    name = \"terraform-example\"\n    labels = {\n      app = \"MyApp\"\n    }\n  }\n\n  spec {\n    replicas = 2\n\n    selector {\n      match_labels = {\n        app = \"MyApp\"\n      }\n    }\n\n    template {\n      metadata {\n        labels = {\n          app = \"MyApp\"\n        }\n      }\n\n      spec {\n        container {\n          image = \"nginx:1.7.8\"\n          name  = \"example\"\n        }\n      }\n    }\n  }\n}",
    "language": "hcl",
    "tags": [
      "kubernetes",
      "terraform",
      "iac"
    ]
  },
  {
    "title": "AWS CloudFront Distribution with S3 Origin",
    "code": "resource \"aws_cloudfront_distribution\" \"s3_distribution\" {\n  origin {\n    domain_name = aws_s3_bucket.bucket.bucket_regional_domain_name\n    origin_id   = \"S3-Origin\"\n  }\n\n  enabled             = true\n  default_root_object = \"index.html\"\n\n  default_cache_behavior {\n    allowed_methods  = [\"GET\", \"HEAD\"]\n    cached_methods   = [\"GET\", \"HEAD\"]\n    target_origin_id = \"S3-Origin\"\n\n    forwarded_values {\n      query_string = false\n\n      cookies {\n        forward = \"none\"\n      }\n    }\n\n    viewer_protocol_policy = \"allow-all\"\n    min_ttl                = 0\n    default_ttl            = 3600\n    max_ttl                = 86400\n  }\n\n  restrictions {\n    geo_restriction {\n      restriction_type = \"none\"\n    }\n  }\n\n  viewer_certificate {\n    cloudfront_default_certificate = true\n  }\n}",
    "language": "hcl",
    "tags": [
      "aws",
      "cloudfront",
      "cdn"
    ]
  },
  {
    "title": "Azure Cosmos DB SQL API Query",
    "code": "const CosmosClient = require('@azure/cosmos').CosmosClient;\n\nconst client = new CosmosClient({ endpoint, key });\nconst database = client.database('my-database');\nconst container = database.container('my-container');\n\nconst { resources } = await container.items\n  .query(\"SELECT * FROM c WHERE c.status = 'active'\")\n  .fetchAll();\n\nresources.forEach(item => {\n  console.log(item);\n});",
    "language": "javascript",
    "tags": [
      "azure",
      "cosmosdb",
      "database"
    ]
  },
  {
    "title": "Google Cloud IAM Binding",
    "code": "resource \"google_project_iam_binding\" \"storage_admin\" {\n  project = \"my-project\"\n  role    = \"roles/storage.admin\"\n\n  members = [\n    \"user:john@example.com\",\n    \"serviceAccount:my-service-account@my-project.iam.gserviceaccount.com\"\n  ]\n}",
    "language": "hcl",
    "tags": [
      "gcp",
      "iam",
      "security"
    ]
  },
  {
    "title": "AWS Step Functions State Machine Definition",
    "code": "{\n  \"Comment\": \"A Hello World example\",\n  \"StartAt\": \"HelloWorld\",\n  \"States\": {\n    \"HelloWorld\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:lambda:us-east-1:123456789012:function:HelloFunction\",\n      \"End\": true\n    }\n  }\n}",
    "language": "json",
    "tags": [
      "aws",
      "step-functions",
      "workflow"
    ]
  },
  {
    "title": "Azure Resource Manager (ARM) Template",
    "code": "{\n  \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\n  \"contentVersion\": \"1.0.0.0\",\n  \"resources\": [\n    {\n      \"type\": \"Microsoft.Storage/storageAccounts\",\n      \"apiVersion\": \"2019-06-01\",\n      \"name\": \"mystorageaccount\",\n      \"location\": \"[resourceGroup().location]\",\n      \"sku\": {\n        \"name\": \"Standard_LRS\"\n      },\n      \"kind\": \"StorageV2\"\n    }\n  ]\n}",
    "language": "json",
    "tags": [
      "azure",
      "arm",
      "iac"
    ]
  },
  {
    "title": "AWS CloudTrail Logging Setup",
    "code": "resource \"aws_cloudtrail\" \"example\" {\n  name                          = \"example-trail\"\n  s3_bucket_name                = aws_s3_bucket.example.id\n  include_global_service_events = true\n  is_multi_region_trail         = true\n  enable_log_file_validation    = true\n}",
    "language": "hcl",
    "tags": [
      "aws",
      "cloudtrail",
      "security"
    ]
  },
  {
    "title": "Google Cloud Dataflow Job",
    "code": "gcloud dataflow jobs run my-job \\\n  --gcs-location gs://dataflow-templates/latest/Word_Count \\\n  --parameters inputFile=gs://my-bucket/input.txt,output=gs://my-bucket/output \\\n  --region us-central1",
    "language": "bash",
    "tags": [
      "gcp",
      "dataflow",
      "bigdata"
    ]
  },
  {
    "title": "AWS Elastic Beanstalk Configuration",
    "code": "option_settings:\n  aws:elasticbeanstalk:application:environment:\n    NODE_ENV: production\n    DB_HOST: my-database.123456789012.us-east-1.rds.amazonaws.com\n  aws:elasticbeanstalk:container:nodejs:\n    NodeVersion: 14.x.0\n  aws:elasticbeanstalk:container:nodejs:staticfiles:\n    /static: public",
    "language": "yaml",
    "tags": [
      "aws",
      "elastic-beanstalk",
      "paas"
    ]
  },
  {
    "title": "Azure Monitor Alert Rule",
    "code": "resource \"azurerm_monitor_metric_alert\" \"example\" {\n  name                = \"example-alert\"\n  resource_group_name = azurerm_resource_group.example.name\n  scopes              = [azurerm_virtual_machine.example.id]\n\n  criteria {\n    metric_namespace = \"Microsoft.Compute/virtualMachines\"\n    metric_name      = \"Percentage CPU\"\n    aggregation      = \"Average\"\n    operator         = \"GreaterThan\"\n    threshold        = 90\n  }\n\n  action {\n    action_group_id = azurerm_monitor_action_group.example.id\n  }\n}",
    "language": "hcl",
    "tags": [
      "azure",
      "monitoring",
      "alerts"
    ]
  },
  {
    "title": "AWS API Gateway with Lambda Integration",
    "code": "resource \"aws_api_gateway_rest_api\" \"example\" {\n  name        = \"example-api\"\n  description = \"Example API with Lambda integration\"\n}\n\nresource \"aws_api_gateway_resource\" \"example\" {\n  rest_api_id = aws_api_gateway_rest_api.example.id\n  parent_id   = aws_api_gateway_rest_api.example.root_resource_id\n  path_part   = \"example\"\n}\n\nresource \"aws_api_gateway_method\" \"example\" {\n  rest_api_id   = aws_api_gateway_rest_api.example.id\n  resource_id   = aws_api_gateway_resource.example.id\n  http_method   = \"GET\"\n  authorization = \"NONE\"\n}\n\nresource \"aws_api_gateway_integration\" \"example\" {\n  rest_api_id = aws_api_gateway_rest_api.example.id\n  resource_id = aws_api_gateway_resource.example.id\n  http_method = aws_api_gateway_method.example.http_method\n\n  integration_http_method = \"POST\"\n  type                    = \"AWS_PROXY\"\n  uri                     = aws_lambda_function.example.invoke_arn\n}",
    "language": "hcl",
    "tags": [
      "aws",
      "api-gateway",
      "serverless"
    ]
  },
  {
    "title": "Google Cloud SQL Database Instance",
    "code": "resource \"google_sql_database_instance\" \"instance\" {\n  name             = \"my-database-instance\"\n  database_version = \"POSTGRES_13\"\n  region           = \"us-central1\"\n\n  settings {\n    tier = \"db-f1-micro\"\n\n    ip_configuration {\n      ipv4_enabled = true\n      authorized_networks {\n        name  = \"office\"\n        value = \"203.0.113.0/24\"\n      }\n    }\n  }\n}",
    "language": "hcl",
    "tags": [
      "gcp",
      "cloud-sql",
      "database"
    ]
  },
  {
    "title": "Azure DevOps Pipeline YAML",
    "code": "trigger:\n- main\n\npool:\n  vmImage: 'ubuntu-latest'\n\nsteps:\n- task: NodeTool@0\n  inputs:\n    versionSpec: '14.x'\n  displayName: 'Install Node.js'\n\n- script: |\n    npm install\n    npm run build\n  displayName: 'npm install and build'",
    "language": "yaml",
    "tags": [
      "azure",
      "devops",
      "ci-cd"
    ]
  },
  {
    "title": "AWS EKS Cluster with Terraform",
    "code": "module \"eks\" {\n  source          = \"terraform-aws-modules/eks/aws\"\n  cluster_name    = \"my-cluster\"\n  cluster_version = \"1.21\"\n  subnets         = [\"subnet-12345678\", \"subnet-87654321\"]\n  vpc_id          = \"vpc-12345678\"\n\n  worker_groups = [\n    {\n      instance_type = \"m5.large\"\n      asg_max_size  = 5\n    }\n  ]\n}",
    "language": "hcl",
    "tags": [
      "aws",
      "eks",
      "kubernetes"
    ]
  },
  {
    "title": "Google Cloud Functions Pub/Sub Trigger",
    "code": "exports.helloPubSub = (event, context) => {\n  const pubSubMessage = event.data;\n  const name = pubSubMessage\n    ? Buffer.from(pubSubMessage, 'base64').toString()\n    : 'World';\n  console.log(`Hello, ${name}!`);\n};",
    "language": "javascript",
    "tags": [
      "gcp",
      "cloud-functions",
      "pubsub"
    ]
  },
  {
    "title": "AWS Glue Python Shell Job",
    "code": "import sys\nfrom awsglue.utils import getResolvedOptions\n\nargs = getResolvedOptions(sys.argv, ['JOB_NAME'])\n\nprint(\"Starting job:\", args['JOB_NAME'])\n\n# Your ETL logic here\nprint(\"Job completed successfully\")",
    "language": "python",
    "tags": [
      "aws",
      "glue",
      "etl"
    ]
  },
  {
    "title": "Azure Service Bus Queue Trigger",
    "code": "module.exports = async function(context, myQueueItem) {\n  context.log('JavaScript ServiceBus queue trigger function processed message', myQueueItem);\n  // Process the message\n};",
    "language": "javascript",
    "tags": [
      "azure",
      "service-bus",
      "messaging"
    ]
  },
  {
    "title": "AWS KMS Encryption/Decryption",
    "code": "const AWS = require('aws-sdk');\nconst kms = new AWS.KMS();\n\n// Encrypt\nexports.encrypt = async (plaintext) => {\n  const params = {\n    KeyId: 'alias/my-key',\n    Plaintext: plaintext\n  };\n  const { CiphertextBlob } = await kms.encrypt(params).promise();\n  return CiphertextBlob.toString('base64');\n};\n\n// Decrypt\nexports.decrypt = async (ciphertext) => {\n  const params = {\n    CiphertextBlob: Buffer.from(ciphertext, 'base64')\n  };\n  const { Plaintext } = await kms.decrypt(params).promise();\n  return Plaintext.toString();\n};",
    "language": "javascript",
    "tags": [
      "aws",
      "kms",
      "security"
    ]
  },
  {
    "title": "Google Cloud Spanner Query",
    "code": "const {Spanner} = require('@google-cloud/spanner');\n\nconst spanner = new Spanner({\n  projectId: 'my-project',\n});\n\nconst instance = spanner.instance('my-instance');\nconst database = instance.database('my-database');\n\nconst query = {\n  sql: 'SELECT * FROM Singers WHERE SingerId = @id',\n  params: {\n    id: 1\n  }\n};\n\ndatabase.run(query)\n  .then(results => {\n    const rows = results[0];\n    rows.forEach(row => console.log(row));\n  });",
    "language": "javascript",
    "tags": [
      "gcp",
      "spanner",
      "database"
    ]
  },
  {
    "title": "AWS SQS Queue Operations",
    "code": "const AWS = require('aws-sdk');\nconst sqs = new AWS.SQS();\n\n// Send message\nawait sqs.sendMessage({\n  QueueUrl: 'https://sqs.us-east-1.amazonaws.com/123456789012/my-queue',\n  MessageBody: JSON.stringify({ key: 'value' })\n}).promise();\n\n// Receive messages\nconst { Messages } = await sqs.receiveMessage({\n  QueueUrl: 'https://sqs.us-east-1.amazonaws.com/123456789012/my-queue',\n  MaxNumberOfMessages: 10,\n  WaitTimeSeconds: 20\n}).promise();",
    "language": "javascript",
    "tags": [
      "aws",
      "sqs",
      "messaging"
    ]
  },
  {
    "title": "Azure Key Vault Secret Access",
    "code": "const { SecretClient } = require(\"@azure/keyvault-secrets\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n\nconst credential = new DefaultAzureCredential();\nconst vaultName = \"my-key-vault\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst client = new SecretClient(url, credential);\n\n// Get secret\nconst secret = await client.getSecret(\"my-secret\");\nconsole.log(secret.value);",
    "language": "javascript",
    "tags": [
      "azure",
      "key-vault",
      "security"
    ]
  },
  {
    "title": "Google Cloud Endpoints Configuration",
    "code": "swagger: \"2.0\"\ninfo:\n  title: My API\n  description: API for my service\n  version: 1.0.0\nhost: \"my-api.endpoints.my-project.cloud.goog\"\npaths:\n  /v1/hello:\n    get:\n      description: \"Returns a greeting\"\n      operationId: \"hello\"\n      produces:\n        - \"application/json\"\n      responses:\n        200:\n          description: \"Success\"\n          schema:\n            type: \"string\"",
    "language": "yaml",
    "tags": [
      "gcp",
      "endpoints",
      "api"
    ]
  },
  {
    "title": "AWS AppSync GraphQL Resolver",
    "code": "{\n  \"version\": \"2018-05-29\",\n  \"operation\": \"GetItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n  },\n  \"consistentRead\": true\n}",
    "language": "json",
    "tags": [
      "aws",
      "appsync",
      "graphql"
    ]
  },
  {
    "title": "Azure CDN Endpoint with Storage Origin",
    "code": "resource \"azurerm_cdn_profile\" \"example\" {\n  name                = \"example-cdn\"\n  location            = azurerm_resource_group.example.location\n  resource_group_name = azurerm_resource_group.example.name\n  sku                 = \"Standard_Microsoft\"\n}\n\nresource \"azurerm_cdn_endpoint\" \"example\" {\n  name                = \"example-endpoint\"\n  profile_name        = azurerm_cdn_profile.example.name\n  location            = azurerm_resource_group.example.location\n  resource_group_name = azurerm_resource_group.example.name\n  origin_host_header  = azurerm_storage_account.example.primary_blob_host\n\n  origin {\n    name      = \"example\"\n    host_name = azurerm_storage_account.example.primary_blob_host\n  }\n}",
    "language": "hcl",
    "tags": [
      "azure",
      "cdn",
      "storage"
    ]
  },
  {
    "title": "Jest Basic Test",
    "code": "test('adds 1 + 2 to equal 3', () => {\n  expect(1 + 2).toBe(3);\n});",
    "language": "javascript",
    "tags": [
      "jest",
      "unit-testing",
      "javascript"
    ]
  },
  {
    "title": "Jest Mocking a Module",
    "code": "jest.mock('../api');\nimport api from '../api';\n\ntest('mocks API call', async () => {\n  api.getData.mockResolvedValue({ data: 'mock data' });\n  const result = await api.getData();\n  expect(result.data).toBe('mock data');\n});",
    "language": "javascript",
    "tags": [
      "jest",
      "mocking",
      "unit-testing"
    ]
  },
  {
    "title": "Jest Snapshot Testing",
    "code": "import renderer from 'react-test-renderer';\nimport Component from './Component';\n\ntest('component matches snapshot', () => {\n  const tree = renderer.create(<Component />).toJSON();\n  expect(tree).toMatchSnapshot();\n});",
    "language": "javascript",
    "tags": [
      "jest",
      "react",
      "snapshot-testing"
    ]
  },
  {
    "title": "Mocha Basic Test",
    "code": "const assert = require('assert');\n\ndescribe('Array', () => {\n  describe('#indexOf()', () => {\n    it('should return -1 when value not present', () => {\n      assert.equal([1, 2, 3].indexOf(4), -1);\n    });\n  });\n});",
    "language": "javascript",
    "tags": [
      "mocha",
      "unit-testing",
      "javascript"
    ]
  },
  {
    "title": "Mocha with Chai Assertions",
    "code": "const { expect } = require('chai');\n\ndescribe('Math operations', () => {\n  it('should add numbers correctly', () => {\n    expect(1 + 1).to.equal(2);\n  });\n});",
    "language": "javascript",
    "tags": [
      "mocha",
      "chai",
      "unit-testing"
    ]
  },
  {
    "title": "Karma Configuration",
    "code": "module.exports = function(config) {\n  config.set({\n    frameworks: ['jasmine'],\n    files: ['src/**/*.js', 'test/**/*.spec.js'],\n    browsers: ['Chrome'],\n    singleRun: true\n  });\n};",
    "language": "javascript",
    "tags": [
      "karma",
      "test-runner",
      "javascript"
    ]
  },
  {
    "title": "Selenium WebDriver with JavaScript",
    "code": "const { Builder, By } = require('selenium-webdriver');\n\n(async function test() {\n  let driver = await new Builder().forBrowser('chrome').build();\n  try {\n    await driver.get('https://example.com');\n    const title = await driver.getTitle();\n    console.log('Page title:', title);\n  } finally {\n    await driver.quit();\n  }\n})();",
    "language": "javascript",
    "tags": [
      "selenium",
      "webdriver",
      "e2e-testing"
    ]
  },
  {
    "title": "Cypress Basic Test",
    "code": "describe('My First Test', () => {\n  it('Visits the Kitchen Sink', () => {\n    cy.visit('https://example.cypress.io')\n    cy.contains('type').click()\n    cy.url().should('include', '/commands/actions')\n  });\n});",
    "language": "javascript",
    "tags": [
      "cypress",
      "e2e-testing",
      "javascript"
    ]
  },
  {
    "title": "Cypress API Testing",
    "code": "describe('API Testing', () => {\n  it('Makes API request', () => {\n    cy.request('GET', 'https://jsonplaceholder.typicode.com/posts/1')\n      .then((response) => {\n        expect(response.status).to.eq(200)\n        expect(response.body).to.have.property('userId')\n      })\n  });\n});",
    "language": "javascript",
    "tags": [
      "cypress",
      "api-testing",
      "javascript"
    ]
  },
  {
    "title": "Playwright Basic Test",
    "code": "const { test, expect } = require('@playwright/test');\n\ntest('basic test', async ({ page }) => {\n  await page.goto('https://example.com');\n  const title = await page.title();\n  expect(title).toBe('Example Domain');\n});",
    "language": "javascript",
    "tags": [
      "playwright",
      "e2e-testing",
      "javascript"
    ]
  },
  {
    "title": "Playwright with Authentication",
    "code": "const { test } = require('@playwright/test');\n\ntest('authenticated test', async ({ browser }) => {\n  const context = await browser.newContext({\n    httpCredentials: {\n      username: 'user',\n      password: 'pass'\n    }\n  });\n  const page = await context.newPage();\n  await page.goto('https://protected.example.com');\n});",
    "language": "javascript",
    "tags": [
      "playwright",
      "authentication",
      "e2e-testing"
    ]
  },
  {
    "title": "Cucumber Feature File",
    "code": "Feature: Login functionality\n\n  Scenario: Successful login with valid credentials\n    Given I am on the login page\n    When I enter valid username and password\n    Then I should be redirected to the dashboard",
    "language": "gherkin",
    "tags": [
      "cucumber",
      "bdd",
      "testing"
    ]
  },
  {
    "title": "Cucumber Step Definitions",
    "code": "const { Given, When, Then } = require('@cucumber/cucumber');\nconst { expect } = require('chai');\n\nGiven('I am on the login page', async function() {\n  await this.page.goto('https://example.com/login');\n});\n\nWhen('I enter valid username and password', async function() {\n  await this.page.fill('#username', 'testuser');\n  await this.page.fill('#password', 'password123');\n  await this.page.click('#login-btn');\n});\n\nThen('I should be redirected to the dashboard', async function() {\n  await this.page.waitForURL('**/dashboard');\n  expect(await this.page.title()).to.include('Dashboard');\n});",
    "language": "javascript",
    "tags": [
      "cucumber",
      "bdd",
      "testing"
    ]
  },
  {
    "title": "Robot Framework Test Case",
    "code": "*** Test Cases ***\nLogin With Valid Credentials\n    Open Browser    https://example.com/login    chrome\n    Input Text    id=username    testuser\n    Input Text    id=password    password123\n    Click Button    id=login-btn\n    Wait Until Page Contains    Dashboard\n    Close Browser",
    "language": "robotframework",
    "tags": [
      "robot-framework",
      "automation",
      "testing"
    ]
  },
  {
    "title": "Robot Framework Keyword",
    "code": "*** Keywords ***\nLogin With Credentials\n    [Arguments]    ${username}    ${password}\n    Input Text    id=username    ${username}\n    Input Text    id=password    ${password}\n    Click Button    id=login-btn",
    "language": "robotframework",
    "tags": [
      "robot-framework",
      "automation",
      "testing"
    ]
  },
  {
    "title": "Appium Mobile Test (Java)",
    "code": "@Test\npublic void testAppLaunch() {\n    AndroidDriver<MobileElement> driver = new AndroidDriver<>(new URL(\"http://127.0.0.1:4723/wd/hub\"), capabilities);\n    MobileElement el = driver.findElement(By.xpath(\"//android.widget.Button[@text='Login']\"));\n    el.click();\n    driver.quit();\n}",
    "language": "java",
    "tags": [
      "appium",
      "mobile-testing",
      "java"
    ]
  },
  {
    "title": "Espresso Basic Test (Android)",
    "code": "@Test\nfun testLoginButton() {\n    onView(withId(R.id.login_button))\n        .perform(click())\n    onView(withId(R.id.welcome_message))\n        .check(matches(isDisplayed()))\n}",
    "language": "kotlin",
    "tags": [
      "espresso",
      "android",
      "mobile-testing"
    ]
  },
  {
    "title": "Jest Testing React Component",
    "code": "import { render, screen } from '@testing-library/react';\nimport Button from './Button';\n\ntest('renders button with text', () => {\n  render(<Button>Click me</Button>);\n  const buttonElement = screen.getByText(/click me/i);\n  expect(buttonElement).toBeInTheDocument();\n});",
    "language": "javascript",
    "tags": [
      "jest",
      "react",
      "unit-testing"
    ]
  },
  {
    "title": "Jest Testing Async Code",
    "code": "test('fetches data successfully', async () => {\n  const data = await fetchData();\n  expect(data).toHaveProperty('success', true);\n});",
    "language": "javascript",
    "tags": [
      "jest",
      "async",
      "unit-testing"
    ]
  },
  {
    "title": "Mocha Testing Express Route",
    "code": "const request = require('supertest');\nconst app = require('../app');\n\ndescribe('GET /users', () => {\n  it('responds with JSON', (done) => {\n    request(app)\n      .get('/users')\n      .expect('Content-Type', /json/)\n      .expect(200, done);\n  });\n});",
    "language": "javascript",
    "tags": [
      "mocha",
      "express",
      "api-testing"
    ]
  },
  {
    "title": "Selenium Page Object Model",
    "code": "class LoginPage {\n  constructor(driver) {\n    this.driver = driver;\n    this.usernameField = By.id('username');\n    this.passwordField = By.id('password');\n    this.loginButton = By.id('login-btn');\n  }\n\n  async login(username, password) {\n    await this.driver.findElement(this.usernameField).sendKeys(username);\n    await this.driver.findElement(this.passwordField).sendKeys(password);\n    await this.driver.findElement(this.loginButton).click();\n  }\n}",
    "language": "javascript",
    "tags": [
      "selenium",
      "page-object",
      "e2e-testing"
    ]
  },
  {
    "title": "Cypress Custom Command",
    "code": "Cypress.Commands.add('login', (username, password) => {\n  cy.get('#username').type(username);\n  cy.get('#password').type(password);\n  cy.get('#login-btn').click();\n});\n\n// Usage in test:\n// cy.login('testuser', 'password123')",
    "language": "javascript",
    "tags": [
      "cypress",
      "custom-commands",
      "e2e-testing"
    ]
  },
  {
    "title": "Playwright Visual Regression Test",
    "code": "const { test, expect } = require('@playwright/test');\n\ntest('homepage visual comparison', async ({ page }) => {\n  await page.goto('https://example.com');\n  expect(await page.screenshot()).toMatchSnapshot('homepage.png');\n});",
    "language": "javascript",
    "tags": [
      "playwright",
      "visual-testing",
      "e2e-testing"
    ]
  },
  {
    "title": "Cucumber Data Tables",
    "code": "Scenario: Login with multiple users\n  Given I am on the login page\n  When I enter the following credentials:\n    | username | password   |\n    | user1    | password1  |\n    | user2    | password2  |\n  Then I should be logged in",
    "language": "gherkin",
    "tags": [
      "cucumber",
      "bdd",
      "data-driven"
    ]
  },
  {
    "title": "Robot Framework API Testing",
    "code": "*** Settings ***\nLibrary    RequestsLibrary\n\n*** Test Cases ***\nTest API Endpoint\n    Create Session    api    https://api.example.com\n    ${response}=    GET On Session    api    /users/1\n    Should Be Equal As Numbers    ${response.status_code}    200\n    Dictionary Should Contain Key    ${response.json()}    name",
    "language": "robotframework",
    "tags": [
      "robot-framework",
      "api-testing",
      "automation"
    ]
  },
  {
    "title": "Appium Desired Capabilities",
    "code": "const capabilities = {\n  platformName: 'iOS',\n  platformVersion: '15.0',\n  deviceName: 'iPhone 13',\n  app: '/path/to/app.ipa',\n  automationName: 'XCUITest'\n};",
    "language": "javascript",
    "tags": [
      "appium",
      "mobile-testing",
      "capabilities"
    ]
  },
  {
    "title": "Espresso View Matchers",
    "code": "@Test\nfun testViews() {\n    // Match by ID\n    onView(withId(R.id.login_button))\n    \n    // Match by text\n    onView(withText(\"Login\"))\n    \n    // Match by content description\n    onView(withContentDescription(R.string.login_desc)))\n}",
    "language": "kotlin",
    "tags": [
      "espresso",
      "android",
      "view-matchers"
    ]
  },
  {
    "title": "Jest Testing Redux Actions",
    "code": "import * as actions from './actions';\n\ntest('should create an action to add todo', () => {\n  const text = 'Learn testing';\n  const expectedAction = {\n    type: 'ADD_TODO',\n    payload: { text }\n  };\n  expect(actions.addTodo(text)).toEqual(expectedAction);\n});",
    "language": "javascript",
    "tags": [
      "jest",
      "redux",
      "unit-testing"
    ]
  },
  {
    "title": "Jest Testing Redux Reducers",
    "code": "import reducer from './reducer';\n\ntest('should handle ADD_TODO', () => {\n  const initialState = [];\n  const action = {\n    type: 'ADD_TODO',\n    payload: { text: 'Run tests' }\n  };\n  const nextState = reducer(initialState, action);\n  expect(nextState).toEqual([{ text: 'Run tests', completed: false }]);\n});",
    "language": "javascript",
    "tags": [
      "jest",
      "redux",
      "unit-testing"
    ]
  },
  {
    "title": "Mocha with Sinon (Spies)",
    "code": "const sinon = require('sinon');\nconst myFunction = require('./myFunction');\n\ndescribe('myFunction', () => {\n  it('should call callback', () => {\n    const callback = sinon.spy();\n    myFunction(callback);\n    sinon.assert.calledOnce(callback);\n  });\n});",
    "language": "javascript",
    "tags": [
      "mocha",
      "sinon",
      "spies"
    ]
  },
  {
    "title": "Mocha with Sinon (Stubs)",
    "code": "const sinon = require('sinon');\nconst api = require('./api');\nconst myModule = require('./myModule');\n\ndescribe('myModule', () => {\n  it('should handle API response', async () => {\n    const stub = sinon.stub(api, 'fetchData').resolves({ data: 'test' });\n    const result = await myModule.processData();\n    expect(result).to.equal('TEST');\n    stub.restore();\n  });\n});",
    "language": "javascript",
    "tags": [
      "mocha",
      "sinon",
      "stubs"
    ]
  },
  {
    "title": "Selenium Explicit Wait",
    "code": "const { Builder, By, until } = require('selenium-webdriver');\n\n(async function() {\n  let driver = await new Builder().forBrowser('chrome').build();\n  try {\n    await driver.get('https://example.com');\n    let element = await driver.wait(\n      until.elementLocated(By.id('dynamic-element')), 10000\n    );\n    await driver.wait(until.elementIsVisible(element), 5000);\n  } finally {\n    await driver.quit();\n  }\n})();",
    "language": "javascript",
    "tags": [
      "selenium",
      "waits",
      "e2e-testing"
    ]
  },
  {
    "title": "Cypress Mocking API Requests",
    "code": "describe('Mocking API', () => {\n  it('mocks API response', () => {\n    cy.intercept('GET', '/api/users', {\n      statusCode: 200,\n      body: [{ id: 1, name: 'Test User' }]\n    }).as('getUsers');\n    \n    cy.visit('/users');\n    cy.wait('@getUsers');\n    cy.contains('Test User').should('be.visible');\n  });\n});",
    "language": "javascript",
    "tags": [
      "cypress",
      "mocking",
      "api-testing"
    ]
  },
  {
    "title": "Playwright Testing File Upload",
    "code": "const { test } = require('@playwright/test');\n\ntest('file upload', async ({ page }) => {\n  await page.goto('https://example.com/upload');\n  await page.setInputFiles('input[type=\"file\"]', 'test-file.txt');\n  await page.click('#upload-button');\n  await expect(page.locator('.upload-success')).toBeVisible();\n});",
    "language": "javascript",
    "tags": [
      "playwright",
      "file-upload",
      "e2e-testing"
    ]
  },
  {
    "title": "Cucumber Hooks",
    "code": "const { Before, After } = require('@cucumber/cucumber');\nconst { chromium } = require('playwright');\n\nBefore(async function() {\n  this.browser = await chromium.launch();\n  this.page = await this.browser.newPage();\n});\n\nAfter(async function() {\n  await this.browser.close();\n});",
    "language": "javascript",
    "tags": [
      "cucumber",
      "hooks",
      "bdd"
    ]
  },
  {
    "title": "Robot Framework with SeleniumLibrary",
    "code": "*** Settings ***\nLibrary    SeleniumLibrary\n\n*** Test Cases ***\nLogin Test\n    Open Browser    https://example.com/login    chrome\n    Input Text    id=username    testuser\n    Input Text    id=password    password123\n    Click Button    id=login-btn\n    Wait Until Page Contains    Dashboard\n    Close Browser",
    "language": "robotframework",
    "tags": [
      "robot-framework",
      "selenium",
      "automation"
    ]
  },
  {
    "title": "Appium Touch Actions",
    "code": "const { TouchAction } = require('appium');\n\n// Perform swipe\nconst action = new TouchAction(driver);\naction.press({ x: 100, y: 500 })\n     .wait(1000)\n     .moveTo({ x: 100, y: 100 })\n     .release()\n     .perform();",
    "language": "javascript",
    "tags": [
      "appium",
      "mobile",
      "touch-actions"
    ]
  },
  {
    "title": "Espresso Intent Testing",
    "code": "@Test\nfun testIntent() {\n    val expectedIntent = allOf(\n        hasComponent(SecondActivity::class.java.name),\n        hasExtra(\"key\", \"value\")\n    );\n    \n    onView(withId(R.id.start_button)).perform(click());\n    intended(expectedIntent);\n}",
    "language": "kotlin",
    "tags": [
      "espresso",
      "android",
      "intent-testing"
    ]
  },
  {
    "title": "Jest Testing React Hooks",
    "code": "import { renderHook, act } from '@testing-library/react-hooks';\nimport useCounter from './useCounter';\n\ntest('should increment counter', () => {\n  const { result } = renderHook(() => useCounter());\n  \n  act(() => {\n    result.current.increment();\n  });\n  \n  expect(result.current.count).toBe(1);\n});",
    "language": "javascript",
    "tags": [
      "jest",
      "react-hooks",
      "unit-testing"
    ]
  },
  {
    "title": "Mocha Testing Error Cases",
    "code": "const assert = require('assert');\nconst api = require('./api');\n\ndescribe('API error handling', () => {\n  it('should throw error for invalid input', async () => {\n    await assert.rejects(\n      async () => await api.fetchData(null),\n      {\n        name: 'Error',\n        message: 'Invalid input'\n      }\n    );\n  });\n});",
    "language": "javascript",
    "tags": [
      "mocha",
      "error-handling",
      "unit-testing"
    ]
  },
  {
    "title": "Selenium Grid Configuration",
    "code": "const { Builder } = require('selenium-webdriver');\nconst { Options } = require('selenium-webdriver/chrome');\n\nconst gridUrl = 'http://grid-hub:4444/wd/hub';\nconst chromeOptions = new Options();\n\n(async function() {\n  let driver = await new Builder()\n    .forBrowser('chrome')\n    .setChromeOptions(chromeOptions)\n    .usingServer(gridUrl)\n    .build();\n  \n  // Test code here\n  \n  await driver.quit();\n})();",
    "language": "javascript",
    "tags": [
      "selenium",
      "grid",
      "distributed-testing"
    ]
  },
  {
    "title": "Cypress Component Testing",
    "code": "import { mount } from '@cypress/react';\nimport Button from './Button';\n\ndescribe('Button Component', () => {\n  it('renders with text', () => {\n    mount(<Button>Click me</Button>);\n    cy.contains('Click me').should('be.visible');\n  });\n});",
    "language": "javascript",
    "tags": [
      "cypress",
      "component-testing",
      "react"
    ]
  },
  {
    "title": "Playwright Testing Authentication",
    "code": "const { test } = require('@playwright/test');\n\ntest('authenticated test', async ({ browser }) => {\n  // Create a new context with saved cookies\n  const context = await browser.newContext({\n    storageState: 'auth-state.json'\n  });\n  const page = await context.newPage();\n  \n  await page.goto('https://example.com/dashboard');\n  // Test authenticated content\n});",
    "language": "javascript",
    "tags": [
      "playwright",
      "authentication",
      "e2e-testing"
    ]
  },
  {
    "title": "Cucumber Tags",
    "code": "@smoke\nFeature: Login functionality\n\n  @regression\n  Scenario: Successful login\n    Given I am on the login page\n    When I enter valid credentials\n    Then I should be logged in\n\n  @wip\n  Scenario: Failed login\n    Given I am on the login page\n    When I enter invalid credentials\n    Then I should see error message",
    "language": "gherkin",
    "tags": [
      "cucumber",
      "tags",
      "bdd"
    ]
  },
  {
    "title": "Robot Framework Custom Library",
    "code": "from robot.api.deco import keyword\n\nclass MyLibrary:\n    @keyword\n    def greet(self, name):\n        return f\"Hello, {name}!\"",
    "language": "python",
    "tags": [
      "robot-framework",
      "custom-library",
      "python"
    ]
  },
  {
    "title": "Appium Testing iOS App",
    "code": "const wd = require('webdriverio');\n\nconst iosCapabilities = {\n  platformName: 'iOS',\n  'appium:platformVersion': '15.0',\n  'appium:deviceName': 'iPhone 13',\n  'appium:app': 'path/to/app.app',\n  'appium:automationName': 'XCUITest'\n};\n\nasync function testIOSApp() {\n  const driver = await wd.remote(iosCapabilities);\n  \n  // Test code here\n  \n  await driver.deleteSession();\n}",
    "language": "javascript",
    "tags": [
      "appium",
      "ios",
      "mobile-testing"
    ]
  },
  {
    "title": "Espresso Testing RecyclerView",
    "code": "@Test\nfun testRecyclerViewItem() {\n    // Scroll to position\n    onView(withId(R.id.recycler_view))\n        .perform(RecyclerViewActions.scrollToPosition(10));\n    \n    // Click on item\n    onView(withId(R.id.recycler_view))\n        .perform(RecyclerViewActions.actionOnItemAtPosition(5, click()));\n}",
    "language": "kotlin",
    "tags": [
      "espresso",
      "android",
      "recyclerview"
    ]
  },
  {
    "title": "Jest Testing Timer Functions",
    "code": "jest.useFakeTimers();\n\ntest('timer test', () => {\n  const callback = jest.fn();\n  \n  setTimeout(callback, 1000);\n  \n  jest.advanceTimersByTime(1000);\n  \n  expect(callback).toHaveBeenCalled();\n});",
    "language": "javascript",
    "tags": [
      "jest",
      "timers",
      "unit-testing"
    ]
  },
  {
    "title": "Mocha Parallel Testing",
    "code": "const { parallel } = require('mocha-parallel-tests');\n\nparallel('Parallel tests', () => {\n  it('test 1', async () => {\n    // Test code\n  });\n  \n  it('test 2', async () => {\n    // Test code\n  });\n});",
    "language": "javascript",
    "tags": [
      "mocha",
      "parallel",
      "performance"
    ]
  },
  {
    "title": "Selenium Testing Multiple Windows",
    "code": "const { Builder, By } = require('selenium-webdriver');\n\n(async function() {\n  let driver = await new Builder().forBrowser('chrome').build();\n  try {\n    await driver.get('https://example.com');\n    \n    // Store original window handle\n    const originalWindow = await driver.getWindowHandle();\n    \n    // Click link that opens new window\n    await driver.findElement(By.linkText('Open new window')).click();\n    \n    // Wait for new window\n    await driver.wait(async () => (await driver.getAllWindowHandles()).length === 2, 5000);\n    \n    // Switch to new window\n    const windows = await driver.getAllWindowHandles();\n    windows.forEach(async handle => {\n      if (handle !== originalWindow) {\n        await driver.switchTo().window(handle);\n      }\n    });\n    \n    // Test new window\n    \n    // Close new window and switch back\n    await driver.close();\n    await driver.switchTo().window(originalWindow);\n  } finally {\n    await driver.quit();\n  }\n})();",
    "language": "javascript",
    "tags": [
      "selenium",
      "multiple-windows",
      "e2e-testing"
    ]
  },
  {
    "title": "Cypress Testing iframes",
    "code": "describe('iframe test', () => {\n  it('should interact with iframe', () => {\n    cy.visit('https://example.com');\n    \n    // Get iframe and interact with its content\n    cy.get('iframe').then(($iframe) => {\n      const $body = $iframe.contents().find('body');\n      \n      // Wrap the body to use Cypress commands\n      cy.wrap($body)\n        .find('#iframe-button')\n        .click();\n    });\n  });\n});",
    "language": "javascript",
    "tags": [
      "cypress",
      "iframe",
      "e2e-testing"
    ]
  },
  {
    "title": "Playwright Testing Network Requests",
    "code": "const { test, expect } = require('@playwright/test');\n\ntest('network request test', async ({ page }) => {\n  // Listen for network requests\n  const [response] = await Promise.all([\n    page.waitForResponse(response => \n      response.url().includes('/api/data') && response.status() === 200\n    ),\n    page.click('#load-data')\n  ]);\n  \n  // Assert on the response\n  expect(await response.json()).toHaveProperty('success', true);\n});",
    "language": "javascript",
    "tags": [
      "playwright",
      "network",
      "api-testing"
    ]
  },
  {
    "title": "Git Clone with SSH",
    "code": "git clone git@github.com:user/repo.git",
    "language": "bash",
    "tags": [
      "git",
      "ssh",
      "clone"
    ]
  },
  {
    "title": "Git Squash Commits",
    "code": "git rebase -i HEAD~3",
    "language": "bash",
    "tags": [
      "git",
      "squash",
      "rebase"
    ]
  },
  {
    "title": "Git Stash Changes",
    "code": "git stash save \"Work in progress\"\ngit stash list\ngit stash apply stash@{0}",
    "language": "bash",
    "tags": [
      "git",
      "stash"
    ]
  },
  {
    "title": "Git Revert a Commit",
    "code": "git revert <commit-hash>",
    "language": "bash",
    "tags": [
      "git",
      "revert"
    ]
  },
  {
    "title": "Git Change Remote URL",
    "code": "git remote set-url origin <new-url>",
    "language": "bash",
    "tags": [
      "git",
      "remote"
    ]
  },
  {
    "title": "Git Submodule Update",
    "code": "git submodule update --init --recursive",
    "language": "bash",
    "tags": [
      "git",
      "submodule"
    ]
  },
  {
    "title": "Git Bisect for Bug Hunting",
    "code": "git bisect start\ngit bisect bad\ngit bisect good <commit-hash>",
    "language": "bash",
    "tags": [
      "git",
      "debugging"
    ]
  },
  {
    "title": "Git Hooks Pre-commit",
    "code": "#!/bin/sh\n# Add to .git/hooks/pre-commit\necho \"Running tests...\"\nnpm test",
    "language": "bash",
    "tags": [
      "git",
      "hooks"
    ]
  },
  {
    "title": "GitHub PR via CLI",
    "code": "gh pr create --title \"Feature X\" --body \"Description\" --base main --head feature-x",
    "language": "bash",
    "tags": [
      "github",
      "cli"
    ]
  },
  {
    "title": "GitHub Action CI Pipeline",
    "code": "name: CI\non: [push]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - run: npm install\n    - run: npm test",
    "language": "yaml",
    "tags": [
      "github",
      "actions",
      "ci"
    ]
  },
  {
    "title": "GitLab Merge Request Template",
    "code": "## Description\n\n## Related Issues\n\n## Checklist\n- [ ] Tests added\n- [ ] Documentation updated",
    "language": "markdown",
    "tags": [
      "gitlab",
      "mr"
    ]
  },
  {
    "title": "GitHub Issue via CLI",
    "code": "gh issue create --title \"Bug Report\" --body \"Steps to reproduce...\" --label bug",
    "language": "bash",
    "tags": [
      "github",
      "cli"
    ]
  },
  {
    "title": "GitHub Protected Branches",
    "code": "gh api repos/:owner/:repo/branches/main/protection -X PUT \\\n  -H \"Accept: application/vnd.github.luke-cage-preview+json\" \\\n  -F \"required_status_checks=null\" \\\n  -F \"enforce_admins=true\" \\\n  -F \"required_pull_request_reviews[required_approving_review_count]=1\"",
    "language": "bash",
    "tags": [
      "github",
      "security"
    ]
  },
  {
    "title": "GitHub Secrets via CLI",
    "code": "gh secret set API_KEY --body \"12345\" --repo owner/repo",
    "language": "bash",
    "tags": [
      "github",
      "secrets"
    ]
  },
  {
    "title": "GitHub Self-hosted Runner",
    "code": "mkdir actions-runner && cd actions-runner\ncurl -o actions-runner-linux-x64-2.285.1.tar.gz -L https://github.com/actions/runner/releases/download/v2.285.1/actions-runner-linux-x64-2.285.1.tar.gz\ntar xzf ./actions-runner-linux-x64-2.285.1.tar.gz\n./config.sh --url https://github.com/owner/repo --token ABC123\n./run.sh",
    "language": "bash",
    "tags": [
      "github",
      "actions",
      "runner"
    ]
  },
  {
    "title": "GitLab CI/CD Pipeline",
    "code": "stages:\n  - build\n  - test\n  - deploy\n\nbuild_job:\n  stage: build\n  script:\n    - echo \"Building...\"\n\ntest_job:\n  stage: test\n  script:\n    - echo \"Testing...\"",
    "language": "yaml",
    "tags": [
      "gitlab",
      "ci"
    ]
  },
  {
    "title": "GitHub Pages Deployment",
    "code": "name: Deploy\non:\n  push:\n    branches: [ main ]\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - run: npm install && npm run build\n      - uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./dist",
    "language": "yaml",
    "tags": [
      "github",
      "pages"
    ]
  },
  {
    "title": "GitHub Dependabot Config",
    "code": "version: 2\nupdates:\n  - package-ecosystem: \"npm\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"",
    "language": "yaml",
    "tags": [
      "github",
      "dependabot"
    ]
  },
  {
    "title": "Git Large File Storage (LFS)",
    "code": "git lfs install\ngit lfs track \"*.psd\"\ngit add .gitattributes",
    "language": "bash",
    "tags": [
      "git",
      "lfs"
    ]
  },
  {
    "title": "Git Worktree",
    "code": "git worktree add ../feature-branch feature/branch-name",
    "language": "bash",
    "tags": [
      "git",
      "worktree"
    ]
  },
  {
    "title": "GitHub Code Scanning",
    "code": "name: CodeQL Analysis\non: [push, pull_request]\njobs:\n  analyze:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v1\n    - run: npm install\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v1",
    "language": "yaml",
    "tags": [
      "github",
      "security"
    ]
  },
  {
    "title": "GitHub Branch Protection Rules",
    "code": "gh api repos/:owner/:repo/branches/main/protection \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.luke-cage-preview+json\" \\\n  -F \"required_status_checks[strict]=true\" \\\n  -F \"required_status_checks[contexts][]=ci-build\" \\\n  -F \"enforce_admins=true\" \\\n  -F \"required_pull_request_reviews[required_approving_review_count]=1\"",
    "language": "bash",
    "tags": [
      "github",
      "security"
    ]
  },
  {
    "title": "GitHub Releases via CLI",
    "code": "gh release create v1.0.0 --title \"Version 1.0.0\" --notes \"Initial release\" --target main",
    "language": "bash",
    "tags": [
      "github",
      "releases"
    ]
  },
  {
    "title": "GitLab Merge Request Approval",
    "code": "curl --request POST \\\n  --header \"PRIVATE-TOKEN: <your_access_token>\" \\\n  \"https://gitlab.example.com/api/v4/projects/1/merge_requests/1/approve\"",
    "language": "bash",
    "tags": [
      "gitlab",
      "mr"
    ]
  },
  {
    "title": "GitHub Team Management",
    "code": "gh api orgs/:org/teams -F \"name=developers\" -F \"privacy=closed\" \\\n  -F \"permission=push\" -F \"repo_names[]=owner/repo\"",
    "language": "bash",
    "tags": [
      "github",
      "teams"
    ]
  },
  {
    "title": "GitHub Repository Creation",
    "code": "gh repo create project-name --private --clone --description \"New project\"",
    "language": "bash",
    "tags": [
      "github",
      "repo"
    ]
  },
  {
    "title": "GitHub Issue Template",
    "code": "name: Bug Report\ndescription: File a bug report\nbody:\n  - type: textarea\n    attributes:\n      label: Description\n      description: What happened?\n  - type: textarea\n    attributes:\n      label: Steps to Reproduce",
    "language": "yaml",
    "tags": [
      "github",
      "templates"
    ]
  },
  {
    "title": "GitHub SSH Key Setup",
    "code": "ssh-keygen -t ed25519 -C \"your_email@example.com\"\neval \"$(ssh-agent -s)\"\nssh-add ~/.ssh/id_ed25519\ncat ~/.ssh/id_ed25519.pub # Add to GitHub SSH keys",
    "language": "bash",
    "tags": [
      "github",
      "ssh"
    ]
  },
  {
    "title": "GitHub Actions Caching",
    "code": "steps:\n- uses: actions/cache@v2\n  with:\n    path: ~/.npm\n    key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n    restore-keys: |\n      ${{ runner.os }}-node-",
    "language": "yaml",
    "tags": [
      "github",
      "actions",
      "cache"
    ]
  },
  {
    "title": "GitHub Environment Secrets",
    "code": "jobs:\n  deploy:\n    runs-on: ubuntu-latest\n    environment: production\n    steps:\n    - run: echo \"Deploying with ${{ secrets.API_KEY }}\"",
    "language": "yaml",
    "tags": [
      "github",
      "secrets"
    ]
  },
  {
    "title": "GitHub Workflow Dispatch",
    "code": "on:\n  workflow_dispatch:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        default: 'staging'",
    "language": "yaml",
    "tags": [
      "github",
      "actions"
    ]
  },
  {
    "title": "GitHub Container Registry",
    "code": "name: Build and Push Docker\non: [push]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - run: docker build -t ghcr.io/owner/image:latest .\n      - run: echo \"${{ secrets.GITHUB_TOKEN }}\" | docker login ghcr.io -u ${{ github.actor }} --password-stdin\n      - run: docker push ghcr.io/owner/image:latest",
    "language": "yaml",
    "tags": [
      "github",
      "docker"
    ]
  },
  {
    "title": "GitHub Matrix Strategy",
    "code": "jobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [12.x, 14.x, 16.x]\n    steps:\n    - uses: actions/checkout@v2\n    - uses: actions/setup-node@v2\n      with:\n        node-version: ${{ matrix.node-version }}\n    - run: npm test",
    "language": "yaml",
    "tags": [
      "github",
      "actions"
    ]
  },
  {
    "title": "GitHub Action with AWS",
    "code": "jobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - uses: aws-actions/configure-aws-credentials@v1\n      with:\n        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n        aws-region: us-east-1\n    - run: aws s3 sync ./dist s3://my-bucket",
    "language": "yaml",
    "tags": [
      "github",
      "aws"
    ]
  },
  {
    "title": "GitHub Action Slack Notification",
    "code": "jobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - run: npm test\n    - uses: rtCamp/action-slack-notify@v2\n      if: failure()\n      env:\n        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}\n        SLACK_COLOR: danger\n        SLACK_TITLE: Build Failed\n        SLACK_MESSAGE: \"Tests failed in ${{ github.workflow }}\"",
    "language": "yaml",
    "tags": [
      "github",
      "slack"
    ]
  },
  {
    "title": "GitHub Jira Integration",
    "code": "name: Jira Comment\non:\n  issue_comment:\n    types: [created]\njobs:\n  comment:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: atlassian/gajira-comment@v2\n      with:\n        jira_base_url: ${{ secrets.JIRA_BASE_URL }}\n        jira_user_email: ${{ secrets.JIRA_USER_EMAIL }}\n        jira_api_token: ${{ secrets.JIRA_API_TOKEN }}\n        issue_id: ${{ github.event.issue.title }}\n        comment: ${{ github.event.comment.body }}",
    "language": "yaml",
    "tags": [
      "github",
      "jira"
    ]
  },
  {
    "title": "GitHub Action with Vercel",
    "code": "jobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - uses: amondnet/vercel-action@v20\n      with:\n        vercel-token: ${{ secrets.VERCEL_TOKEN }}\n        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}\n        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}\n        vercel-args: \"--prod\"",
    "language": "yaml",
    "tags": [
      "github",
      "vercel"
    ]
  },
  {
    "title": "GitHub Action Auto-merge",
    "code": "jobs:\n  auto-merge:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: pascalgn/automerge-action@v0.14.0\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}",
    "language": "yaml",
    "tags": [
      "github",
      "actions"
    ]
  },
  {
    "title": "GitHub Action Dependency Review",
    "code": "name: Dependency Review\non: [pull_request]\njobs:\n  dependency-review:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - uses: actions/dependency-review-action@v1",
    "language": "yaml",
    "tags": [
      "github",
      "security"
    ]
  },
  {
    "title": "GitHub Action Code Format Check",
    "code": "jobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - uses: actions/setup-node@v2\n    - run: npm install\n    - run: npm run prettier-check",
    "language": "yaml",
    "tags": [
      "github",
      "actions"
    ]
  },
  {
    "title": "GitHub Action Automated Testing",
    "code": "jobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - uses: actions/setup-node@v2\n      with:\n        node-version: '16'\n    - run: npm ci\n    - run: npm test\n    - uses: actions/upload-artifact@v2\n      if: failure()\n      with:\n        name: test-results\n        path: test-results.xml",
    "language": "yaml",
    "tags": [
      "github",
      "actions"
    ]
  },
  {
    "title": "GitHub Action Scheduled Job",
    "code": "on:\n  schedule:\n    - cron: '0 0 * * *'\njobs:\n  backup:\n    runs-on: ubuntu-latest\n    steps:\n    - run: echo \"Daily backup completed\"",
    "language": "yaml",
    "tags": [
      "github",
      "actions"
    ]
  },
  {
    "title": "GitHub Action Multi-container",
    "code": "jobs:\n  test:\n    runs-on: ubuntu-latest\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n    steps:\n    - uses: actions/checkout@v2\n    - run: npm test",
    "language": "yaml",
    "tags": [
      "github",
      "actions"
    ]
  },
  {
    "title": "GitHub Action with Terraform",
    "code": "jobs:\n  terraform:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - uses: hashicorp/setup-terraform@v1\n    - run: terraform init\n    - run: terraform plan",
    "language": "yaml",
    "tags": [
      "github",
      "terraform"
    ]
  },
  {
    "title": "GitHub Action with Kubernetes",
    "code": "jobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - uses: azure/setup-kubectl@v1\n    - run: kubectl apply -f k8s/deployment.yaml\n      env:\n        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}",
    "language": "yaml",
    "tags": [
      "github",
      "kubernetes"
    ]
  },
  {
    "title": "GitHub Action for Code Coverage",
    "code": "jobs:\n  coverage:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - run: npm test -- --coverage\n    - uses: codecov/codecov-action@v1\n      with:\n        token: ${{ secrets.CODECOV_TOKEN }}",
    "language": "yaml",
    "tags": [
      "github",
      "actions"
    ]
  },
  {
    "title": "GitHub Action for Docker Compose",
    "code": "jobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - run: docker-compose up -d\n    - run: docker-compose exec app npm test",
    "language": "yaml",
    "tags": [
      "github",
      "docker"
    ]
  },
  {
    "title": "GitHub Action for SSH Commands",
    "code": "jobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - uses: appleboy/ssh-action@master\n      with:\n        host: ${{ secrets.SSH_HOST }}\n        username: ${{ secrets.SSH_USERNAME }}\n        key: ${{ secrets.SSH_KEY }}\n        script: |\n          cd /var/www\n          git pull",
    "language": "yaml",
    "tags": [
      "github",
      "ssh"
    ]
  },
  {
    "title": "GitHub Action for Android Build",
    "code": "jobs:\n  build:\n    runs-on: macos-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up JDK\n      uses: actions/setup-java@v1\n      with:\n        java-version: '11'\n    - name: Build with Gradle\n      run: ./gradlew build",
    "language": "yaml",
    "tags": [
      "github",
      "android"
    ]
  },
  {
    "title": "GitHub Action for iOS Build",
    "code": "jobs:\n  build:\n    runs-on: macos-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Install dependencies\n      run: pod install\n    - name: Build workspace\n      run: xcodebuild -workspace App.xcworkspace -scheme App -destination 'platform=iOS Simulator,name=iPhone 12'",
    "language": "yaml",
    "tags": [
      "github",
      "ios"
    ]
  },
  {
    "title": "PyTorch Neural Network",
    "code": "import torch\nimport torch.nn as nn\n\nclass Net(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.fc1 = nn.Linear(784, 128)\n        self.fc2 = nn.Linear(128, 10)\n        \n    def forward(self, x):\n        x = torch.flatten(x, 1)\n        x = torch.relu(self.fc1(x))\n        x = self.fc2(x)\n        return x\n\nmodel = Net()",
    "language": "python",
    "tags": [
      "pytorch",
      "neural-network",
      "deep-learning"
    ]
  },
  {
    "title": "TensorFlow Keras Model",
    "code": "from tensorflow.keras import layers, models\n\nmodel = models.Sequential([\n    layers.Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)),\n    layers.MaxPooling2D((2,2)),\n    layers.Flatten(),\n    layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])",
    "language": "python",
    "tags": [
      "tensorflow",
      "keras",
      "cnn"
    ]
  },
  {
    "title": "Scikit-learn Random Forest",
    "code": "from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\n\nX, y = load_iris(return_X_y=True)\nX_train, X_test, y_train, y_test = train_test_split(X, y)\n\nclf = RandomForestClassifier(n_estimators=100)\nclf.fit(X_train, y_train)\nprint(f\"Accuracy: {clf.score(X_test, y_test)}\")",
    "language": "python",
    "tags": [
      "scikit-learn",
      "random-forest",
      "classification"
    ]
  },
  {
    "title": "XGBoost Classifier",
    "code": "import xgboost as xgb\nfrom sklearn.datasets import load_breast_cancer\n\nX, y = load_breast_cancer(return_X_y=True)\n\ndtrain = xgb.DMatrix(X, label=y)\nparams = {\n    'objective': 'binary:logistic',\n    'max_depth': 4,\n    'eta': 0.1\n}\n\nmodel = xgb.train(params, dtrain, num_boost_round=100)",
    "language": "python",
    "tags": [
      "xgboost",
      "gradient-boosting",
      "classification"
    ]
  },
  {
    "title": "LightGBM Classifier",
    "code": "import lightgbm as lgb\nfrom sklearn.datasets import load_breast_cancer\n\nX, y = load_breast_cancer(return_X_y=True)\n\ntrain_data = lgb.Dataset(X, label=y)\nparams = {\n    'objective': 'binary',\n    'metric': 'binary_logloss',\n    'num_leaves': 31\n}\n\nmodel = lgb.train(params, train_data, num_boost_round=100)",
    "language": "python",
    "tags": [
      "lightgbm",
      "gradient-boosting",
      "classification"
    ]
  },
  {
    "title": "Transformer Model (Hugging Face)",
    "code": "from transformers import AutoTokenizer, AutoModel\n\ntokenizer = AutoTokenizer.from_pretrained(\"bert-base-uncased\")\nmodel = AutoModel.from_pretrained(\"bert-base-uncased\")\n\ninputs = tokenizer(\"Hello world!\", return_tensors=\"pt\")\noutputs = model(**inputs)",
    "language": "python",
    "tags": [
      "transformers",
      "nlp",
      "huggingface"
    ]
  },
  {
    "title": "Text Classification with BERT",
    "code": "from transformers import BertTokenizer, BertForSequenceClassification\nimport torch\n\ntokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\nmodel = BertForSequenceClassification.from_pretrained('bert-base-uncased')\n\ninputs = tokenizer(\"This movie was great!\", return_tensors=\"pt\")\nlabels = torch.tensor([1]).unsqueeze(0)\noutputs = model(**inputs, labels=labels)",
    "language": "python",
    "tags": [
      "bert",
      "nlp",
      "text-classification"
    ]
  },
  {
    "title": "GPT-2 Text Generation",
    "code": "from transformers import GPT2LMHeadModel, GPT2Tokenizer\n\ntokenizer = GPT2Tokenizer.from_pretrained(\"gpt2\")\nmodel = GPT2LMHeadModel.from_pretrained(\"gpt2\")\n\ninput_text = \"The future of AI is\"\ninput_ids = tokenizer.encode(input_text, return_tensors=\"pt\")\n\noutput = model.generate(input_ids, max_length=50, num_return_sequences=1)\nprint(tokenizer.decode(output[0], skip_special_tokens=True))",
    "language": "python",
    "tags": [
      "gpt",
      "text-generation",
      "nlp"
    ]
  },
  {
    "title": "Stable Diffusion Image Generation",
    "code": "from diffusers import StableDiffusionPipeline\nimport torch\n\npipe = StableDiffusionPipeline.from_pretrained(\n    \"CompVis/stable-diffusion-v1-4\", \n    torch_dtype=torch.float16\n).to(\"cuda\")\n\nprompt = \"a photo of an astronaut riding a horse on mars\"\nimage = pipe(prompt).images[0]\nimage.save(\"astronaut_rides_horse.png\")",
    "language": "python",
    "tags": [
      "stable-diffusion",
      "image-generation",
      "ai-art"
    ]
  },
  {
    "title": "OpenAI API Completion",
    "code": "import openai\n\nresponse = openai.ChatCompletion.create(\n  model=\"gpt-4\",\n  messages=[\n    {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n    {\"role\": \"user\", \"content\": \"Explain AI in simple terms\"}\n  ]\n)\n\nprint(response.choices[0].message.content)",
    "language": "python",
    "tags": [
      "openai",
      "gpt",
      "chatbot"
    ]
  },
  {
    "title": "LangChain Basic Chain",
    "code": "from langchain.llms import OpenAI\nfrom langchain.prompts import PromptTemplate\n\nllm = OpenAI(temperature=0.9)\n\ntemplate = \"What is a good name for a company that makes {product}?\"\nprompt = PromptTemplate(\n    input_variables=[\"product\"],\n    template=template\n)\n\nprint(llm(prompt.format(product=\"colorful socks\")))",
    "language": "python",
    "tags": [
      "langchain",
      "llm",
      "prompt-engineering"
    ]
  },
  {
    "title": "Llama 2 Local Inference",
    "code": "from transformers import AutoTokenizer, AutoModelForCausalLM\nimport torch\n\nmodel_id = \"meta-llama/Llama-2-7b-chat-hf\"\ntokenizer = AutoTokenizer.from_pretrained(model_id)\nmodel = AutoModelForCausalLM.from_pretrained(model_id, device_map=\"auto\")\n\ninputs = tokenizer(\"Hello, how are you?\", return_tensors=\"pt\").to(\"cuda\")\noutput = model.generate(**inputs, max_new_tokens=50)\nprint(tokenizer.decode(output[0], skip_special_tokens=True))",
    "language": "python",
    "tags": [
      "llama",
      "llm",
      "local-ai"
    ]
  },
  {
    "title": "Feature Scaling with Scikit-learn",
    "code": "from sklearn.preprocessing import StandardScaler\nimport numpy as np\n\nX = np.array([[1, 2], [3, 4], [5, 6]])\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)",
    "language": "python",
    "tags": [
      "scikit-learn",
      "preprocessing",
      "feature-engineering"
    ]
  },
  {
    "title": "PCA Dimensionality Reduction",
    "code": "from sklearn.decomposition import PCA\nfrom sklearn.datasets import load_iris\n\nX, y = load_iris(return_X_y=True)\npca = PCA(n_components=2)\nX_pca = pca.fit_transform(X)",
    "language": "python",
    "tags": [
      "pca",
      "dimensionality-reduction",
      "scikit-learn"
    ]
  },
  {
    "title": "K-Means Clustering",
    "code": "from sklearn.cluster import KMeans\nfrom sklearn.datasets import make_blobs\n\nX, _ = make_blobs(n_samples=300, centers=4)\nkmeans = KMeans(n_clusters=4)\nkmeans.fit(X)\nlabels = kmeans.predict(X)",
    "language": "python",
    "tags": [
      "k-means",
      "clustering",
      "unsupervised-learning"
    ]
  },
  {
    "title": "Neural Network with Keras Tuner",
    "code": "from tensorflow import keras\nfrom kerastuner.tuners import RandomSearch\n\ndef build_model(hp):\n    model = keras.Sequential()\n    model.add(keras.layers.Dense(\n        units=hp.Int('units', min_value=32, max_value=512, step=32),\n        activation='relu'))\n    model.add(keras.layers.Dense(10, activation='softmax'))\n    model.compile(\n        optimizer=keras.optimizers.Adam(\n            hp.Choice('learning_rate', [1e-2, 1e-3, 1e-4])),\n        loss='sparse_categorical_crossentropy',\n        metrics=['accuracy'])\n    return model\n\ntuner = RandomSearch(\n    build_model,\n    objective='val_accuracy',\n    max_trials=5,\n    directory='my_dir')",
    "language": "python",
    "tags": [
      "keras",
      "hyperparameter-tuning",
      "neural-network"
    ]
  },
  {
    "title": "Image Augmentation with TensorFlow",
    "code": "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ndatagen = ImageDataGenerator(\n    rotation_range=40,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    fill_mode='nearest')\n\n# Use with model.fit:\n# model.fit(datagen.flow(X_train, y_train, batch_size=32), ...)",
    "language": "python",
    "tags": [
      "tensorflow",
      "image-augmentation",
      "computer-vision"
    ]
  },
  {
    "title": "Transfer Learning with ResNet",
    "code": "from tensorflow.keras.applications import ResNet50\nfrom tensorflow.keras import layers, models\n\nbase_model = ResNet50(weights='imagenet', include_top=False)\n\n# Freeze base model\nbase_model.trainable = False\n\n# Add custom head\nmodel = models.Sequential([\n    base_model,\n    layers.GlobalAveragePooling2D(),\n    layers.Dense(256, activation='relu'),\n    layers.Dense(10, activation='softmax')\n])",
    "language": "python",
    "tags": [
      "transfer-learning",
      "resnet",
      "computer-vision"
    ]
  },
  {
    "title": "Object Detection with YOLOv8",
    "code": "from ultralytics import YOLO\n\n# Load pretrained model\nmodel = YOLO('yolov8n.pt')\n\n# Run inference\nresults = model('image.jpg')\n\n# Show results\nresults[0].show()",
    "language": "python",
    "tags": [
      "yolo",
      "object-detection",
      "computer-vision"
    ]
  },
  {
    "title": "Time Series Forecasting with LSTM",
    "code": "from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import LSTM, Dense\nimport numpy as np\n\n# Prepare data (example)\nX = np.random.rand(100, 10, 1)  # 100 samples, 10 timesteps, 1 feature\ny = np.random.rand(100, 1)\n\n# Build model\nmodel = Sequential([\n    LSTM(50, activation='relu', input_shape=(10, 1)),\n    Dense(1)\n])\nmodel.compile(optimizer='adam', loss='mse')\nmodel.fit(X, y, epochs=10)",
    "language": "python",
    "tags": [
      "lstm",
      "time-series",
      "forecasting"
    ]
  },
  {
    "title": "Reinforcement Learning with Q-Learning",
    "code": "import numpy as np\n\n# Initialize Q-table\nq_table = np.zeros((state_size, action_size))\n\n# Q-learning parameters\nalpha = 0.1  # learning rate\ngamma = 0.6  # discount factor\nepsilon = 0.1  # exploration rate\n\n# In training loop:\nif np.random.uniform(0, 1) < epsilon:\n    action = env.action_space.sample()  # Explore\nelse:\n    action = np.argmax(q_table[state])  # Exploit\n\n# Update Q-value\nq_table[state, action] = (1 - alpha) * q_table[state, action] + \\\n    alpha * (reward + gamma * np.max(q_table[new_state]))",
    "language": "python",
    "tags": [
      "reinforcement-learning",
      "q-learning",
      "rl"
    ]
  },
  {
    "title": "MLflow Experiment Tracking",
    "code": "import mlflow\nfrom sklearn.ensemble import RandomForestClassifier\n\nmlflow.set_tracking_uri(\"http://localhost:5000\")\nmlflow.set_experiment(\"my_experiment\")\n\nwith mlflow.start_run():\n    clf = RandomForestClassifier(n_estimators=100)\n    clf.fit(X_train, y_train)\n    \n    # Log parameters and metrics\n    mlflow.log_param(\"n_estimators\", 100)\n    mlflow.log_metric(\"accuracy\", clf.score(X_test, y_test))\n    \n    # Log model\n    mlflow.sklearn.log_model(clf, \"random_forest_model\")",
    "language": "python",
    "tags": [
      "mlflow",
      "experiment-tracking",
      "mlops"
    ]
  },
  {
    "title": "Feature Importance with SHAP",
    "code": "import shap\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Train model\nmodel = RandomForestClassifier().fit(X_train, y_train)\n\n# Explain predictions\nexplainer = shap.TreeExplainer(model)\nshap_values = explainer.shap_values(X_test)\n\n# Plot feature importance\nshap.summary_plot(shap_values, X_test)",
    "language": "python",
    "tags": [
      "shap",
      "interpretability",
      "feature-importance"
    ]
  },
  {
    "title": "Hyperparameter Tuning with Optuna",
    "code": "import optuna\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\ndef objective(trial):\n    n_estimators = trial.suggest_int('n_estimators', 10, 200)\n    max_depth = trial.suggest_int('max_depth', 2, 32)\n    \n    model = RandomForestClassifier(\n        n_estimators=n_estimators,\n        max_depth=max_depth\n    )\n    model.fit(X_train, y_train)\n    return accuracy_score(y_test, model.predict(X_test))\n\nstudy = optuna.create_study(direction='maximize')\nstudy.optimize(objective, n_trials=100)",
    "language": "python",
    "tags": [
      "optuna",
      "hyperparameter-tuning",
      "optimization"
    ]
  },
  {
    "title": "Ray Tune Distributed Training",
    "code": "from ray import tune\nfrom ray.tune.schedulers import ASHAScheduler\n\ndef train_model(config):\n    # Model training logic\n    accuracy = ...  # Your metric\n    tune.report(accuracy=accuracy)\n\nanalysis = tune.run(\n    train_model,\n    config={\n        \"lr\": tune.loguniform(1e-4, 1e-1),\n        \"batch_size\": tune.choice([32, 64, 128])\n    },\n    scheduler=ASHAScheduler(metric=\"accuracy\", mode=\"max\"),\n    num_samples=10,\n    resources_per_trial={\"cpu\": 2, \"gpu\": 0.5}\n)",
    "language": "python",
    "tags": [
      "ray",
      "distributed",
      "hyperparameter-tuning"
    ]
  },
  {
    "title": "ONNX Model Export",
    "code": "import torch\nimport torchvision.models as models\nimport onnx\n\n# Load pretrained model\nmodel = models.resnet18(pretrained=True)\nmodel.eval()\n\n# Create dummy input\ndummy_input = torch.randn(1, 3, 224, 224)\n\n# Export model\ntorch.onnx.export(\n    model,\n    dummy_input,\n    \"resnet18.onnx\",\n    input_names=[\"input\"],\n    output_names=[\"output\"],\n    dynamic_axes={\"input\": {0: \"batch_size\"}, \"output\": {0: \"batch_size\"}}\n)",
    "language": "python",
    "tags": [
      "onnx",
      "model-export",
      "interoperability"
    ]
  },
  {
    "title": "TensorRT Optimization",
    "code": "import tensorrt as trt\n\n# Create logger and builder\nlogger = trt.Logger(trt.Logger.INFO)\nbuilder = trt.Builder(logger)\n\n# Create network\nnetwork = builder.create_network(1 << int(trt.NetworkDefinitionCreationFlag.EXPLICIT_BATCH))\nparser = trt.OnnxParser(network, logger)\n\n# Parse ONNX model\nwith open(\"model.onnx\", \"rb\") as f:\n    parser.parse(f.read())\n\n# Build engine\nconfig = builder.create_builder_config()\nconfig.set_memory_pool_limit(trt.MemoryPoolType.WORKSPACE, 1 << 30)  # 1GB\nserialized_engine = builder.build_serialized_network(network, config)\n\n# Save engine\nwith open(\"engine.trt\", \"wb\") as f:\n    f.write(serialized_engine)",
    "language": "python",
    "tags": [
      "tensorrt",
      "optimization",
      "inference"
    ]
  },
  {
    "title": "FastAPI ML Model Serving",
    "code": "from fastapi import FastAPI\nimport joblib\n\napp = FastAPI()\n\n# Load model\nmodel = joblib.load(\"model.pkl\")\n\n@app.post(\"/predict\")\nasync def predict(data: dict):\n    features = preprocess(data[\"features\"])\n    prediction = model.predict([features])\n    return {\"prediction\": prediction.tolist()}",
    "language": "python",
    "tags": [
      "fastapi",
      "model-serving",
      "mlops"
    ]
  },
  {
    "title": "ML Model Monitoring with Evidently",
    "code": "from evidently import ColumnMapping\nfrom evidently.report import Report\nfrom evidently.metrics import DataDriftTable\n\n# Prepare data\ncurrent_data = ...\nreference_data = ...\n\ncolumn_mapping = ColumnMapping(\n    numerical_features=['age', 'income'],\n    categorical_features=['education', 'city']\n)\n\n# Generate report\ndata_drift_report = Report(metrics=[DataDriftTable()])\ndata_drift_report.run(\n    current_data=current_data,\n    reference_data=reference_data,\n    column_mapping=column_mapping\n)\n\ndata_drift_report.save_html(\"data_drift.html\")",
    "language": "python",
    "tags": [
      "evidently",
      "monitoring",
      "data-drift"
    ]
  },
  {
    "title": "Feature Store with Feast",
    "code": "from feast import FeatureStore\n\n# Initialize feature store\nfs = FeatureStore(repo_path=\"./feature_repo\")\n\n# Get online features\nfeatures = fs.get_online_features(\n    entity_rows=[{\"user_id\": 1001}],\n    features=[\n        \"user_transactions:total_spend\",\n        \"user_transactions:avg_spend\"\n    ]\n).to_dict()",
    "language": "python",
    "tags": [
      "feast",
      "feature-store",
      "mlops"
    ]
  },
  {
    "title": "DVC Pipeline Example",
    "code": "# dvc.yaml\nstages:\n  prepare:\n    cmd: python src/prepare.py data/raw data/prepared\n    deps:\n      - src/prepare.py\n      - data/raw\n    outs:\n      - data/prepared\n  \n  train:\n    cmd: python src/train.py data/prepared model.pkl\n    deps:\n      - src/train.py\n      - data/prepared\n    outs:\n      - model.pkl\n    metrics:\n      - metrics.json",
    "language": "yaml",
    "tags": [
      "dvc",
      "data-versioning",
      "mlops"
    ]
  },
  {
    "title": "Kubeflow Pipeline Component",
    "code": "from kfp import dsl\n\n@dsl.component\ndef preprocess_data(\n    input_path: str,\n    output_path: str\n):\n    # Data preprocessing logic\n    ...\n\n@dsl.pipeline(name=\"ml-pipeline\")\ndef my_pipeline(data_path: str):\n    preprocess_task = preprocess_data(\n        input_path=data_path,\n        output_path=\"/data/preprocessed\"\n    )\n    # Add more components...",
    "language": "python",
    "tags": [
      "kubeflow",
      "pipelines",
      "mlops"
    ]
  },
  {
    "title": "Graph Neural Network with PyTorch Geometric",
    "code": "import torch\nimport torch.nn.functional as F\nfrom torch_geometric.nn import GCNConv\n\nclass GCN(torch.nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = GCNConv(dataset.num_features, 16)\n        self.conv2 = GCNConv(16, dataset.num_classes)\n\n    def forward(self, data):\n        x, edge_index = data.x, data.edge_index\n        x = self.conv1(x, edge_index)\n        x = F.relu(x)\n        x = F.dropout(x, training=self.training)\n        x = self.conv2(x, edge_index)\n        return F.log_softmax(x, dim=1)",
    "language": "python",
    "tags": [
      "gnn",
      "pytorch",
      "graph-neural-networks"
    ]
  },
  {
    "title": "AutoML with AutoGluon",
    "code": "from autogluon.tabular import TabularPredictor\n\n# Load data\ntrain_data = ...\n\n# Train model\npredictor = TabularPredictor(label=\"target\").fit(train_data)\n\n# Make predictions\ny_pred = predictor.predict(test_data)",
    "language": "python",
    "tags": [
      "automl",
      "autogluon",
      "tabular"
    ]
  },
  {
    "title": "Hugging Face Pipeline",
    "code": "from transformers import pipeline\n\n# Text classification\nclassifier = pipeline(\"text-classification\")\nresult = classifier(\"I love using transformers!\")\n\n# Question answering\nqa_pipeline = pipeline(\"question-answering\")\nanswer = qa_pipeline(\n    question=\"What is the capital of France?\",\n    context=\"Paris is the capital of France.\"\n)",
    "language": "python",
    "tags": [
      "huggingface",
      "nlp",
      "transformers"
    ]
  },
  {
    "title": "Sentence Embeddings with Sentence Transformers",
    "code": "from sentence_transformers import SentenceTransformer\n\nmodel = SentenceTransformer('all-MiniLM-L6-v2')\n\nsentences = [\"This is an example sentence\", \"Each sentence is converted\"]\nembeddings = model.encode(sentences)\n\n# Compute similarity\nfrom sklearn.metrics.pairwise import cosine_similarity\nsimilarity = cosine_similarity([embeddings[0]], [embeddings[1]])",
    "language": "python",
    "tags": [
      "embeddings",
      "nlp",
      "sentence-transformers"
    ]
  },
  {
    "title": "LangChain with Vector Stores",
    "code": "from langchain.embeddings import OpenAIEmbeddings\nfrom langchain.vectorstores import FAISS\nfrom langchain.text_splitter import CharacterTextSplitter\n\n# Load and split documents\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocuments = text_splitter.split_documents(docs)\n\n# Create vector store\nembeddings = OpenAIEmbeddings()\ndb = FAISS.from_documents(documents, embeddings)\n\n# Similarity search\nquery = \"What is AI?\"\ndocs = db.similarity_search(query)",
    "language": "python",
    "tags": [
      "langchain",
      "vector-database",
      "rag"
    ]
  },
  {
    "title": "LLM Fine-tuning with LoRA",
    "code": "from peft import LoraConfig, get_peft_model\nfrom transformers import AutoModelForCausalLM\n\nmodel = AutoModelForCausalLM.from_pretrained(\"bigscience/bloom-560m\")\n\nlora_config = LoraConfig(\n    r=8,\n    lora_alpha=32,\n    target_modules=[\"query_key_value\"],\n    lora_dropout=0.05,\n    bias=\"none\",\n    task_type=\"CAUSAL_LM\"\n)\n\npeft_model = get_peft_model(model, lora_config)\npeft_model.print_trainable_parameters()",
    "language": "python",
    "tags": [
      "lora",
      "fine-tuning",
      "llm"
    ]
  },
  {
    "title": "Quantization with bitsandbytes",
    "code": "from transformers import AutoModelForCausalLM, BitsAndBytesConfig\n\nquantization_config = BitsAndBytesConfig(\n    load_in_4bit=True,\n    bnb_4bit_compute_dtype=torch.float16,\n    bnb_4bit_quant_type=\"nf4\",\n    bnb_4bit_use_double_quant=True,\n)\n\nmodel = AutoModelForCausalLM.from_pretrained(\n    \"bigscience/bloom-1b7\",\n    quantization_config=quantization_config\n)",
    "language": "python",
    "tags": [
      "quantization",
      "llm",
      "optimization"
    ]
  },
  {
    "title": "LLM Prompt Template",
    "code": "from langchain.prompts import PromptTemplate\n\ntemplate = \"\"\"Answer the question based on the context below.\nContext: {context}\nQuestion: {question}\nAnswer: \"\"\"\n\nprompt = PromptTemplate(\n    input_variables=[\"context\", \"question\"],\n    template=template\n)\n\nformatted_prompt = prompt.format(\n    context=\"The sky appears blue due to Rayleigh scattering.\",\n    question=\"Why is the sky blue?\"\n)",
    "language": "python",
    "tags": [
      "prompt-engineering",
      "langchain",
      "llm"
    ]
  },
  {
    "title": "ML Model Deployment with BentoML",
    "code": "import bentoml\nfrom sklearn import svm\nfrom sklearn import datasets\n\n# Load training data\niris = datasets.load_iris()\nX, y = iris.data, iris.target\n\n# Train model\nmodel = svm.SVC(gamma='scale')\nmodel.fit(X, y)\n\n# Save with BentoML\nbentoml.sklearn.save_model(\"iris_clf\", model)",
    "language": "python",
    "tags": [
      "bentoml",
      "model-deployment",
      "mlops"
    ]
  },
  {
    "title": "TensorFlow Serving Client",
    "code": "import grpc\nimport tensorflow as tf\nfrom tensorflow_serving.apis import prediction_service_pb2_grpc\nfrom tensorflow_serving.apis import predict_pb2\n\nchannel = grpc.insecure_channel('localhost:8500')\nstub = prediction_service_pb2_grpc.PredictionServiceStub(channel)\n\nrequest = predict_pb2.PredictRequest()\nrequest.model_spec.name = 'resnet'\nrequest.model_spec.signature_name = 'serving_default'\nrequest.inputs['input'].CopyFrom(tf.make_tensor_proto(X_test[0:1]))\n\nresult = stub.Predict(request)",
    "language": "python",
    "tags": [
      "tensorflow-serving",
      "model-deployment",
      "grpc"
    ]
  },
  {
    "title": "PyTorch Lightning Trainer",
    "code": "import pytorch_lightning as pl\nfrom pytorch_lightning.callbacks import EarlyStopping\n\n# Define model (LightningModule)\nclass LitModel(pl.LightningModule):\n    ...\n\n# Initialize trainer\ntrainer = pl.Trainer(\n    max_epochs=10,\n    callbacks=[EarlyStopping(monitor=\"val_loss\")],\n    accelerator=\"gpu\",\n    devices=1\n)\n\n# Train\nmodel = LitModel()\ntrainer.fit(model, train_loader, val_loader)",
    "language": "python",
    "tags": [
      "pytorch-lightning",
      "training",
      "deep-learning"
    ]
  },
  {
    "title": "Weights & Biases Logging",
    "code": "import wandb\n\n# Initialize\nwandb.init(project=\"my-project\", config={\"learning_rate\": 0.01})\n\n# Log metrics\ndef train():\n    for epoch in range(10):\n        loss = ...  # Your training logic\n        wandb.log({\"loss\": loss})\n\n# Finish\nwandb.finish()",
    "language": "python",
    "tags": [
      "wandb",
      "experiment-tracking",
      "mlops"
    ]
  },
  {
    "title": "Neural Network Pruning",
    "code": "import torch\nimport torch.nn.utils.prune as prune\n\n# Prune 20% of connections in a layer\nmodel = ...  # Your model\nlayer = model.fc1  # Layer to prune\n\nprune.l1_unstructured(layer, name=\"weight\", amount=0.2)\n\n# Remove pruning reparametrization\nprune.remove(layer, \"weight\")",
    "language": "python",
    "tags": [
      "pruning",
      "optimization",
      "deep-learning"
    ]
  },
  {
    "title": "Knowledge Distillation",
    "code": "import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\n# Teacher and student models\nteacher = ...\nstudent = ...\n\n# Knowledge distillation loss\ndef distillation_loss(y, teacher_scores, T=2):\n    return F.kl_div(\n        F.log_softmax(y/T, dim=1),\n        F.softmax(teacher_scores/T, dim=1)\n    ) * (T * T)\n\n# In training loop:\nteacher_logits = teacher(inputs)\nstudent_logits = student(inputs)\nloss = 0.7 * F.cross_entropy(student_logits, labels) + \\\n       0.3 * distillation_loss(student_logits, teacher_logits)",
    "language": "python",
    "tags": [
      "knowledge-distillation",
      "model-compression",
      "deep-learning"
    ]
  },
  {
    "title": "Federated Learning with Flower",
    "code": "import flwr as fl\nfrom typing import Dict, List, Tuple\n\nclass FlowerClient(fl.client.NumPyClient):\n    def __init__(self, model, train_loader, val_loader):\n        self.model = model\n        self.train_loader = train_loader\n        self.val_loader = val_loader\n    \n    def get_parameters(self, config):\n        return [val.cpu().numpy() for _, val in self.model.state_dict().items()]\n    \n    def fit(self, parameters, config):\n        # Update model with server parameters\n        params_dict = zip(self.model.state_dict().keys(), parameters)\n        state_dict = {k: torch.tensor(v) for k, v in params_dict}\n        self.model.load_state_dict(state_dict)\n        \n        # Train model\n        train(self.model, self.train_loader, epochs=1)\n        \n        # Return updated parameters\n        return self.get_parameters(config), len(self.train_loader), {}\n\n# Start client\nfl.client.start_numpy_client(server_address=\"127.0.0.1:8080\", client=FlowerClient())",
    "language": "python",
    "tags": [
      "federated-learning",
      "flower",
      "privacy"
    ]
  },
  {
    "title": "ML Model Monitoring with Prometheus",
    "code": "from prometheus_client import start_http_server, Gauge\nimport random\nimport time\n\n# Create metrics\nPREDICTION_GAUGE = Gauge('model_predictions', 'Number of predictions')\nLATENCY_GAUGE = Gauge('prediction_latency_seconds', 'Prediction latency')\n\n# Start server\nstart_http_server(8000)\n\n# In prediction endpoint:\nstart_time = time.time()\nprediction = model.predict(data)\nPREDICTION_GAUGE.inc()\nLATENCY_GAUGE.set(time.time() - start_time)",
    "language": "python",
    "tags": [
      "prometheus",
      "monitoring",
      "mlops"
    ]
  },
  {
    "title": "Data Versioning with Delta Lake",
    "code": "from delta import DeltaTable\nimport pyspark\n\n# Create Spark session\nspark = pyspark.sql.SparkSession.builder \\\n    .appName(\"DeltaExample\") \\\n    .config(\"spark.sql.extensions\", \"io.delta.sql.DeltaSparkSessionExtension\") \\\n    .getOrCreate()\n\n# Create Delta table\ndata = spark.range(0, 5)\ndata.write.format(\"delta\").save(\"/tmp/delta-table\")\n\n# Time travel\ndf = spark.read.format(\"delta\") \\\n    .option(\"versionAsOf\", 0) \\\n    .load(\"/tmp/delta-table\")",
    "language": "python",
    "tags": [
      "delta-lake",
      "data-versioning",
      "big-data"
    ]
  },
  {
    "title": "Parallel File Processing with GNU Parallel",
    "code": "find . -name '*.log' | parallel -j 8 'gzip {}'",
    "language": "bash",
    "tags": [
      "parallel-processing",
      "optimization",
      "linux"
    ]
  },
  {
    "title": "Secure File Transfer with SCP",
    "code": "scp -i ~/.ssh/key.pem -C user@remote:/path/to/file ./local_dir",
    "language": "bash",
    "tags": [
      "networking",
      "security",
      "file-transfer"
    ]
  },
  {
    "title": "System Monitoring Dashboard",
    "code": "watch -n 1 'echo \"CPU: \" `top -bn1 | grep \"Cpu(s)\" | awk '{print $2 + $4}'`% && echo \"Memory: \" `free -m | awk '/Mem:/ {print $3}'`MB used'",
    "language": "bash",
    "tags": [
      "monitoring",
      "system",
      "devops"
    ]
  },
  {
    "title": "Log File Analysis with AWK",
    "code": "awk '{print $1}' access.log | sort | uniq -c | sort -nr | head -n 10",
    "language": "bash",
    "tags": [
      "logging",
      "analysis",
      "awk"
    ]
  },
  {
    "title": "Docker Cleanup Script",
    "code": "docker system prune -af --volumes && docker rmi $(docker images -aq)",
    "language": "bash",
    "tags": [
      "docker",
      "devops",
      "cleanup"
    ]
  },
  {
    "title": "SSH Tunnel for Port Forwarding",
    "code": "ssh -N -L 3306:localhost:3306 user@remote-server",
    "language": "bash",
    "tags": [
      "networking",
      "ssh",
      "security"
    ]
  },
  {
    "title": "Bulk Image Resizing",
    "code": "mogrify -resize 1024x768\\> *.jpg",
    "language": "bash",
    "tags": [
      "image-processing",
      "automation"
    ]
  },
  {
    "title": "Process Killer by Name Pattern",
    "code": "ps aux | grep -i \"process_name\" | awk '{print $2}' | xargs kill -9",
    "language": "bash",
    "tags": [
      "system",
      "process-management"
    ]
  },
  {
    "title": "Secure File Deletion",
    "code": "shred -u -z -n 5 sensitive_file.txt",
    "language": "bash",
    "tags": [
      "security",
      "file-management"
    ]
  },
  {
    "title": "JSON Parsing with jq",
    "code": "curl -s https://api.example.com/data | jq '.items[] | select(.value > 10)'",
    "language": "bash",
    "tags": [
      "json",
      "api",
      "parsing"
    ]
  },
  {
    "title": "Memory Usage by Process",
    "code": "ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%mem | head",
    "language": "bash",
    "tags": [
      "system",
      "monitoring",
      "memory"
    ]
  },
  {
    "title": "Find Files Modified Last 24 Hours",
    "code": "find /path -type f -mtime -1 -print",
    "language": "bash",
    "tags": [
      "file-system",
      "search"
    ]
  },
  {
    "title": "CPU Core Temperature",
    "code": "sensors | grep 'Core' | awk '{print $1,$2,$3}'",
    "language": "bash",
    "tags": [
      "hardware",
      "monitoring"
    ]
  },
  {
    "title": "Kernel Module Information",
    "code": "modinfo module_name | grep -E 'description|version|author'",
    "language": "bash",
    "tags": [
      "kernel",
      "system"
    ]
  },
  {
    "title": "User Login History",
    "code": "last -a | head -n 20",
    "language": "bash",
    "tags": [
      "security",
      "audit"
    ]
  },
  {
    "title": "HTTP Server Benchmark",
    "code": "ab -n 1000 -c 100 http://test.site/",
    "language": "bash",
    "tags": [
      "networking",
      "performance",
      "benchmark"
    ]
  },
  {
    "title": "TCP Dump Filter by IP",
    "code": "tcpdump -i eth0 host 192.168.1.100 and port 80 -w capture.pcap",
    "language": "bash",
    "tags": [
      "networking",
      "security",
      "debugging"
    ]
  },
  {
    "title": "Check Open Ports",
    "code": "nc -zv host.example.com 20-443 2>&1 | grep succeeded",
    "language": "bash",
    "tags": [
      "networking",
      "security"
    ]
  },
  {
    "title": "DNS Lookup with Dig",
    "code": "dig +short mx example.com",
    "language": "bash",
    "tags": [
      "dns",
      "networking"
    ]
  },
  {
    "title": "Network Throughput Test",
    "code": "iperf3 -c server.ip -p 5201 -t 30 -P 8",
    "language": "bash",
    "tags": [
      "networking",
      "benchmark"
    ]
  },
  {
    "title": "PyTorch DataLoader with Augmentation",
    "code": "transform = transforms.Compose([\n    transforms.RandomHorizontalFlip(),\n    transforms.ToTensor(),\n    transforms.Normalize((0.5,), (0.5,))\n])\ndataset = datasets.ImageFolder('data/', transform=transform)\ndataloader = DataLoader(dataset, batch_size=32, shuffle=True)",
    "language": "python",
    "tags": [
      "pytorch",
      "dataloader",
      "augmentation"
    ]
  },
  {
    "title": "TensorFlow Model Checkpoint",
    "code": "checkpoint = ModelCheckpoint('model.h5', \n                             monitor='val_accuracy',\n                             save_best_only=True,\n                             mode='max')\nmodel.fit(X_train, y_train, \n          validation_data=(X_val, y_val),\n          callbacks=[checkpoint])",
    "language": "python",
    "tags": [
      "tensorflow",
      "checkpoint",
      "training"
    ]
  },
  {
    "title": "GPU Memory Configuration",
    "code": "gpus = tf.config.experimental.list_physical_devices('GPU')\nif gpus:\n    try:\n        tf.config.experimental.set_memory_growth(gpus[0], True)\n    except RuntimeError as e:\n        print(e)",
    "language": "python",
    "tags": [
      "tensorflow",
      "gpu",
      "optimization"
    ]
  },
  {
    "title": "PyTorch Mixed Precision Training",
    "code": "scaler = GradScaler()\nwith autocast():\n    outputs = model(inputs)\n    loss = criterion(outputs, labels)\nscaler.scale(loss).backward()\nscaler.step(optimizer)\nscaler.update()",
    "language": "python",
    "tags": [
      "pytorch",
      "gpu",
      "optimization"
    ]
  },
  {
    "title": "MLflow Experiment Tracking",
    "code": "import mlflow\nmlflow.set_experiment(\"my_experiment\")\nwith mlflow.start_run():\n    mlflow.log_param(\"learning_rate\", 0.01)\n    mlflow.log_metric(\"accuracy\", 0.95)\n    mlflow.pytorch.log_model(model, \"model\")",
    "language": "python",
    "tags": [
      "mlops",
      "tracking",
      "experiments"
    ]
  },
  {
    "title": "FastAPI JWT Authentication",
    "code": "from fastapi.security import OAuth2PasswordBearer\nfrom jose import JWTError, jwt\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\ndef get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=401,\n        detail=\"Invalid credentials\")\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        return payload.get(\"sub\")\n    except JWTError:\n        raise credentials_exception",
    "language": "python",
    "tags": [
      "fastapi",
      "jwt",
      "authentication"
    ]
  },
  {
    "title": "GraphQL Resolver with Django",
    "code": "import graphene\n\nclass Query(graphene.ObjectType):\n    user = graphene.Field(UserType, id=graphene.Int())\n\n    def resolve_user(self, info, id):\n        return User.objects.get(pk=id)",
    "language": "python",
    "tags": [
      "graphql",
      "django",
      "api"
    ]
  },
  {
    "title": "Flask Rate Limiting",
    "code": "from flask_limiter import Limiter\nfrom flask_limiter.util import get_remote_address\n\nlimiter = Limiter(\n    app,\n    key_func=get_remote_address,\n    default_limits=[\"200 per day\", \"50 per hour\"]\n)\n\n@app.route(\"/api\")\n@limiter.limit(\"10 per minute\")\ndef api():\n    return jsonify(data=\"success\")",
    "language": "python",
    "tags": [
      "flask",
      "rate-limiting",
      "security"
    ]
  },
  {
    "title": "Async API with aiohttp",
    "code": "from aiohttp import web\n\nasync def handle(request):\n    async with aiohttp.ClientSession() as session:\n        async with session.get('http://python.org') as resp:\n            return web.Response(text=await resp.text())\n\napp = web.Application()\napp.router.add_get('/', handle)",
    "language": "python",
    "tags": [
      "aiohttp",
      "async",
      "api"
    ]
  },
  {
    "title": "DRF Custom Pagination",
    "code": "from rest_framework.pagination import PageNumberPagination\n\nclass LargeResultsSetPagination(PageNumberPagination):\n    page_size = 1000\n    page_size_query_param = 'page_size'\n    max_page_size = 10000\n\nclass MyViewSet(viewsets.ModelViewSet):\n    pagination_class = LargeResultsSetPagination",
    "language": "python",
    "tags": [
      "django",
      "rest",
      "api"
    ]
  },
  {
    "title": "Terraform AWS EC2 Instance",
    "code": "resource \"aws_instance\" \"web\" {\n  ami           = \"ami-0c55b159cbfafe1f0\"\n  instance_type = \"t3.micro\"\n  tags = {\n    Name = \"Production\"\n  }\n}",
    "language": "hcl",
    "tags": [
      "terraform",
      "aws",
      "devops"
    ]
  },
  {
    "title": "Kubernetes Deployment YAML",
    "code": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80",
    "language": "yaml",
    "tags": [
      "kubernetes",
      "devops",
      "deployment"
    ]
  },
  {
    "title": "Ansible Playbook for Nginx",
    "code": "---\n- hosts: webservers\n  become: yes\n  tasks:\n    - name: Install nginx\n      apt:\n        name: nginx\n        state: latest\n    - name: Start nginx service\n      service:\n        name: nginx\n        state: started",
    "language": "yaml",
    "tags": [
      "ansible",
      "devops",
      "automation"
    ]
  },
  {
    "title": "SHA-256 Password Hashing (Python)",
    "code": "import hashlib\ndef hash_password(password):\n    return hashlib.sha256(password.encode()).hexdigest()",
    "language": "python",
    "tags": [
      "security",
      "hashing",
      "authentication"
    ]
  },
  {
    "title": "Secure Random Token Generation",
    "code": "import secrets\ntoken = secrets.token_hex(32)\nprint(token)",
    "language": "python",
    "tags": [
      "security",
      "cryptography"
    ]
  },
  {
    "title": "Password Strength Checker (Regex)",
    "code": "import re\ndef is_strong_password(password):\n    return bool(re.match(r'^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$', password))",
    "language": "python",
    "tags": [
      "security",
      "authentication"
    ]
  },
  {
    "title": "Basic Port Scanner (Python)",
    "code": "import socket\ndef scan_port(ip, port):\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sock.settimeout(1)\n    result = sock.connect_ex((ip, port))\n    sock.close()\n    return result == 0",
    "language": "python",
    "tags": [
      "hacking",
      "networking",
      "cybersecurity"
    ]
  },
  {
    "title": "Brute-Force Protection with Rate Limiting (Flask)",
    "code": "from flask import Flask, request, abort\nfrom flask_limiter import Limiter\nfrom flask_limiter.util import get_remote_address\n\napp = Flask(__name__)\nlimiter = Limiter(app, key_func=get_remote_address)\n\n@app.route('/login', methods=['POST'])\n@limiter.limit('5 per minute')\ndef login():\n    return 'Login Attempt Recorded'",
    "language": "python",
    "tags": [
      "security",
      "flask",
      "rate-limiting"
    ]
  },
  {
    "title": "XSS Protection Middleware (Express.js)",
    "code": "const express = require('express');\nconst helmet = require('helmet');\nconst app = express();\n\napp.use(helmet.xssFilter());",
    "language": "javascript",
    "tags": [
      "security",
      "express",
      "xss"
    ]
  },
  {
    "title": "SQL Injection Prevention (Python + SQLite)",
    "code": "import sqlite3\ndef get_user_safe(username):\n    conn = sqlite3.connect('users.db')\n    cursor = conn.cursor()\n    cursor.execute('SELECT * FROM users WHERE username = ?', (username,))\n    return cursor.fetchone()",
    "language": "python",
    "tags": [
      "security",
      "sql",
      "injection"
    ]
  },
  {
    "title": "HTTPS Redirect in Express.js",
    "code": "const express = require('express');\nconst app = express();\n\napp.use((req, res, next) => {\n    if (req.headers['x-forwarded-proto'] !== 'https') {\n        return res.redirect(`https://${req.hostname}${req.url}`);\n    }\n    next();\n});",
    "language": "javascript",
    "tags": [
      "security",
      "express",
      "https"
    ]
  },
  {
    "title": "CSRF Protection in Flask",
    "code": "from flask_wtf.csrf import CSRFProtect\n\napp = Flask(__name__)\napp.secret_key = 'your-secret-key'\ncsrf = CSRFProtect(app)",
    "language": "python",
    "tags": [
      "security",
      "flask",
      "csrf"
    ]
  },
  {
    "title": "JWT Authentication (Node.js)",
    "code": "const jwt = require('jsonwebtoken');\n\nconst generateToken = (user) => {\n    return jwt.sign({ id: user.id }, process.env.JWT_SECRET, { expiresIn: '1h' });\n};\n\nconst verifyToken = (token) => {\n    return jwt.verify(token, process.env.JWT_SECRET);\n};",
    "language": "javascript",
    "tags": [
      "security",
      "jwt",
      "authentication"
    ]
  },
  {
    "title": "OpenAI GPT-4 API Call (Python)",
    "code": "import openai\n\nresponse = openai.ChatCompletion.create(\n    model='gpt-4',\n    messages=[{'role': 'user', 'content': 'Explain quantum computing'}]\n)\nprint(response.choices[0].message.content)",
    "language": "python",
    "tags": [
      "ai",
      "openai",
      "llm"
    ]
  },
  {
    "title": "Text Embeddings with OpenAI",
    "code": "import openai\n\nembedding = openai.Embedding.create(\n    input='Your text here',\n    model='text-embedding-ada-002'\n)\nprint(embedding.data[0].embedding)",
    "language": "python",
    "tags": [
      "ai",
      "embeddings",
      "openai"
    ]
  },
  {
    "title": "LangChain Document QA System",
    "code": "from langchain.document_loaders import WebBaseLoader\nfrom langchain.indexes import VectorstoreIndexCreator\n\nloader = WebBaseLoader('https://example.com')\nindex = VectorstoreIndexCreator().from_loaders([loader])\nquery = 'What is the main topic?'\nprint(index.query(query))",
    "language": "python",
    "tags": [
      "ai",
      "langchain",
      "llm"
    ]
  },
  {
    "title": "Hugging Face Transformers (Text Generation)",
    "code": "from transformers import pipeline\ngenerator = pipeline('text-generation', model='gpt2')\nprint(generator('AI will', max_length=50))",
    "language": "python",
    "tags": [
      "ai",
      "huggingface",
      "llm"
    ]
  },
  {
    "title": "Stable Diffusion Image Generation",
    "code": "from diffusers import StableDiffusionPipeline\nimport torch\n\npipe = StableDiffusionPipeline.from_pretrained('runwayml/stable-diffusion-v1-5', torch_dtype=torch.float16)\nimage = pipe('A futuristic city').images[0]\nimage.save('city.png')",
    "language": "python",
    "tags": [
      "ai",
      "stablediffusion",
      "image-generation"
    ]
  },
  {
    "title": "GraphQL Query (Apollo Client)",
    "code": "import { useQuery, gql } from '@apollo/client';\n\nconst GET_DATA = gql`\n  query GetData {\n    posts {\n      title\n    }\n  }\n`;\n\nfunction App() {\n  const { data } = useQuery(GET_DATA);\n  return <div>{JSON.stringify(data)}</div>;\n}",
    "language": "javascript",
    "tags": [
      "web",
      "graphql",
      "react"
    ]
  },
  {
    "title": "Two-Pointer Technique (Find Pair Sum)",
    "code": "def two_sum_sorted(arr, target):\n    left, right = 0, len(arr) - 1\n    while left < right:\n        current_sum = arr[left] + arr[right]\n        if current_sum == target:\n            return [left, right]\n        elif current_sum < target:\n            left += 1\n        else:\n            right -= 1\n    return [-1, -1]",
    "language": "python",
    "tags": [
      "array",
      "two-pointer",
      "interview"
    ]
  },
  {
    "title": "Kadane's Algorithm (Maximum Subarray)",
    "code": "def max_subarray(nums):\n    max_current = max_global = nums[0]\n    for num in nums[1:]:\n        max_current = max(num, max_current + num)\n        max_global = max(max_global, max_current)\n    return max_global",
    "language": "python",
    "tags": [
      "array",
      "dynamic-programming",
      "algorithm"
    ]
  },
  {
    "title": "Valid Parentheses Checker",
    "code": "def is_valid(s):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in s:\n        if char in mapping:\n            top = stack.pop() if stack else '#'\n            if mapping[char] != top:\n                return False\n        else:\n            stack.append(char)\n    return not stack",
    "language": "python",
    "tags": [
      "stack",
      "interview",
      "leetcode"
    ]
  },
  {
    "title": "Min Stack (O(1) Operations)",
    "code": "class MinStack:\n    def __init__(self):\n        self.stack = []\n        self.min_stack = []\n\n    def push(self, val):\n        self.stack.append(val)\n        if not self.min_stack or val <= self.min_stack[-1]:\n            self.min_stack.append(val)\n\n    def pop(self):\n        if self.stack[-1] == self.min_stack[-1]:\n            self.min_stack.pop()\n        return self.stack.pop()\n\n    def top(self):\n        return self.stack[-1]\n\n    def getMin(self):\n        return self.min_stack[-1]",
    "language": "python",
    "tags": [
      "stack",
      "design",
      "interview"
    ]
  },
  {
    "title": "Reverse a Linked List (Iterative)",
    "code": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverse_list(head):\n    prev, current = None, head\n    while current:\n        next_node = current.next\n        current.next = prev\n        prev = current\n        current = next_node\n    return prev",
    "language": "python",
    "tags": [
      "linked-list",
      "interview",
      "algorithm"
    ]
  },
  {
    "title": "Detect Cycle (Floyd's Tortoise & Hare)",
    "code": "def has_cycle(head):\n    slow = fast = head\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n        if slow == fast:\n            return True\n    return False",
    "language": "python",
    "tags": [
      "linked-list",
      "cycle-detection",
      "algorithm"
    ]
  },
  {
    "title": "Max-Heap Implementation (Python)",
    "code": "import heapq\n\nmax_heap = []\nheapq.heappush(max_heap, -10)\nheapq.heappush(max_heap, -5)\nheapq.heappush(max_heap, -20)\n\nmax_element = -heapq.heappop(max_heap)  # 20",
    "language": "python",
    "tags": [
      "heap",
      "priority-queue",
      "interview"
    ]
  },
  {
    "title": "Kth Largest Element in Array",
    "code": "import heapq\n\ndef find_kth_largest(nums, k):\n    return heapq.nlargest(k, nums)[-1]",
    "language": "python",
    "tags": [
      "heap",
      "algorithm",
      "interview"
    ]
  },
  {
    "title": "CSS Grid Responsive Layout",
    "code": ".container {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 1rem;\n}",
    "language": "css",
    "tags": [
      "css-grid",
      "responsive",
      "layout"
    ]
  },
  {
    "title": "Dark Mode Toggle with CSS Variables",
    "code": ":root {\n  --bg-color: #fff;\n  --text-color: #333;\n}\n\n[data-theme=\"dark\"] {\n  --bg-color: #121212;\n  --text-color: #f5f5f5;\n}\n\nbody {\n  background: var(--bg-color);\n  color: var(--text-color);\n  transition: all 0.3s ease;\n}",
    "language": "css",
    "tags": [
      "dark-mode",
      "css-variables",
      "ui"
    ]
  },
  {
    "title": "Tailwind CSS Card Component",
    "code": "<div class=\"max-w-sm rounded overflow-hidden shadow-lg bg-white dark:bg-gray-800\">\n  <div class=\"px-6 py-4\">\n    <h2 class=\"font-bold text-xl mb-2 dark:text-white\">Card Title</h2>\n    <p class=\"text-gray-700 dark:text-gray-300\">Card content</p>\n  </div>\n</div>",
    "language": "html",
    "tags": [
      "tailwind",
      "card",
      "component"
    ]
  },
  {
    "title": "Material UI React Button",
    "code": "import { Button } from '@mui/material';\n\n<Button \n  variant=\"contained\" \n  color=\"primary\"\n  sx={{ \n    borderRadius: '8px',\n    px: 4,\n    py: 1\n  }}\n>\n  Click Me\n</Button>",
    "language": "javascript",
    "tags": [
      "material-ui",
      "react",
      "button"
    ]
  },
  {
    "title": "Bootstrap 5 Modal",
    "code": "<button class=\"btn btn-primary\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\">\n  Launch Modal\n</button>\n\n<div class=\"modal fade\" id=\"exampleModal\">\n  <div class=\"modal-dialog\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h5 class=\"modal-title\">Modal Title</h5>\n        <button class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n      </div>\n      <div class=\"modal-body\">Modal Content</div>\n    </div>\n  </div>\n</div>",
    "language": "html",
    "tags": [
      "bootstrap",
      "modal",
      "ui"
    ]
  },
  {
    "title": "SASS Mixin for Responsive Breakpoints",
    "code": "@mixin respond-to($breakpoint) {\n  @if $breakpoint == phone {\n    @media (max-width: 600px) { @content; }\n  }\n  @else if $breakpoint == tablet {\n    @media (max-width: 900px) { @content; }\n  }\n  @else if $breakpoint == desktop {\n    @media (min-width: 901px) { @content; }\n  }\n}\n\n.element {\n  @include respond-to(phone) { width: 100%; }\n}",
    "language": "scss",
    "tags": [
      "sass",
      "responsive",
      "mixin"
    ]
  },
  {
    "title": "LESS Color Functions",
    "code": "@primary: #3498db;\n.button {\n  background: @primary;\n  &:hover {\n    background: lighten(@primary, 10%);\n  }\n  &:active {\n    background: darken(@primary, 10%);\n  }\n}",
    "language": "less",
    "tags": [
      "less",
      "colors",
      "functions"
    ]
  },
  {
    "title": "Markdown Table with Alignment",
    "code": "| Syntax      | Description | Test Score |\n| ----------- | ----------- | ---------- |\n| Header      | Title       | 100        |\n| Paragraph   | Text        | 80         |\n| Divider     | Line        | 90         |",
    "language": "markdown",
    "tags": [
      "markdown",
      "table",
      "documentation"
    ]
  },
  {
    "title": "LaTeX Math Equation",
    "code": "\\begin{equation}\n  f(x) = \\int_{-\\infty}^\\infty \\hat f(\\xi)\\,e^{2 \\pi i \\xi x} \\,d\\xi\n\\end{equation}",
    "language": "latex",
    "tags": [
      "latex",
      "math",
      "equation"
    ]
  },
  {
    "title": "Bash Script Template",
    "code": "#!/bin/bash\n\n# Strict mode\nset -euo pipefail\nIFS=$'\\n\\t'\n\n# Configuration\nreadonly SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\nreadonly LOG_FILE=\"/var/log/$(basename \"$0\").log\"\n\n# Logging\nlog() {\n  local level=\"$1\"\n  shift\n  echo -e \"[$(date '+%Y-%m-%d %H:%M:%S')] [${level}] $*\" | tee -a \"${LOG_FILE}\"\n}\n\nmain() {\n  log \"INFO\" \"Starting script execution\"\n  # Main logic here\n  log \"INFO\" \"Script completed successfully\"\n}\n\nmain \"$@\"",
    "language": "bash",
    "tags": [
      "bash",
      "scripting",
      "template"
    ]
  },
  {
    "title": "PowerShell API Call",
    "code": "$uri = \"https://api.example.com/v1/users\"\n$headers = @{\n    \"Authorization\" = \"Bearer $accessToken\"\n    \"Content-Type\" = \"application/json\"\n}\n$body = @{\n    \"name\" = \"John Doe\"\n    \"email\" = \"john@example.com\"\n} | ConvertTo-Json\n\n$response = Invoke-RestMethod -Uri $uri -Method Post -Headers $headers -Body $body\nWrite-Output $response",
    "language": "powershell",
    "tags": [
      "powershell",
      "api",
      "rest"
    ]
  },
  {
    "title": "Arduino LED Blink with Button",
    "code": "const int buttonPin = 2;\nconst int ledPin = 13;\n\nvoid setup() {\n  pinMode(ledPin, OUTPUT);\n  pinMode(buttonPin, INPUT_PULLUP);\n}\n\nvoid loop() {\n  if (digitalRead(buttonPin) == LOW) {\n    digitalWrite(ledPin, HIGH);\n    delay(500);\n    digitalWrite(ledPin, LOW);\n    delay(500);\n  }\n}",
    "language": "arduino",
    "tags": [
      "arduino",
      "iot",
      "led"
    ]
  },
  {
    "title": "Raspberry Pi GPIO Control",
    "code": "import RPi.GPIO as GPIO\nimport time\n\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(18, GPIO.OUT)\n\ntry:\n    while True:\n        GPIO.output(18, GPIO.HIGH)\n        time.sleep(1)\n        GPIO.output(18, GPIO.LOW)\n        time.sleep(1)\nexcept KeyboardInterrupt:\n    GPIO.cleanup()",
    "language": "python",
    "tags": [
      "raspberrypi",
      "gpio",
      "python"
    ]
  },
  {
    "title": "Android RecyclerView Adapter",
    "code": "class MyAdapter(private val data: List<String>) : RecyclerView.Adapter<MyAdapter.ViewHolder>() {\n\n    class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {\n        val textView: TextView = view.findViewById(R.id.textView)\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val view = LayoutInflater.from(parent.context)\n            .inflate(R.layout.item_row, parent, false)\n        return ViewHolder(view)\n    }\n\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n        holder.textView.text = data[position]\n    }\n\n    override fun getItemCount() = data.size\n}",
    "language": "kotlin",
    "tags": [
      "android",
      "recyclerview",
      "kotlin"
    ]
  },
  {
    "title": "Xcode SwiftUI List",
    "code": "struct ContentView: View {\n    let items = [\"Item 1\", \"Item 2\", \"Item 3\"]\n    \n    var body: some View {\n        List(items, id: \\.self) { item in\n            Text(item)\n                .padding()\n                .swipeActions {\n                    Button(\"Delete\") { /* action */ }\n                        .tint(.red)\n                }\n        }\n        .refreshable { /* refresh logic */ }\n    }\n}",
    "language": "swift",
    "tags": [
      "xcode",
      "swiftui",
      "list"
    ]
  },
  {
    "title": "Vim Multi-Cursor Editing",
    "code": "\" Enable visual block mode with Ctrl+V\n\" Select multiple lines with arrows\n\" Press I to insert at beginning or A to append at end\n\" Type your text\n\" Press Esc to apply to all lines",
    "language": "vim",
    "tags": [
      "vim",
      "editing",
      "productivity"
    ]
  },
  {
    "title": "VSCode Settings for Frontend Dev",
    "code": "{\n  \"editor.tabSize\": 2,\n  \"editor.formatOnSave\": true,\n  \"eslint.validate\": [\"javascript\", \"javascriptreact\", \"typescript\", \"typescriptreact\"],\n  \"prettier.singleQuote\": true,\n  \"emmet.includeLanguages\": {\n    \"javascript\": \"javascriptreact\"\n  },\n  \"files.autoSave\": \"afterDelay\"\n}",
    "language": "json",
    "tags": [
      "vscode",
      "settings",
      "frontend"
    ]
  },
  {
    "title": "IntelliJ Live Templates for React",
    "code": "\"React Functional Component\": {\n  \"prefix\": \"rfc\",\n  \"body\": [\n    \"import React from 'react';\",\n    \"\",\n    \"const ${1:ComponentName} = () => {\",\n    \"  return (\",\n    \"    <div>\",\n    \"      ${2}\",\n    \"    </div>\",\n    \"  );\",\n    \"};\",\n    \"\",\n    \"export default ${1:ComponentName};\"\n  ],\n  \"description\": \"Create a React functional component\"\n}",
    "language": "json",
    "tags": [
      "intellij",
      "react",
      "productivity"
    ]
  },
  {
    "title": "Eclipse Java Formatter",
    "code": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<profile kind=\"CodeFormatterProfile\" name=\"GoogleStyle\" version=\"12\">\n  <setting id=\"org.eclipse.jdt.core.formatter.lineSplit\" value=\"100\"/>\n  <setting id=\"org.eclipse.jdt.core.formatter.tabulation.char\" value=\"space\"/>\n  <setting id=\"org.eclipse.jdt.core.formatter.indentation.size\" value=\"2\"/>\n  <setting id=\"org.eclipse.jdt.core.formatter.brace_position_for_type_declaration\" value=\"end_of_line\"/>\n  <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_parameterized_type_reference\" value=\"insert\"/>\n</profile>",
    "language": "xml",
    "tags": [
      "eclipse",
      "java",
      "formatter"
    ]
  },
  {
    "title": "CSS Scroll Snap",
    "code": ".container {\n  scroll-snap-type: y mandatory;\n  overflow-y: scroll;\n  height: 100vh;\n}\n\n.section {\n  scroll-snap-align: start;\n  height: 100vh;\n}",
    "language": "css",
    "tags": [
      "css",
      "scroll",
      "ui"
    ]
  },
  {
    "title": "Accessible Skip Link",
    "code": "<a href=\"#main\" class=\"skip-link\">Skip to content</a>\n\n<style>\n.skip-link {\n  position: absolute;\n  top: -40px;\n  left: 0;\n  padding: 8px;\n  background: #000;\n  color: white;\n  z-index: 100;\n}\n\n.skip-link:focus {\n  top: 0;\n}\n</style>",
    "language": "html",
    "tags": [
      "accessibility",
      "html",
      "ui"
    ]
  },
  {
    "title": "Bootstrap 5 Offcanvas",
    "code": "<button class=\"btn btn-primary\" data-bs-toggle=\"offcanvas\" data-bs-target=\"#offcanvasExample\">\n  Toggle Offcanvas\n</button>\n\n<div class=\"offcanvas offcanvas-start\" tabindex=\"-1\" id=\"offcanvasExample\">\n  <div class=\"offcanvas-header\">\n    <h5 class=\"offcanvas-title\">Offcanvas</h5>\n    <button class=\"btn-close\" data-bs-dismiss=\"offcanvas\"></button>\n  </div>\n  <div class=\"offcanvas-body\">\n    <p>Offcanvas content</p>\n  </div>\n</div>",
    "language": "html",
    "tags": [
      "bootstrap",
      "offcanvas",
      "ui"
    ]
  },
  {
    "title": "Material UI Theming",
    "code": "import { createTheme, ThemeProvider } from '@mui/material/styles';\n\nconst theme = createTheme({\n  palette: {\n    mode: 'dark',\n    primary: {\n      main: '#90caf9',\n    },\n    secondary: {\n      main: '#f48fb1',\n    },\n  },\n  typography: {\n    fontFamily: 'Roboto, sans-serif',\n  },\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      {/* Your components */}\n    </ThemeProvider>\n  );\n}",
    "language": "javascript",
    "tags": [
      "material-ui",
      "theming",
      "react"
    ]
  },
  {
    "title": "Tailwind CSS Animation",
    "code": "<div class=\"animate-bounce hover:animate-pulse\">\n  <p class=\"text-xl font-bold\">Hover me!</p>\n</div>\n\n<!-- Add this to your Tailwind config -->\n/* tailwind.config.js */\nmodule.exports = {\n  theme: {\n    extend: {\n      animation: {\n        'spin-slow': 'spin 3s linear infinite',\n      }\n    }\n  }\n}",
    "language": "html",
    "tags": [
      "tailwind",
      "animation",
      "ui"
    ]
  },
  {
    "title": "SASS BEM Mixin",
    "code": "@mixin element($element) {\n  &__#{$element} {\n    @content;\n  }\n}\n\n@mixin modifier($modifier) {\n  &--#{$modifier} {\n    @content;\n  }\n}\n\n.block {\n  @include element('item') {\n    color: red;\n    \n    @include modifier('active') {\n      color: blue;\n    }\n  }\n}",
    "language": "scss",
    "tags": [
      "sass",
      "bem",
      "mixin"
    ]
  },
  {
    "title": "Markdown Code Block with Syntax Highlighting",
    "code": "```javascript\nfunction greet(name) {\n  console.log(`Hello, ${name}!`);\n}\n\ngreet('World');\n```",
    "language": "markdown",
    "tags": [
      "markdown",
      "code",
      "documentation"
    ]
  },
  {
    "title": "LaTeX Algorithm Pseudocode",
    "code": "\\begin{algorithm}\n\\caption{Euclid's Algorithm}\n\\begin{algorithmic}[1]\n\\Procedure{Euclid}{$a,b$}\n\\State $r \\gets a \\bmod b$\n\\While{$r \\neq 0$}\n\\State $a \\gets b$\n\\State $b \\gets r$\n\\State $r \\gets a \\bmod b$\n\\EndWhile\n\\State \\textbf{return} $b$\n\\EndProcedure\n\\end{algorithmic}\n\\end{algorithm}",
    "language": "latex",
    "tags": [
      "latex",
      "algorithm",
      "pseudocode"
    ]
  },
  {
    "title": "Bash HTTP Server",
    "code": "#!/bin/bash\n\nPORT=8000\n\necho \"Serving at http://localhost:$PORT\"\n\nwhile true; do\n  { \n    echo -e \"HTTP/1.1 200 OK\\nContent-Type: text/html\\n\\n\";\n    echo \"<h1>Hello from Bash!</h1> $(date)\"; \n  } | nc -l -p $PORT -q 1\ndone",
    "language": "bash",
    "tags": [
      "bash",
      "http",
      "server"
    ]
  },
  {
    "title": "PowerShell Process Monitor",
    "code": "function Get-TopProcesses {\n  param(\n    [int]$Count = 10\n  )\n  \n  Get-Process | \n    Sort-Object -Property CPU -Descending | \n    Select-Object -First $Count |\n    Format-Table -AutoSize -Property \n      ID, Name, CPU, WorkingSet, StartTime\n}\n\n# Run every 5 seconds\nwhile($true) {\n  Clear-Host\n  Get-TopProcesses 5\n  Start-Sleep -Seconds 5\n}",
    "language": "powershell",
    "tags": [
      "powershell",
      "monitoring",
      "process"
    ]
  },
  {
    "title": "Arduino WiFi Client",
    "code": "#include <WiFi.h>\n\nconst char* ssid = \"yourSSID\";\nconst char* password = \"yourPassword\";\n\nvoid setup() {\n  Serial.begin(115200);\n  WiFi.begin(ssid, password);\n  \n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  \n  Serial.println(\"Connected to WiFi\");\n}\n\nvoid loop() {\n  if(WiFi.status() == WL_CONNECTED) {\n    // Your connected code here\n  }\n}",
    "language": "arduino",
    "tags": [
      "arduino",
      "wifi",
      "iot"
    ]
  },
  {
    "title": "Raspberry Pi Camera Capture",
    "code": "from picamera import PiCamera\nfrom time import sleep\n\ncamera = PiCamera()\ncamera.resolution = (1024, 768)\ncamera.start_preview()\n\n# Camera warm-up time\nsleep(2)\ncamera.capture('image.jpg')\ncamera.stop_preview()",
    "language": "python",
    "tags": [
      "raspberrypi",
      "camera",
      "python"
    ]
  },
  {
    "title": "Android ViewModel with LiveData",
    "code": "class MyViewModel : ViewModel() {\n    private val _data = MutableLiveData<String>()\n    val data: LiveData<String> = _data\n\n    fun loadData() {\n        viewModelScope.launch {\n            _data.value = repository.fetchData()\n        }\n    }\n}\n\n// In Activity/Fragment:\nviewModel.data.observe(this) { data ->\n    // Update UI\n}",
    "language": "kotlin",
    "tags": [
      "android",
      "viewmodel",
      "livedata"
    ]
  },
  {
    "title": "Vim Search and Replace",
    "code": "\" Case insensitive search\n:/searchTerm\\c\n\n\" Replace in current line\n:s/old/new/g\n\n\" Replace in entire file\n:%s/old/new/gc\n\n\" Replace in visual selection\n:'<,'>s/old/new/g",
    "language": "vim",
    "tags": [
      "vim",
      "search",
      "productivity"
    ]
  },
  {
    "title": "VSCode Snippets for React",
    "code": "{\n  \"Functional Component\": {\n    \"prefix\": \"rfc\",\n    \"body\": [\n      \"import React from 'react';\",\n      \"\",\n      \"const ${1:ComponentName} = (${2:props}) => {\",\n      \"  return (\",\n      \"    <div>\",\n      \"      ${3}\",\n      \"    </div>\",\n      \"  );\",\n      \"};\",\n      \"\",\n      \"export default ${1:ComponentName};\"\n    ],\n    \"description\": \"Create a React functional component\"\n  }\n}",
    "language": "json",
    "tags": [
      "vscode",
      "react",
      "snippets"
    ]
  },
  {
    "title": "IntelliJ Database Connection",
    "code": "# Database connection configuration for IntelliJ\n# MySQL example\njdbc:mysql://localhost:3306/database_name\n?useSSL=false\n&serverTimezone=UTC\n&allowPublicKeyRetrieval=true\n\n# PostgreSQL example\njdbc:postgresql://localhost:5432/database_name\n?ssl=false",
    "language": "text",
    "tags": [
      "intellij",
      "database",
      "configuration"
    ]
  },
  {
    "title": "Eclipse Debug Configuration",
    "code": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<launchConfiguration type=\"org.eclipse.jdt.launching.localJavaApplication\">\n  <listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_PATHS\">\n    <listEntry value=\"/project/src/com/example/Main.java\"/>\n  </listAttribute>\n  <stringAttribute key=\"org.eclipse.jdt.launching.MAIN_TYPE\" value=\"com.example.Main\"/>\n  <stringAttribute key=\"org.eclipse.jdt.launching.PROJECT_ATTR\" value=\"YourProjectName\"/>\n  <stringAttribute key=\"org.eclipse.jdt.launching.VM_ARGUMENTS\" value=\"-Xmx1024m -Dconfig.file=conf/application.conf\"/>\n</launchConfiguration>",
    "language": "xml",
    "tags": [
      "eclipse",
      "debug",
      "configuration"
    ]
  },
  {
    "title": "CSS Aspect Ratio Box",
    "code": ".aspect-box {\n  --aspect-ratio: 16/9;\n  position: relative;\n  width: 100%;\n  padding-bottom: calc(100% / (var(--aspect-ratio)));\n}\n\n.aspect-box > * {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}",
    "language": "css",
    "tags": [
      "css",
      "aspect-ratio",
      "responsive"
    ]
  },
  {
    "title": "Accessible Modal Dialog",
    "code": "<div \n  role=\"dialog\" \n  aria-modal=\"true\" \n  aria-labelledby=\"dialog-title\"\n  aria-describedby=\"dialog-desc\"\n>\n  <h2 id=\"dialog-title\">Dialog Title</h2>\n  <p id=\"dialog-desc\">Description of dialog purpose</p>\n  <button \n    aria-label=\"Close dialog\" \n    onclick=\"closeDialog()\"\n  >\n    \u00d7\n  </button>\n</div>\n\n<script>\n// Trap focus in dialog\nfunction trapFocus(element) {\n  const focusable = element.querySelectorAll(\n    'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n  );\n  const first = focusable[0];\n  const last = focusable[focusable.length - 1];\n\n  last.addEventListener('keydown', (e) => {\n    if (e.key === 'Tab' && !e.shiftKey) {\n      e.preventDefault();\n      first.focus();\n    }\n  });\n\n  first.addEventListener('keydown', (e) => {\n    if (e.key === 'Tab' && e.shiftKey) {\n      e.preventDefault();\n      last.focus();\n    }\n  });\n}\n</script>",
    "language": "html",
    "tags": [
      "accessibility",
      "modal",
      "dialog"
    ]
  },
  {
    "title": "Bootstrap 5 Carousel",
    "code": "<div id=\"carouselExample\" class=\"carousel slide\" data-bs-ride=\"carousel\">\n  <div class=\"carousel-inner\">\n    <div class=\"carousel-item active\">\n      <img src=\"image1.jpg\" class=\"d-block w-100\" alt=\"First slide\">\n    </div>\n    <div class=\"carousel-item\">\n      <img src=\"image2.jpg\" class=\"d-block w-100\" alt=\"Second slide\">\n    </div>\n  </div>\n  <button class=\"carousel-control-prev\" type=\"button\" data-bs-target=\"#carouselExample\" data-bs-slide=\"prev\">\n    <span class=\"carousel-control-prev-icon\"></span>\n  </button>\n  <button class=\"carousel-control-next\" type=\"button\" data-bs-target=\"#carouselExample\" data-bs-slide=\"next\">\n    <span class=\"carousel-control-next-icon\"></span>\n  </button>\n</div>",
    "language": "html",
    "tags": [
      "bootstrap",
      "carousel",
      "ui"
    ]
  },
  {
    "title": "Material UI DataGrid",
    "code": "import { DataGrid } from '@mui/x-data-grid';\n\nconst columns = [\n  { field: 'id', headerName: 'ID', width: 70 },\n  { field: 'name', headerName: 'Name', width: 130 },\n];\n\nconst rows = [\n  { id: 1, name: 'John' },\n  { id: 2, name: 'Jane' },\n];\n\nfunction DataTable() {\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        pageSize={5}\n        rowsPerPageOptions={[5]}\n        checkboxSelection\n      />\n    </div>\n  );\n}",
    "language": "javascript",
    "tags": [
      "material-ui",
      "datagrid",
      "react"
    ]
  },
  {
    "title": "Tailwind CSS Custom Animation",
    "code": "/* tailwind.config.js */\nmodule.exports = {\n  theme: {\n    extend: {\n      animation: {\n        'fade-in': 'fadeIn 0.5s ease-in',\n      },\n      keyframes: {\n        fadeIn: {\n          '0%': { opacity: '0' },\n          '100%': { opacity: '1' },\n        },\n      },\n    },\n  },\n};\n\n<!-- Usage -->\n<div class=\"animate-fade-in\">Content</div>",
    "language": "javascript",
    "tags": [
      "tailwind",
      "animation",
      "custom"
    ]
  },
  {
    "title": "SASS Responsive Mixin",
    "code": "@mixin respond($breakpoint) {\n  @if $breakpoint == phone {\n    @media only screen and (max-width: 600px) { @content; }\n  }\n  @if $breakpoint == tablet {\n    @media only screen and (max-width: 900px) { @content; }\n  }\n  @if $breakpoint == desktop {\n    @media only screen and (min-width: 1200px) { @content; }\n  }\n}\n\n.element {\n  font-size: 1rem;\n  \n  @include respond(phone) {\n    font-size: 0.8rem;\n  }\n}",
    "language": "scss",
    "tags": [
      "sass",
      "responsive",
      "mixin"
    ]
  },
  {
    "title": "LESS Color Palette Generator",
    "code": "@primary: #3498db;\n@secondary: spin(@primary, 120);\n@accent: spin(@primary, -120);\n\n.generate-palette(@color) {\n  .light-1 { color: lighten(@color, 20%); }\n  .light-2 { color: lighten(@color, 40%); }\n  .dark-1 { color: darken(@color, 20%); }\n  .dark-2 { color: darken(@color, 40%); }\n  .complement { color: spin(@color, 180); }\n}\n\n.primary-palette {\n  .generate-palette(@primary);\n}",
    "language": "less",
    "tags": [
      "less",
      "colors",
      "palette"
    ]
  },
  {
    "title": "Markdown Mermaid Diagram",
    "code": "```mermaid\nsequenceDiagram\n    participant User\n    participant Frontend\n    participant Backend\n    \n    User->>Frontend: Submit Form\n    Frontend->>Backend: POST /api/data\n    Backend-->>Frontend: 201 Created\n    Frontend-->>User: Success Message\n```",
    "language": "markdown",
    "tags": [
      "markdown",
      "mermaid",
      "diagram"
    ]
  },
  {
    "title": "LaTeX Beamer Slide",
    "code": "\\documentclass{beamer}\n\\usetheme{Madrid}\n\n\\title[Short Title]{Full Presentation Title}\n\\author{Author Name}\n\\institute{Institution}\n\\date{\\today}\n\n\\begin{document}\n\n\\begin{frame}\n  \\titlepage\n\\end{frame}\n\n\\begin{frame}{Frame Title}\n  \\begin{itemize}\n    \\item First point\n    \\item Second point\n    \\begin{enumerate}\n      \\item Sub-point\n    \\end{enumerate}\n  \\end{itemize}\n  \n  \\begin{block}{Important}\n    Highlighted content\n  \\end{block}\n\\end{frame}\n\n\\end{document}",
    "language": "latex",
    "tags": [
      "latex",
      "beamer",
      "presentation"
    ]
  },
  {
    "title": "Bash System Info Script",
    "code": "#!/bin/bash\n\n# System information script\n\necho \"=== System Information ===\"\necho \"Hostname: $(hostname)\"\necho \"Uptime: $(uptime -p)\"\necho \"OS: $(lsb_release -d | cut -f2)\"\necho \"Kernel: $(uname -r)\"\necho \"CPU: $(lscpu | grep 'Model name' | cut -d: -f2 | xargs)\"\necho \"Memory: $(free -h | awk '/Mem:/ {print $3 \" / \" $2}')\"\necho \"Disk: $(df -h / | awk 'NR==2 {print $3 \" / \" $2}')\"",
    "language": "bash",
    "tags": [
      "bash",
      "system",
      "monitoring"
    ]
  },
  {
    "title": "PowerShell Azure Blob Upload",
    "code": "$storageAccountName = \"yourstorageaccount\"\n$containerName = \"yourcontainer\"\n$blobName = \"file.txt\"\n$fileToUpload = \"./local-file.txt\"\n$sasToken = \"?sv=2020-08-04&ss=bfqt&srt=sco&sp=rwdlacup&se=...\"\n\n$ctx = New-AzStorageContext -StorageAccountName $storageAccountName -SasToken $sasToken\n\nSet-AzStorageBlobContent \n  -File $fileToUpload \n  -Container $containerName \n  -Blob $blobName \n  -Context $ctx \n  -Force",
    "language": "powershell",
    "tags": [
      "powershell",
      "azure",
      "storage"
    ]
  },
  {
    "title": "Arduino MQTT Client",
    "code": "#include <WiFi.h>\n#include <PubSubClient.h>\n\nconst char* ssid = \"yourSSID\";\nconst char* password = \"yourPassword\";\nconst char* mqtt_server = \"broker.example.com\";\n\nWiFiClient espClient;\nPubSubClient client(espClient);\n\nvoid setup_wifi() {\n  WiFi.begin(ssid, password);\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n  }\n}\n\nvoid reconnect() {\n  while (!client.connected()) {\n    if (client.connect(\"arduinoClient\")) {\n      client.subscribe(\"topic/in\");\n    }\n  }\n}\n\nvoid setup() {\n  setup_wifi();\n  client.setServer(mqtt_server, 1883);\n}\n\nvoid loop() {\n  if (!client.connected()) {\n    reconnect();\n  }\n  client.loop();\n}",
    "language": "arduino",
    "tags": [
      "arduino",
      "mqtt",
      "iot"
    ]
  },
  {
    "title": "Raspberry Pi GPIO Web Server",
    "code": "from flask import Flask, render_template\nimport RPi.GPIO as GPIO\n\napp = Flask(__name__)\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(18, GPIO.OUT)\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/toggle')\ndef toggle():\n    GPIO.output(18, not GPIO.input(18))\n    return 'OK'\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=80, debug=True)",
    "language": "python",
    "tags": [
      "raspberrypi",
      "flask",
      "gpio"
    ]
  },
  {
    "title": "Android Retrofit API Call",
    "code": "interface ApiService {\n    @GET(\"users/{id}\")\n    suspend fun getUser(@Path(\"id\") id: Int): Response<User>\n}\n\nval retrofit = Retrofit.Builder()\n    .baseUrl(\"https://api.example.com/\")\n    .addConverterFactory(GsonConverterFactory.create())\n    .build()\n\nval service = retrofit.create(ApiService::class.java)\n\nviewModelScope.launch {\n    try {\n        val response = service.getUser(1)\n        if (response.isSuccessful) {\n            val user = response.body()\n            // Update UI\n        }\n    } catch (e: Exception) {\n        // Handle error\n    }\n}",
    "language": "kotlin",
    "tags": [
      "android",
      "retrofit",
      "api"
    ]
  },
  {
    "title": "Xcode Swift Concurrency",
    "code": "func fetchData() async throws -> [String] {\n    let url = URL(string: \"https://api.example.com/data\")!\n    let (data, _) = try await URLSession.shared.data(from: url)\n    return try JSONDecoder().decode([String].self, from: data)\n}\n\nTask {\n    do {\n        let items = try await fetchData()\n        DispatchQueue.main.async {\n            self.items = items\n        }\n    } catch {\n        print(\"Error: \\(error)\")\n    }\n}",
    "language": "swift",
    "tags": [
      "xcode",
      "swift",
      "concurrency"
    ]
  },
  {
    "title": "Vim Git Integration",
    "code": "\" Fugitive.vim commands\n:Gstatus \" Show git status\n:Gcommit \" Commit staged changes\n:Gpush \" Push to remote\n:Gpull \" Pull from remote\n:Gblame \" Show blame information\n:Gdiff \" Show changes in diff mode\n:Gedit : \" Edit file in index\n:Gread \" Checkout file from index\n:Gmove \" Git mv\n:Gdelete \" Git rm",
    "language": "vim",
    "tags": [
      "vim",
      "git",
      "version-control"
    ]
  },
  {
    "title": "VSCode Docker Setup",
    "code": "{\n  \"docker.containers\": {\n    \"description\": \"Dev container configuration\",\n    \"dockerComposeFile\": \"docker-compose.yml\",\n    \"service\": \"app\",\n    \"workspaceFolder\": \"/workspace\",\n    \"extensions\": [\n      \"dbaeumer.vscode-eslint\",\n      \"esbenp.prettier-vscode\"\n    ],\n    \"settings\": {\n      \"terminal.integrated.shell.linux\": \"/bin/bash\"\n    }\n  }\n}",
    "language": "json",
    "tags": [
      "vscode",
      "docker",
      "devcontainer"
    ]
  },
  {
    "title": "IntelliJ Code Templates",
    "code": "<template name=\"logger\" value=\"private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger($CLASS_NAME$.class);\" description=\"Insert logger declaration\" toReformat=\"true\" toShortenFQNames=\"true\">\n  <variable name=\"CLASS_NAME\" expression=\"className()\" defaultValue=\"\" alwaysStopAt=\"false\"/>\n  <context>\n    <option name=\"JAVA_CODE\" value=\"true\"/>\n  </context>\n</template>",
    "language": "xml",
    "tags": [
      "intellij",
      "templates",
      "productivity"
    ]
  },
  {
    "title": "Eclipse Code Formatter",
    "code": "org.eclipse.jdt.core.formatter.align_type_members_on_columns=false\norg.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression=16\norg.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant=16\norg.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call=16\norg.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation=16\norg.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression=16\norg.eclipse.jdt.core.formatter.alignment_for_assignment=16\norg.eclipse.jdt.core.formatter.alignment_for_binary_expression=16\norg.eclipse.jdt.core.formatter.alignment_for_compact_if=16\norg.eclipse.jdt.core.formatter.alignment_for_conditional_expression=80",
    "language": "properties",
    "tags": [
      "eclipse",
      "formatter",
      "java"
    ]
  },
  {
    "title": "Two Sum Problem (Hash Map)",
    "code": "def two_sum(nums, target):\n    seen = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            return [seen[complement], i]\n        seen[num] = i\n    return []",
    "language": "python",
    "tags": [
      "hash-table",
      "interview",
      "leetcode"
    ]
  },
  {
    "title": "Frequency Counter (Anagram Check)",
    "code": "def is_anagram(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    freq = {}\n    for char in s1:\n        freq[char] = freq.get(char, 0) + 1\n    for char in s2:\n        if char not in freq or freq[char] == 0:\n            return False\n        freq[char] -= 1\n    return True",
    "language": "python",
    "tags": [
      "hash-table",
      "string",
      "interview"
    ]
  },
  {
    "title": "BFS (Shortest Path in Unweighted Graph)",
    "code": "from collections import deque\n\ndef bfs_shortest_path(graph, start, end):\n    queue = deque([(start, [start])])\n    visited = set()\n    while queue:\n        node, path = queue.popleft()\n        if node == end:\n            return path\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                queue.append((neighbor, path + [neighbor]))\n    return []",
    "language": "python",
    "tags": [
      "graph",
      "bfs",
      "shortest-path"
    ]
  },
  {
    "title": "DFS (Recursive Traversal)",
    "code": "def dfs(graph, node, visited=None):\n    if visited is None:\n        visited = set()\n    visited.add(node)\n    print(node)\n    for neighbor in graph[node]:\n        if neighbor not in visited:\n            dfs(graph, neighbor, visited)",
    "language": "python",
    "tags": [
      "graph",
      "dfs",
      "recursion"
    ]
  },
  {
    "title": "Binary Tree Inorder Traversal (Recursive)",
    "code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef inorder_traversal(root):\n    res = []\n    def traverse(node):\n        if node:\n            traverse(node.left)\n            res.append(node.val)\n            traverse(node.right)\n    traverse(root)\n    return res",
    "language": "python",
    "tags": [
      "tree",
      "binary-tree",
      "interview"
    ]
  },
  {
    "title": "Check if Binary Tree is Balanced",
    "code": "def is_balanced(root):\n    def check(node):\n        if not node:\n            return 0\n        left = check(node.left)\n        right = check(node.right)\n        if left == -1 or right == -1 or abs(left - right) > 1:\n            return -1\n        return max(left, right) + 1\n    return check(root) != -1",
    "language": "python",
    "tags": [
      "tree",
      "binary-tree",
      "interview"
    ]
  },
  {
    "title": "Longest Substring Without Repeating Characters",
    "code": "def length_of_longest_substring(s):\n    seen = {}\n    left = max_len = 0\n    for right, char in enumerate(s):\n        if char in seen and seen[char] >= left:\n            left = seen[char] + 1\n        seen[char] = right\n        max_len = max(max_len, right - left + 1)\n    return max_len",
    "language": "python",
    "tags": [
      "string",
      "sliding-window",
      "interview"
    ]
  },
  {
    "title": "Palindrome Check (Two-Pointer)",
    "code": "def is_palindrome(s):\n    s = ''.join(c.lower() for c in s if c.isalnum())\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] != s[right]:\n            return False\n        left += 1\n        right -= 1\n    return True",
    "language": "python",
    "tags": [
      "string",
      "palindrome",
      "interview"
    ]
  },
  {
    "title": "Rotate Matrix (90 Degrees Clockwise)",
    "code": "def rotate_matrix(matrix):\n    n = len(matrix)\n    # Transpose the matrix\n    for i in range(n):\n        for j in range(i, n):\n            matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n    # Reverse each row\n    for row in matrix:\n        row.reverse()\n    return matrix",
    "language": "python",
    "tags": [
      "array",
      "matrix",
      "interview",
      "leetcode"
    ]
  },
  {
    "title": "Find Missing Number (XOR Approach)",
    "code": "def missing_number(nums):\n    missing = len(nums)\n    for i, num in enumerate(nums):\n        missing ^= i ^ num\n    return missing",
    "language": "python",
    "tags": [
      "array",
      "bitwise",
      "interview"
    ]
  },
  {
    "title": "Longest Palindromic Substring (Expand Around Center)",
    "code": "def longest_palindrome(s):\n    def expand(l, r):\n        while l >= 0 and r < len(s) and s[l] == s[r]:\n            l -= 1\n            r += 1\n        return s[l+1:r]\n    res = ''\n    for i in range(len(s)):\n        odd = expand(i, i)\n        even = expand(i, i+1)\n        res = max(res, odd, even, key=len)\n    return res",
    "language": "python",
    "tags": [
      "string",
      "palindrome",
      "interview",
      "leetcode"
    ]
  },
  {
    "title": "String Compression (LeetCode #443)",
    "code": "def compress(chars):\n    write = anchor = 0\n    for read, c in enumerate(chars):\n        if read + 1 == len(chars) or chars[read + 1] != c:\n            chars[write] = chars[anchor]\n            write += 1\n            if read > anchor:\n                for digit in str(read - anchor + 1):\n                    chars[write] = digit\n                    write += 1\n            anchor = read + 1\n    return write",
    "language": "python",
    "tags": [
      "string",
      "compression",
      "interview"
    ]
  },
  {
    "title": "Merge Two Sorted Linked Lists",
    "code": "def merge_two_lists(l1, l2):\n    dummy = ListNode()\n    tail = dummy\n    while l1 and l2:\n        if l1.val < l2.val:\n            tail.next = l1\n            l1 = l1.next\n        else:\n            tail.next = l2\n            l2 = l2.next\n        tail = tail.next\n    tail.next = l1 or l2\n    return dummy.next",
    "language": "python",
    "tags": [
      "linked-list",
      "merge",
      "interview"
    ]
  },
  {
    "title": "Remove Nth Node From End (Two-Pass)",
    "code": "def remove_nth_from_end(head, n):\n    dummy = ListNode(0, head)\n    fast = dummy\n    for _ in range(n + 1):\n        fast = fast.next\n    slow = dummy\n    while fast:\n        slow = slow.next\n        fast = fast.next\n    slow.next = slow.next.next\n    return dummy.next",
    "language": "python",
    "tags": [
      "linked-list",
      "two-pointer",
      "interview"
    ]
  },
  {
    "title": "Validate Binary Search Tree (BST)",
    "code": "def is_valid_bst(root):\n    def validate(node, low=-float('inf'), high=float('inf')):\n        if not node:\n            return True\n        if node.val <= low or node.val >= high:\n            return False\n        return (validate(node.left, low, node.val) and \n                validate(node.right, node.val, high))\n    return validate(root)",
    "language": "python",
    "tags": [
      "tree",
      "bst",
      "interview"
    ]
  },
  {
    "title": "Lowest Common Ancestor (LCA) in BST",
    "code": "def lowest_common_ancestor(root, p, q):\n    while root:\n        if p.val < root.val and q.val < root.val:\n            root = root.left\n        elif p.val > root.val and q.val > root.val:\n            root = root.right\n        else:\n            return root",
    "language": "python",
    "tags": [
      "tree",
      "bst",
      "interview"
    ]
  },
  {
    "title": "Merge K Sorted Lists (Heap)",
    "code": "import heapq\ndef merge_k_lists(lists):\n    heap = []\n    for i, lst in enumerate(lists):\n        if lst:\n            heapq.heappush(heap, (lst.val, i, lst))\n    dummy = ListNode()\n    tail = dummy\n    while heap:\n        val, i, node = heapq.heappop(heap)\n        tail.next = node\n        tail = tail.next\n        if node.next:\n            heapq.heappush(heap, (node.next.val, i, node.next))\n    return dummy.next",
    "language": "python",
    "tags": [
      "heap",
      "priority-queue",
      "interview"
    ]
  },
  {
    "title": "Top K Frequent Elements (Bucket Sort)",
    "code": "def top_k_frequent(nums, k):\n    freq = {}\n    for num in nums:\n        freq[num] = freq.get(num, 0) + 1\n    bucket = [[] for _ in range(len(nums) + 1)]\n    for num, count in freq.items():\n        bucket[count].append(num)\n    res = []\n    for i in range(len(bucket) - 1, -1, -1):\n        res.extend(bucket[i])\n        if len(res) >= k:\n            break\n    return res[:k]",
    "language": "python",
    "tags": [
      "heap",
      "bucket-sort",
      "interview"
    ]
  },
  {
    "title": "Fibonacci (Memoization)",
    "code": "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef fib(n):\n    if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)",
    "language": "python",
    "tags": [
      "dp",
      "memoization",
      "interview"
    ]
  },
  {
    "title": "Coin Change Problem (DP)",
    "code": "def coin_change(coins, amount):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n    for coin in coins:\n        for x in range(coin, amount + 1):\n            dp[x] = min(dp[x], dp[x - coin] + 1)\n    return dp[amount] if dp[amount] != float('inf') else -1",
    "language": "python",
    "tags": [
      "dp",
      "coin-change",
      "interview"
    ]
  },
  {
    "title": "ERC-20 Token Contract (Solidity)",
    "code": "pragma solidity ^0.8.0;\n\ncontract ERC20 {\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    \n    function transfer(address recipient, uint256 amount) external returns (bool) {\n        _balances[msg.sender] -= amount;\n        _balances[recipient] += amount;\n        emit Transfer(msg.sender, recipient, amount);\n        return true;\n    }\n}",
    "language": "solidity",
    "tags": [
      "blockchain",
      "ethereum",
      "smart-contract"
    ]
  },
  {
    "title": "Fetch ETH Balance (Web3.js)",
    "code": "const Web3 = require('web3');\nconst web3 = new Web3('https://mainnet.infura.io/v3/YOUR_API_KEY');\n\nasync function getBalance(address) {\n    const balance = await web3.eth.getBalance(address);\n    console.log(web3.utils.fromWei(balance, 'ether'));\n}",
    "language": "javascript",
    "tags": [
      "blockchain",
      "web3",
      "ethereum"
    ]
  },
  {
    "title": "Send Transaction (Ethers.js)",
    "code": "const { ethers } = require('ethers');\nconst provider = new ethers.providers.JsonRpcProvider('https://mainnet.infura.io/v3/YOUR_API_KEY');\nconst wallet = new ethers.Wallet('PRIVATE_KEY', provider);\n\nasync function sendETH(to, amount) {\n    const tx = await wallet.sendTransaction({\n        to: to,\n        value: ethers.utils.parseEther(amount)\n    });\n    await tx.wait();\n    console.log('Transaction confirmed');\n}",
    "language": "javascript",
    "tags": [
      "blockchain",
      "ethers",
      "transactions"
    ]
  },
  {
    "title": "Quantum Teleportation (Qiskit)",
    "code": "from qiskit import QuantumCircuit, execute, Aer\n\nqc = QuantumCircuit(3, 3)\nqc.h(1)\nqc.cx(1, 2)\nqc.cx(0, 1)\nqc.h(0)\nqc.measure([0, 1], [0, 1])\nqc.cx(1, 2)\nqc.cz(0, 2)\n\nsimulator = Aer.get_backend('qasm_simulator')\nresult = execute(qc, simulator, shots=1024).result()\nprint(result.get_counts())",
    "language": "python",
    "tags": [
      "quantum",
      "qiskit",
      "teleportation"
    ]
  },
  {
    "title": "Grover's Search Algorithm",
    "code": "from qiskit import QuantumCircuit\nfrom qiskit.algorithms import AmplificationProblem\nfrom qiskit.algorithms import Grover\n\noracle = QuantumCircuit(2)\noracle.cz(0, 1)  # Marks |11\u27e9\nproblem = AmplificationProblem(oracle, is_good_state=['11'])\ngrover = Grover(iterations=1)\nresult = grover.amplify(problem)\nprint(result.top_measurement)",
    "language": "python",
    "tags": [
      "quantum",
      "grover",
      "search"
    ]
  },
  {
    "title": "UiPath Excel Automation",
    "code": "// Read Excel Data\nvar dataTable = Excel.ReadRange(\"Sheet1\", \"A1:D10\");\n\n// Loop Through Rows\nforeach (var row in dataTable.Rows) {\n    Log.Message(row[\"Name\"].ToString());\n}",
    "language": "csharp",
    "tags": [
      "rpa",
      "uipath",
      "excel"
    ]
  },
  {
    "title": "Python Web Scraping (Selenium)",
    "code": "from selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\ndriver = webdriver.Chrome()\ndriver.get('https://example.com')\nelements = driver.find_elements(By.CLASS_NAME, 'product')\nfor element in elements:\n    print(element.text)\ndriver.quit()",
    "language": "python",
    "tags": [
      "rpa",
      "selenium",
      "web-scraping"
    ]
  },
  {
    "title": "Pandas DataFrame Cleaning",
    "code": "import pandas as pd\n\ndf = pd.read_csv('data.csv')\ndf.dropna(inplace=True)\ndf['date'] = pd.to_datetime(df['date'])\ndf = df[df['value'] > 0]",
    "language": "python",
    "tags": [
      "data",
      "pandas",
      "cleaning"
    ]
  },
  {
    "title": "SQL Window Function (PostgreSQL)",
    "code": "SELECT user_id, date,\n       SUM(amount) OVER (PARTITION BY user_id ORDER BY date) AS running_total\nFROM transactions;",
    "language": "sql",
    "tags": [
      "sql",
      "postgresql",
      "window-function"
    ]
  },
  {
    "title": "Unity AR Foundation (Place Object)",
    "code": "using UnityEngine;\nusing UnityEngine.XR.ARFoundation;\n\npublic class PlaceObject : MonoBehaviour {\n    public GameObject objectToPlace;\n    private ARRaycastManager raycastManager;\n\n    void Update() {\n        if (Input.touchCount > 0) {\n            Touch touch = Input.GetTouch(0);\n            if (touch.phase == TouchPhase.Began) {\n                var hits = new List<ARRaycastHit>();\n                if (raycastManager.Raycast(touch.position, hits)) {\n                    Instantiate(objectToPlace, hits[0].pose.position, Quaternion.identity);\n                }\n            }\n        }\n    }\n}",
    "language": "csharp",
    "tags": [
      "ar",
      "unity",
      "ar-foundation"
    ]
  },
  {
    "title": "Three.js VR Scene",
    "code": "import * as THREE from 'three';\nimport { VRButton } from 'three/examples/jsm/webxr/VRButton.js';\n\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\nconst renderer = new THREE.WebGLRenderer({ antialias: true });\nrenderer.xr.enabled = true;\ndocument.body.appendChild(VRButton.createButton(renderer));",
    "language": "javascript",
    "tags": [
      "vr",
      "threejs",
      "webxr"
    ]
  },
  {
    "title": "ASP.NET Core JWT Authentication",
    "code": "services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n    .AddJwtBearer(options => {\n        options.TokenValidationParameters = new TokenValidationParameters {\n            ValidateIssuer = true,\n            ValidateAudience = true,\n            ValidateLifetime = true,\n            ValidIssuer = Configuration[\"Jwt:Issuer\"],\n            ValidAudience = Configuration[\"Jwt:Audience\"],\n            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(Configuration[\"Jwt:Key\"]))\n        };\n    });",
    "language": "csharp",
    "tags": [
      ".net",
      "aspnetcore",
      "jwt"
    ]
  },
  {
    "title": "Entity Framework Core Query",
    "code": "var users = await dbContext.Users\n    .Where(u => u.IsActive)\n    .OrderBy(u => u.LastName)\n    .Select(u => new { u.Id, u.Email })\n    .ToListAsync();",
    "language": "csharp",
    "tags": [
      ".net",
      "efcore",
      "database"
    ]
  },
  {
    "title": "Burp Suite API Security Scanner",
    "code": "from burp import IBurpExtender, IScannerCheck\n\nclass BurpExtender(IBurpExtender, IScannerCheck):\n    def registerExtenderCallbacks(self, callbacks):\n        self._callbacks = callbacks\n        self._helpers = callbacks.getHelpers()\n        callbacks.setExtensionName(\"API Security Checker\")\n        callbacks.registerScannerCheck(self)\n\n    def doPassiveScan(self, baseRequestResponse):\n        issues = []\n        response = baseRequestResponse.getResponse()\n        \n        # Check for missing security headers\n        if \"X-Content-Type-Options: nosniff\" not in response:\n            issues.append(self._callbacks.applyCustomScannerIssue(\n                baseRequestResponse,\n                \"Missing Security Headers\",\n                \"Add 'X-Content-Type-Options: nosniff'\",\n                \"High\"\n            ))\n        return issues",
    "language": "python",
    "tags": [
      "burp-suite",
      "api-security",
      "production"
    ]
  },
  {
    "title": "Metasploit Port Scanner (Ruby)",
    "code": "require 'msf/core'\n\nframework = Msf::Simple::Framework.create(\n  'ConfigDirectory' => '/opt/metasploit/config',\n  'DisableDatabase' => false\n)\n\n# Target from CI/CD env\ntarget = ENV['TARGET_IP']\nscanner = framework.modules.create('auxiliary/scanner/portscan/tcp')\nscanner.datastore['RHOSTS'] = target\nscanner.datastore['PORTS'] = '1-1000'\nscanner.run_simple('Verbose' => true)\n\n# Log to file\nFile.open('/var/log/pen_tests.log', 'a') { |f| \n  f.puts \"#{Time.now} - Scan completed for #{target}\"\n}",
    "language": "ruby",
    "tags": [
      "metasploit",
      "pentesting",
      "security",
      "production"
    ]
  },
  {
    "title": "Splunk Query: Brute Force Attack Detection",
    "code": "index=firewall_logs sourcetype=cisco:asa \n| stats count by src_ip, dest_port \n| where count > 5  \n| lookup threat_intel.csv src_ip OUTPUT threat_level \n| where threat_level=\"high\" \n| outputlookup append=true alerts.csv",
    "language": "splunk",
    "tags": [
      "splunk",
      "siem",
      "security",
      "production"
    ]
  },
  {
    "title": "Snowflake Data Load (Production)",
    "code": "from snowflake.snowpark import Session\nimport os\n\n# Secure connection (env vars)\nsession = Session.builder.configs({\n    \"account\": os.getenv(\"SNOWFLAKE_ACCOUNT\"),\n    \"user\": os.getenv(\"SNOWFLAKE_USER\"),\n    \"password\": os.getenv(\"SNOWFLAKE_PWD\"),\n    \"warehouse\": \"PROD_WH\",\n    \"database\": \"FINANCE_DB\",\n    \"schema\": \"TRANSACTIONS\"\n}).create()\n\ntry:\n    # Load from S3 stage\n    df = session.read.csv(\"@MY_S3_STAGE/transactions_*.csv\")\n    \n    # Transform\n    df = df.with_column(\"LOAD_TS\", current_timestamp())\n    \n    # Write with auto-clustering\n    df.write.mode(\"overwrite\").save_as_table(\"TRANSACTIONS_FACT\", \n        clustering_keys=[\"CUSTOMER_ID\"])\n\nexcept Exception as e:\n    session.sql(f\"CALL SYSTEM$LOG_ERROR('{str(e)}')\").collect()\n    raise\n\nfinally:\n    session.close()",
    "language": "python",
    "tags": [
      "snowflake",
      "snowpark",
      "data-warehouse",
      "production"
    ]
  },
  {
    "title": "Spark ETL with Delta Lake (Production)",
    "code": "from pyspark.sql import SparkSession\nfrom delta import *\n\n# Initialize Spark with Delta Lake\nspark = SparkSession.builder \\\n    .appName(\"ProdETL\") \\\n    .config(\"spark.sql.extensions\", \"io.delta.sql.DeltaSparkSessionExtension\") \\\n    .config(\"spark.sql.catalog.spark_catalog\", \"org.apache.spark.sql.delta.catalog.DeltaCatalog\") \\\n    .getOrCreate()\n\n# Read from S3 (IAM roles recommended)\ndf = spark.read.parquet(\"s3a://prod-bucket/raw-data/\")\n\n# Transform with error handling\ntry:\n    df_clean = df.filter(\"amount > 0\") \\\n                .withColumn(\"load_ts\", current_timestamp())\nexcept Exception as e:\n    log_error_to_splunk(f\"ETL failed: {str(e)}\")\n    raise\n\n# Write to Delta Lake (ACID compliant)\ndf_clean.write.format(\"delta\") \\\n    .mode(\"overwrite\") \\\n    .save(\"s3a://prod-bucket/processed-data/\")\n\n# Optimize for queries\nspark.sql(\"OPTIMIZE delta.`s3a://prod-bucket/processed-data/` ZORDER BY (customer_id)\")",
    "language": "python",
    "tags": [
      "spark",
      "etl",
      "delta-lake",
      "production"
    ]
  },
  {
    "title": "ASP.NET Core Minimal API with JWT Auth",
    "code": "var builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n    .AddJwtBearer(options => {\n        options.TokenValidationParameters = new() {\n            ValidateIssuer = true,\n            ValidIssuer = builder.Configuration[\"Jwt:Issuer\"],\n            ValidateAudience = true,\n            ValidAudience = builder.Configuration[\"Jwt:Audience\"],\n            IssuerSigningKey = new SymmetricSecurityKey(\n                Encoding.UTF8.GetBytes(builder.Configuration[\"Jwt:Key\"]!)\n            )\n        };\n    });\n\nvar app = builder.Build();\napp.MapGet(\"/secure\", () => \"Authorized!\")\n   .RequireAuthorization();\napp.Run();",
    "language": "csharp",
    "tags": [
      ".net",
      "aspnetcore",
      "jwt",
      "minimalapi"
    ]
  },
  {
    "title": "EF Core Bulk Insert (High Performance)",
    "code": "using var context = new AppDbContext();\nvar entities = new List<Customer>();\n\n// Generate 10K records\nfor (int i = 0; i < 10_000; i++)\n    entities.Add(new Customer { Name = $\"Customer_{i}\" });\n\nawait context.BulkInsertAsync(entities, options => {\n    options.BatchSize = 1000;\n});",
    "language": "csharp",
    "tags": [
      ".net",
      "efcore",
      "performance",
      "bulkinsert"
    ]
  },
  {
    "title": "Parallel.ForEach with Async (Concurrency Control)",
    "code": "var urls = new List<string> { \"url1\", \"url2\", \"url3\" };\nvar options = new ParallelOptions { MaxDegreeOfParallelism = 4 };\n\nawait Parallel.ForEachAsync(urls, options, async (url, ct) => {\n    using var client = new HttpClient();\n    var response = await client.GetAsync(url, ct);\n    Console.WriteLine(await response.Content.ReadAsStringAsync());\n});",
    "language": "csharp",
    "tags": [
      ".net",
      "parallelism",
      "async",
      "performance"
    ]
  },
  {
    "title": "Dynamic LINQ Query Builder",
    "code": "var query = dbContext.Products.AsQueryable();\n\nif (filterByPrice)\n    query = query.Where(p => p.Price < 100);\n\nif (sortByDate)\n    query = query.OrderBy(p => p.CreatedDate);\n\nvar results = await query.ToListAsync();",
    "language": "csharp",
    "tags": [
      ".net",
      "linq",
      "dynamic",
      "efcore"
    ]
  },
  {
    "title": "Pandas Multi-Index Aggregation",
    "code": "import pandas as pd\n\ndf = pd.read_csv('sales.csv')\nresult = df.groupby(['Region', 'Product']).agg({\n    'Sales': ['sum', 'mean'],\n    'Profit': 'median'\n})",
    "language": "python",
    "tags": [
      "pandas",
      "data-analysis",
      "groupby",
      "multi-index"
    ]
  },
  {
    "title": "PySpark Delta Lake Upsert (Merge)",
    "code": "from pyspark.sql import SparkSession\n\nspark = SparkSession.builder \\\n    .config(\"spark.sql.extensions\", \"io.delta.sql.DeltaSparkSessionExtension\") \\\n    .getOrCreate()\n\n# Merge (Upsert) operation\ndeltaTable = DeltaTable.forPath(spark, \"/data/events\")\ndeltaTable.alias(\"target\").merge(\n    updatesDF.alias(\"source\"),\n    \"target.id = source.id\"\n).whenMatchedUpdateAll() \\\n .whenNotMatchedInsertAll() \\\n .execute()",
    "language": "python",
    "tags": [
      "pyspark",
      "delta-lake",
      "bigdata",
      "upsert"
    ]
  },
  {
    "title": "Dask Parallel DataFrame Processing",
    "code": "import dask.dataframe as dd\n\nddf = dd.read_csv('large_dataset/*.csv')\nresult = ddf.groupby('category').price.mean().compute()",
    "language": "python",
    "tags": [
      "dask",
      "parallel",
      "bigdata",
      "dataframe"
    ]
  },
  {
    "title": "SQL Window Functions (PostgreSQL)",
    "code": "SELECT \n    user_id,\n    order_date,\n    amount,\n    SUM(amount) OVER (PARTITION BY user_id ORDER BY order_date) AS running_total,\n    RANK() OVER (PARTITION BY user_id ORDER BY amount DESC) AS rank\nFROM orders;",
    "language": "sql",
    "tags": [
      "sql",
      "postgresql",
      "window-functions",
      "analytics"
    ]
  },
  {
    "title": "TensorFlow 2.0 Custom Training Loop",
    "code": "import tensorflow as tf\n\nmodel = tf.keras.Sequential([...])\noptimizer = tf.keras.optimizers.Adam()\nloss_fn = tf.keras.losses.SparseCategoricalCrossentropy()\n\nfor epoch in range(10):\n    for batch in train_dataset:\n        with tf.GradientTape() as tape:\n            preds = model(batch[0], training=True)\n            loss = loss_fn(batch[1], preds)\n        grads = tape.gradient(loss, model.trainable_weights)\n        optimizer.apply_gradients(zip(grads, model.trainable_weights))",
    "language": "python",
    "tags": [
      "tensorflow",
      "deeplearning",
      "custom-training"
    ]
  },
  {
    "title": "scikit-learn Hyperparameter Tuning (Optuna)",
    "code": "import optuna\nfrom sklearn.ensemble import RandomForestClassifier\n\ndef objective(trial):\n    params = {\n        'n_estimators': trial.suggest_int('n_estimators', 50, 200),\n        'max_depth': trial.suggest_int('max_depth', 3, 10)\n    }\n    model = RandomForestClassifier(**params)\n    return cross_val_score(model, X, y, cv=5).mean()\n\nstudy = optuna.create_study(direction='maximize')\nstudy.optimize(objective, n_trials=50)",
    "language": "python",
    "tags": [
      "scikit-learn",
      "hyperparameter",
      "optuna",
      "ml"
    ]
  },
  {
    "title": "Pandas Time Series Resampling",
    "code": "df.set_index('timestamp', inplace=True)\ndaily = df.resample('D').agg({'price': 'mean', 'volume': 'sum'})",
    "language": "python",
    "tags": [
      "pandas",
      "timeseries",
      "resampling"
    ]
  },
  {
    "title": "Feature Engineering with FeatureTools",
    "code": "import featuretools as ft\n\nes = ft.EntitySet(id='transactions')\nes.add_dataframe(dataframe=df, dataframe_name='sales', index='id', time_index='date')\nfeatures, defs = ft.dfs(entityset=es, target_dataframe_name='sales')",
    "language": "python",
    "tags": [
      "featuretools",
      "automl",
      "feature-engineering"
    ]
  },
  {
    "title": "NLP with SpaCy (Custom Pipeline)",
    "code": "import spacy\n\nnlp = spacy.load('en_core_web_lg')\nnlp.add_pipe('sentencizer')\n\ndoc = nlp(\"Apple is looking at buying U.K. startup for $1 billion.\")\nfor ent in doc.ents:\n    print(ent.text, ent.label_)",
    "language": "python",
    "tags": [
      "nlp",
      "spacy",
      "named-entity-recognition"
    ]
  },
  {
    "title": "Graph Analysis with NetworkX",
    "code": "import networkx as nx\n\nG = nx.Graph()\nG.add_edges_from([(1, 2), (2, 3), (3, 1)])\nprint(\"Betweenness Centrality:\", nx.betweenness_centrality(G))",
    "language": "python",
    "tags": [
      "networkx",
      "graph",
      "centrality"
    ]
  },
  {
    "title": "PyTorch Model Serving with FastAPI",
    "code": "from fastapi import FastAPI\nimport torch\nfrom pydantic import BaseModel\n\napp = FastAPI()\nmodel = torch.load('model.pt').eval()\n\nclass PredictionRequest(BaseModel):\n    input_data: list[float]\n\n@app.post('/predict')\ndef predict(request: PredictionRequest):\n    tensor = torch.tensor(request.input_data)\n    with torch.no_grad():\n        prediction = model(tensor).item()\n    return {'prediction': prediction}",
    "language": "python",
    "tags": [
      "ai",
      "pytorch",
      "fastapi",
      "production"
    ]
  },
  {
    "title": "LangChain RAG Pipeline with Pinecone",
    "code": "from langchain.vectorstores import Pinecone\nfrom langchain.embeddings import OpenAIEmbeddings\nimport pinecone\n\npinecone.init(api_key=os.getenv('PINECONE_API_KEY'))\nembeddings = OpenAIEmbeddings()\n\n# Production-ready retrieval system\ndef retrieve_docs(query: str, index_name: str, top_k: int = 3):\n    docsearch = Pinecone.from_existing_index(index_name, embeddings)\n    return docsearch.similarity_search(query, k=top_k)",
    "language": "python",
    "tags": [
      "ai",
      "langchain",
      "pinecone",
      "rag"
    ]
  },
  {
    "title": "AWS IAM Least Privilege Policy Generator",
    "code": "import boto3\n\ndef generate_least_privilege_policy(actions, resources):\n    iam = boto3.client('iam')\n    policy = {\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [{\n            \"Effect\": \"Allow\",\n            \"Action\": actions,\n            \"Resource\": resources,\n            \"Condition\": {\n                \"IpAddress\": {\"aws:SourceIp\": [\"192.0.2.0/24\"]}\n            }\n        }]\n    }\n    return iam.create_policy(\n        PolicyName='LeastPrivilegePolicy',\n        PolicyDocument=json.dumps(policy)\n    )",
    "language": "python",
    "tags": [
      "aws",
      "iam",
      "security",
      "production"
    ]
  },
  {
    "title": "Azure Sentinel Threat Hunting Query",
    "code": "SecurityEvent\n| where EventID == 4625\n| where TimeGenerated > ago(1h)\n| summarize FailedAttempts=count() by Account\n| where FailedAttempts > 5\n| join kind=inner (SecurityEvent | where EventID == 4624) on Account\n| project Account, FailedAttempts, LastSuccessfulLogin=TimeGenerated",
    "language": "kql",
    "tags": [
      "azure",
      "sentinel",
      "siem"
    ]
  },
  {
    "title": "Apache Kafka Producer with Avro Schema",
    "code": "from confluent_kafka import avro, Producer\n\nconfig = {\n    'bootstrap.servers': 'kafka-prod:9092',\n    'schema.registry.url': 'http://schema-registry:8081'\n}\n\nproducer = Producer({\n    **config,\n    'partitioner': 'consistent_random'  # Production partitioning\n})\n\ndef delivery_report(err, msg):\n    if err:\n        log_error(f\"Message failed: {err}\")\n\nvalue_schema = avro.loads('''{\"type\": \"record\", \"name\": \"Payment\", \"fields\": [{\"name\": \"amount\", \"type\": \"float\"}]}''')\n\nproducer.produce(\n    topic='payments',\n    value={\"amount\": 99.99},\n    value_schema=value_schema,\n    callback=delivery_report\n)\nproducer.flush()",
    "language": "python",
    "tags": [
      "kafka",
      "avro",
      "data-engineering"
    ]
  },
  {
    "title": "Databricks Delta Live Tables Pipeline",
    "code": "CREATE LIVE TABLE cleaned_sales (\n  CONSTRAINT valid_amount EXPECT (amount > 0) ON VIOLATION DROP ROW\n) AS\nSELECT \n  order_id, \n  amount * 0.8 AS amount_after_tax  -- Business logic\nFROM live.raw_sales",
    "language": "sql",
    "tags": [
      "databricks",
      "delta-lake",
      "elt"
    ]
  },
  {
    "title": "Prometheus Custom Metric (Python)",
    "code": "from prometheus_client import Gauge, start_http_server\n\n# Production metric with labels\nPAYMENT_STATUS = Gauge(\n    'payment_status', \n    'Status of payments', \n    ['payment_method', 'country']\n)\n\ndef process_payment():\n    try:\n        # Payment logic\n        PAYMENT_STATUS.labels(\n            payment_method='credit_card', \n            country='US'\n        ).set(1)\n    except Exception:\n        PAYMENT_STATUS.labels(\n            payment_method='credit_card',\n            country='US'\n        ).set(0)\n\nstart_http_server(8000)  # Exposes /metrics endpoint",
    "language": "python",
    "tags": [
      "prometheus",
      "monitoring",
      "observability"
    ]
  },
  {
    "title": "OpenTelemetry Python Instrumentation",
    "code": "from opentelemetry import trace\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor\nfrom opentelemetry.exporter.otlp.proto.grpc.trace_exporter import OTLPSpanExporter\n\n# Production tracing setup\ntrace.set_tracer_provider(TracerProvider())\ntrace.get_tracer_provider().add_span_processor(\n    BatchSpanProcessor(OTLPSpanExporter(endpoint=\"otel-collector:4317\"))\n)\n\ntracer = trace.get_tracer(__name__)\n\nwith tracer.start_as_current_span(\"payment_processing\"):\n    # Business logic\n    pass",
    "language": "python",
    "tags": [
      "opentelemetry",
      "distributed-tracing",
      "observability"
    ]
  },
  {
    "title": "AI Generated: print hello word...",
    "description": "Automatically generated for search: print hello word",
    "code": "```java\npublic class HelloWorld {\n    public static void main(String[] args) { // Main method - entry point of execution\n        System.out.println(\"hello word\"); // Prints \"hello word\" to the console\n    }\n}\n```\n",
    "language": "Java",
    "tags": [
      "ai-generated",
      "auto-saved"
    ],
    "created_at": "2025-08-21T14:41:48.035862"
  },
  {
    "title": "AI Generated: print hello word...",
    "description": "Automatically generated for search: print hello word",
    "code": "```java\npublic class HelloWorld {\n    public static void main(String[] args) { // Main method - entry point of execution\n        System.out.println(\"hello world\"); // Prints \"hello world\" to the console\n    }\n}\n```\n",
    "language": "Java",
    "tags": [
      "ai-generated",
      "auto-saved"
    ],
    "created_at": "2025-08-21T14:47:25.259408"
  },
  {
    "title": "AI Generated: calculate factorial simple...",
    "description": "Automatically generated for search: calculate factorial simple",
    "code": "Several versions of a Python function to calculate the factorial, each with different levels of sophistication and error handling:\n\n**Version 1: Basic (no error handling)**\n\nThis version is simple and straightforward, but it doesn't handle invalid input (like negative numbers or non-integers).\n\n```python\ndef factorial_simple(n):\n  \"\"\"Calculates the factorial of a non-negative integer.\"\"\"\n  if n == 0:\n    return 1\n  else:\n    result = 1\n    for i in range(1, n + 1):\n      result *= i\n    return result\n\n```\n\n**Version 2: With Error Handling**\n\nThis version adds error handling to check for invalid input.\n\n```python\ndef factorial_with_error_handling(n):\n  \"\"\"Calculates the factorial of a non-negative integer.  Raises ValueError for invalid input.\"\"\"\n  if not isinstance(n, int):\n    raise ValueError(\"Input must be an integer.\")\n  elif n < 0:\n    raise ValueError(\"Input must be a non-negative integer.\")\n  elif n == 0:\n    return 1\n  else:\n    result = 1\n    for i in range(1, n + 1):\n      result *= i\n    return result\n\n```\n\n**Version 3: Recursive Approach (with error handling)**\n\nThis version uses recursion, a more elegant but potentially less efficient approach for very large numbers (due to recursion depth limits).\n\n```python\ndef factorial_recursive(n):\n    \"\"\"Calculates the factorial of a non-negative integer recursively. Raises ValueError for invalid input.\"\"\"\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer.\")\n    elif n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    elif n == 0:\n        return 1\n    else:\n        return n * factorial_recursive(n - 1)\n\n```\n\n**Version 4: Using the `math` module (most efficient)**\n\nThe `math` module provides a highly optimized factorial function.  This is generally the best approach for performance.\n\n```python\nimport math\n\ndef factorial_math(n):\n    \"\"\"Calculates the factorial using the math module. Raises ValueError for invalid input.\"\"\"\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer.\")\n    elif n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    else:\n        return math.factorial(n)\n\n```\n\nRemember to choose the version that best suits your needs.  For most cases, `factorial_math` offers the best combination of efficiency and error handling.  The recursive version is primarily for illustrative purposes to demonstrate a different programming technique.  The basic version is useful for educational purposes to show the underlying logic.  The version with explicit error handling is crucial for robust code.\n",
    "language": "Python",
    "tags": [
      "ai-generated",
      "auto-saved"
    ],
    "created_at": "2025-08-21T14:50:42.608296"
  },
  {
    "title": "AI Generated: create a simple python factorial\n...",
    "description": "Automatically generated for search: create a simple python factorial\n",
    "code": "Several ways exist to create a factorial function in Python. Here are three options, each with slightly different characteristics:\n\n**Option 1: Iterative approach (most efficient)**\n\nThis approach uses a loop, making it generally the most efficient for larger numbers.\n\n```python\ndef factorial_iterative(n):\n  \"\"\"\n  Calculates the factorial of a non-negative integer using iteration.\n\n  Args:\n    n: The non-negative integer.\n\n  Returns:\n    The factorial of n.  Returns 1 if n is 0.\n    Raises ValueError if n is negative.\n  \"\"\"\n  if n < 0:\n    raise ValueError(\"Factorial is not defined for negative numbers.\")\n  elif n == 0:\n    return 1\n  else:\n    result = 1\n    for i in range(1, n + 1):\n      result *= i\n    return result\n\n```\n\n**Option 2: Recursive approach (elegant but less efficient)**\n\nThis approach uses recursion, which is more concise but can be less efficient for larger numbers due to function call overhead.  It also risks stack overflow errors for very large `n`.\n\n```python\ndef factorial_recursive(n):\n  \"\"\"\n  Calculates the factorial of a non-negative integer using recursion.\n\n  Args:\n    n: The non-negative integer.\n\n  Returns:\n    The factorial of n. Returns 1 if n is 0.\n    Raises ValueError if n is negative.\n  \"\"\"\n  if n < 0:\n    raise ValueError(\"Factorial is not defined for negative numbers.\")\n  elif n == 0:\n    return 1\n  else:\n    return n * factorial_recursive(n - 1)\n\n```\n\n**Option 3: Using the `math` module (concise and efficient)**\n\nPython's `math` module provides a built-in factorial function which is generally efficient and well-optimized.\n\n```python\nimport math\n\ndef factorial_math(n):\n  \"\"\"\n  Calculates the factorial of a non-negative integer using the math module.\n\n  Args:\n    n: The non-negative integer.\n\n  Returns:\n    The factorial of n.\n    Raises ValueError if n is negative or not an integer.\n  \"\"\"\n  if not isinstance(n, int):\n      raise ValueError(\"Factorial is only defined for integers.\")\n  if n < 0:\n    raise ValueError(\"Factorial is not defined for negative numbers.\")\n  return math.factorial(n)\n\n```\n\nRemember to handle potential errors, such as negative input, as shown in the examples.  For most cases, `factorial_iterative` or `factorial_math` are preferred for their efficiency and robustness.  `factorial_recursive` is primarily useful for demonstrating the recursive programming paradigm.\n",
    "language": "Python",
    "tags": [
      "ai-generated",
      "auto-saved"
    ],
    "created_at": "2025-08-21T14:52:15.286277"
  },
  {
    "title": "AI Generated: def(hello  3): if x =_1 ...",
    "description": "Automatically generated for search: def(hello  3): if x =_1 ",
    "code": "The provided code snippet `def(hello  3): if x =_1` has multiple syntax errors. Let's break them down and fix them.\n\n\n**1. Issue Identification:**\n\n* **Incorrect function definition:** `def(hello  3):` is not valid Python syntax for defining a function.  Function names must follow standard variable naming rules (letters, numbers, underscores, starting with a letter or underscore).  The parentheses after `def` contain the function's parameters, not a random space and number.\n* **Invalid assignment:** `if x =_1` attempts to assign a value to `x` within an `if` condition.  Assignment uses a single `=`, while comparison uses a double `==`.  Furthermore, `_1` is not a valid variable name or literal; it's likely a typo.  Assuming it was meant to be `1`, it implies a comparison to the integer 1.\n* **Missing colon after if:** The `if` statement needs a colon (`:`) at the end to indicate the start of the indented code block.\n* **Missing indentation:** The code following the `if` statement needs to be indented to indicate it belongs to that conditional block.  There's no code provided after the `if`, but it would need indentation.\n\n\n**2. Fixed Code (with assumption):**\n\nAssuming the intention was to create a function that checks if a variable `x` is equal to 1 and prints \"Hello\" if true, here's the corrected code:\n\n\n```python\ndef hello(x):\n  if x == 1:\n    print(\"Hello\")\n\n# Example usage\nhello(1)  # Prints \"Hello\"\nhello(2)  # Prints nothing\n\n```\n\n\n**3. Solution Explanation:**\n\n* **Function Definition:** The line `def hello(x):` correctly defines a function named `hello` that takes one argument, `x`.\n* **Comparison:** The line `if x == 1:` uses the correct double equals (`==`) for comparison, checking if the value of `x` is equal to 1.\n* **Colon:** The colon (`:`) after the `if` statement is crucial for correct syntax.\n* **Indentation:** The `print(\"Hello\")` statement is indented, correctly indicating that it's executed only if the condition in the `if` statement is true.\n* **Example Usage:** The code demonstrates how to call the function with different arguments.\n\n\nThe original code was fundamentally flawed in its syntax. The corrected version shows how to write a simple function that performs a basic comparison and executes a statement conditionally.  If the original intent was different (e.g.,  a different operation, a different condition), the corrected code would need to be adjusted accordingly.  More context would be needed to produce code matching an unseen intention.\n",
    "language": "Python",
    "tags": [
      "ai-generated",
      "auto-saved"
    ],
    "created_at": "2025-08-21T15:03:45.918266"
  },
  {
    "title": "AI Generated: \"Write a Python function called analyze_text that ...",
    "description": "Automatically generated for search: \"Write a Python function called analyze_text that takes a string as input and returns a dictionary with the following informatio",
    "code": "This task requires a full-fledged application, including a web framework (like Flask or FastAPI) for serving the API, which goes beyond a simple function.  I'll provide the core Python function with comprehensive tests, and outline how to integrate it into a larger application.\n\n**1. Complete Implementation Code:**\n\n```python\nimport re\n\ndef analyze_text(text):\n    \"\"\"\n    Analyzes text and returns a dictionary with word count, unique word count, \n    and average word length.  Handles edge cases gracefully.\n\n    Args:\n        text: The input string.\n\n    Returns:\n        A dictionary containing the analysis results.  Returns an error message\n        in the dictionary if the input is invalid.\n    \"\"\"\n    if not isinstance(text, str):\n        return {\"error\": \"Input must be a string\"}\n    if not text.strip():  #Check for empty strings after removing whitespace\n        return {\"error\": \"Input string cannot be empty\"}\n\n    words = re.findall(r'\\b\\w+\\b', text.lower()) #Find all words, ignoring case\n\n    if not words:\n        return {\"error\": \"No words found in the input string\"}\n\n\n    word_count = len(words)\n    unique_words = len(set(words))\n    average_word_length = sum(len(word) for word in words) / word_count if word_count > 0 else 0\n\n    return {\n        \"word_count\": word_count,\n        \"unique_word_count\": unique_words,\n        \"average_word_length\": average_word_length,\n    }\n\n```\n\n**2. Brief Explanation of Architecture (for a complete API):**\n\nA production-ready application would use a framework like Flask or FastAPI.  The `analyze_text` function would be a core component. The architecture would involve:\n\n* **API Endpoint:** A route (e.g., `/analyze`) to receive text input via a POST request (to handle potentially large inputs).\n* **Input Validation:**  More robust validation beyond what's in the function, possibly using a schema validation library (e.g., Pydantic with FastAPI).\n* **Error Handling:** Centralized error handling to return consistent, informative error responses in a standardized format (e.g., JSON).\n* **Data Storage (Optional):** If you need to store analysis results, you'd integrate a database (e.g., PostgreSQL, MongoDB).\n* **Deployment:** Deploy to a platform like Heroku, AWS, or Google Cloud.\n\n**3. Complexity Analysis:**\n\n* **Time Complexity:** O(n), where n is the number of characters in the input string.  The `re.findall` function and the loop to calculate average word length are both linear.\n* **Space Complexity:** O(n) in the worst case,  as the list of words could potentially store all the words from the input string.  The set of unique words also uses space proportional to the number of unique words.\n\n**4. Unit Tests:**\n\n```python\nimport unittest\nfrom your_module import analyze_text # Replace your_module\n\nclass TestAnalyzeText(unittest.TestCase):\n\n    def test_empty_string(self):\n        self.assertEqual(analyze_text(\"\"), {\"error\": \"Input string cannot be empty\"})\n\n    def test_non_string_input(self):\n        self.assertEqual(analyze_text(123), {\"error\": \"Input must be a string\"})\n\n    def test_valid_text(self):\n        text = \"This is a sample sentence.\"\n        result = analyze_text(text)\n        self.assertEqual(result[\"word_count\"], 5)\n        self.assertEqual(result[\"unique_word_count\"], 5)\n        self.assertAlmostEqual(result[\"average_word_length\"], 4.6)  # Account for floating point precision\n\n    def test_text_with_punctuation(self):\n        text = \"This, is; a. sample! sentence?\"\n        result = analyze_text(text)\n        self.assertEqual(result[\"word_count\"], 5)\n        self.assertEqual(result[\"unique_word_count\"], 5)\n        self.assertAlmostEqual(result[\"average_word_length\"], 4.6)\n\n    def test_text_with_no_words(self):\n      text = \".,!?\"\n      self.assertEqual(analyze_text(text), {\"error\": \"No words found in the input string\"})\n\n    def test_text_with_multiple_spaces(self):\n        text = \"This  is  a  sample  sentence.\"\n        result = analyze_text(text)\n        self.assertEqual(result[\"word_count\"], 5)\n        self.assertEqual(result[\"unique_word_count\"], 5)\n        self.assertAlmostEqual(result[\"average_word_length\"], 4.6)\n\nif __name__ == '__main__':\n    unittest.main()\n```\n\nRemember to replace `from your_module import analyze_text` with the actual path to your `analyze_text` function.  Run the tests using `python -m unittest your_test_file.py`.  This provides a solid foundation; building a full application requires integrating this with a web framework and adding more robust error handling and features.\n",
    "language": "Python",
    "tags": [
      "ai-generated",
      "auto-saved"
    ],
    "created_at": "2025-08-21T15:05:22.753263"
  },
  {
    "title": "AI Generated: Alternative for: i want deffi helmen algorithm...",
    "description": "Automatically generated for search: Alternative for: i want deffi helmen algorithm",
    "code": "```python\nimport hashlib\n\ndef helmen_algorithm(message):\n  \"\"\"\n  This function implements a simplified version of the Helmen algorithm \n  using SHA-256 for hashing.  It's not cryptographically secure for real-world \n  applications and is for illustrative purposes only.  A real Helmen-like\n  algorithm would require far more complex cryptographic primitives.\n  \"\"\"\n  hash_object = hashlib.sha256(message.encode())\n  hex_dig = hash_object.hexdigest()\n  return hex_dig\n\n#Example Usage\nmessage = \"This is a test message\"\nhashed_message = helmen_algorithm(message)\nprint(f\"The SHA-256 hash of '{message}' is: {hashed_message}\")\n\n```\n",
    "language": "python",
    "tags": [
      "ai-generated",
      "auto-saved"
    ],
    "created_at": "2025-08-31T12:16:38.242245"
  }
]